"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.contract = exports.definition = exports.FunctionConfigSchema = exports.messageDataSchema = exports.agentDataSchema = exports.learningSchema = exports.resultDataSchema = exports.genericMessageDataSchema = exports.VersionedTextsSchema = exports.blobSchema = void 0;
const core_1 = require("@ts-rest/core");
const zod_1 = require("zod");
const c = (0, core_1.initContract)();
const machineHeaders = {
    "x-machine-id": zod_1.z.string().optional(),
    "x-machine-sdk-version": zod_1.z.string().optional(),
    "x-machine-sdk-language": zod_1.z.string().optional(),
    "x-forwarded-for": zod_1.z.string().optional().optional(),
    "x-sentinel-no-mask": zod_1.z.string().optional().optional(),
    "x-sentinel-unmask-keys": zod_1.z.string().optional(),
};
exports.blobSchema = zod_1.z.object({
    id: zod_1.z.string(),
    name: zod_1.z.string(),
    type: zod_1.z.enum(["json", "json-array"]),
    encoding: zod_1.z.enum(["base64"]),
    size: zod_1.z.number(),
    createdAt: zod_1.z.date(),
});
exports.VersionedTextsSchema = zod_1.z.object({
    current: zod_1.z.object({
        version: zod_1.z.string(),
        content: zod_1.z.string(),
    }),
    history: zod_1.z.array(zod_1.z.object({
        version: zod_1.z.string(),
        content: zod_1.z.string(),
    })),
});
exports.genericMessageDataSchema = zod_1.z
    .object({
    message: zod_1.z.string(),
    details: zod_1.z.object({}).passthrough().optional(),
})
    .strict();
exports.resultDataSchema = zod_1.z
    .object({
    id: zod_1.z.string(),
    result: zod_1.z.object({}).passthrough(),
})
    .strict();
exports.learningSchema = zod_1.z.object({
    summary: zod_1.z
        .string()
        .describe("The new information that was learned. Be generic, do not refer to the entities."),
    entities: zod_1.z
        .array(zod_1.z.object({
        name: zod_1.z
            .string()
            .describe("The name of the entity this learning relates to."),
        type: zod_1.z.enum(["tool"]),
    }))
        .describe("The entities this learning relates to."),
    relevance: zod_1.z.object({
        temporality: zod_1.z
            .enum(["transient", "persistent"])
            .describe("How long do you expect this learning to be relevant for."),
    }),
});
exports.agentDataSchema = zod_1.z
    .object({
    done: zod_1.z.boolean().optional(),
    result: zod_1.z.any().optional(),
    summary: zod_1.z.string().optional(),
    learnings: zod_1.z.array(exports.learningSchema).optional(),
    issue: zod_1.z.string().optional(),
    invocations: zod_1.z
        .array(zod_1.z.object({
        id: zod_1.z.string().optional(),
        toolName: zod_1.z.string(),
        reasoning: zod_1.z.string(),
        input: zod_1.z.object({}).passthrough(),
    }))
        .optional(),
})
    .strict();
exports.messageDataSchema = zod_1.z.union([
    exports.resultDataSchema,
    exports.agentDataSchema,
    exports.genericMessageDataSchema,
]);
exports.FunctionConfigSchema = zod_1.z.object({
    cache: zod_1.z
        .object({
        keyPath: zod_1.z.string(),
        ttlSeconds: zod_1.z.number(),
    })
        .optional(),
    retryCountOnStall: zod_1.z.number().optional(),
    timeoutSeconds: zod_1.z.number().optional(),
    executionIdPath: zod_1.z.string().optional(),
    requiresApproval: zod_1.z.boolean().default(false).optional(),
    private: zod_1.z.boolean().default(false).optional(),
});
exports.definition = {
    createMachine: {
        method: "POST",
        path: "/machines",
        headers: zod_1.z.object({
            authorization: zod_1.z.string(),
            ...machineHeaders,
        }),
        body: zod_1.z.object({
            service: zod_1.z.string(),
            functions: zod_1.z
                .array(zod_1.z.object({
                name: zod_1.z.string(),
                description: zod_1.z.string().optional(),
                schema: zod_1.z.string().optional(),
                config: exports.FunctionConfigSchema.optional(),
            }))
                .optional(),
        }),
        responses: {
            200: zod_1.z.object({
                clusterId: zod_1.z.string(),
                queueUrl: zod_1.z.string(),
                region: zod_1.z.string(),
                enabled: zod_1.z.boolean().default(true),
                expiration: zod_1.z.date(),
                credentials: zod_1.z.object({
                    accessKeyId: zod_1.z.string(),
                    secretAccessKey: zod_1.z.string(),
                    sessionToken: zod_1.z.string(),
                }),
            }),
            204: zod_1.z.undefined(),
        },
    },
    // TODO: Remove
    acknowledgeJob: {
        method: "PUT",
        path: "/jobs/:jobId",
        headers: zod_1.z.object({
            authorization: zod_1.z.string(),
            ...machineHeaders,
        }),
        pathParams: zod_1.z.object({
            jobId: zod_1.z.string(),
        }),
        responses: {
            204: zod_1.z.undefined(),
            401: zod_1.z.undefined(),
        },
        body: zod_1.z.undefined(),
    },
    // TODO: Remove
    createResult: {
        method: "POST",
        path: "/jobs/:jobId/result",
        headers: zod_1.z.object({
            authorization: zod_1.z.string(),
            ...machineHeaders,
        }),
        pathParams: zod_1.z.object({
            jobId: zod_1.z.string(),
        }),
        responses: {
            204: zod_1.z.undefined(),
            401: zod_1.z.undefined(),
        },
        body: zod_1.z.object({
            result: zod_1.z.string(),
            resultType: zod_1.z.enum(["resolution", "rejection"]),
            // TODO: wrap this in meta
            functionExecutionTime: zod_1.z.number().optional(),
        }),
    },
    live: {
        method: "GET",
        path: "/live",
        responses: {
            200: zod_1.z.object({
                status: zod_1.z.string(),
            }),
        },
    },
    createBlob: {
        method: "POST",
        path: "/jobs/:jobId/blob",
        headers: zod_1.z.object({
            authorization: zod_1.z.string(),
            "x-machine-id": zod_1.z.string(),
            "x-machine-sdk-version": zod_1.z.string(),
            "x-machine-sdk-language": zod_1.z.string(),
            "x-forwarded-for": zod_1.z.string().optional(),
            "x-sentinel-no-mask": zod_1.z.string().optional(),
        }),
        pathParams: zod_1.z.object({
            jobId: zod_1.z.string(),
        }),
        responses: {
            201: zod_1.z.object({
                id: zod_1.z.string(),
            }),
            401: zod_1.z.undefined(),
            404: zod_1.z.object({
                message: zod_1.z.string(),
            }),
        },
        body: exports.blobSchema.omit({ id: true, createdAt: true }).and(zod_1.z.object({
            data: zod_1.z.string(),
        })),
    },
    getContract: {
        method: "GET",
        path: "/contract",
        responses: {
            200: zod_1.z.object({
                contract: zod_1.z.string(),
            }),
        },
    },
    listClusters: {
        method: "GET",
        path: "/clusters",
        headers: zod_1.z.object({
            authorization: zod_1.z.string(),
        }),
        responses: {
            200: zod_1.z.array(zod_1.z.object({
                id: zod_1.z.string(),
                name: zod_1.z.string(),
                createdAt: zod_1.z.date(),
                description: zod_1.z.string().nullable(),
            })),
            401: zod_1.z.undefined(),
        },
    },
    createCluster: {
        method: "POST",
        path: "/clusters",
        headers: zod_1.z.object({
            authorization: zod_1.z.string(),
        }),
        responses: {
            204: zod_1.z.undefined(),
        },
        body: zod_1.z.object({
            description: zod_1.z
                .string()
                .describe("Human readable description of the cluster"),
        }),
    },
    updateCluster: {
        method: "PUT",
        path: "/clusters/:clusterId",
        headers: zod_1.z.object({
            authorization: zod_1.z.string(),
        }),
        responses: {
            204: zod_1.z.undefined(),
            401: zod_1.z.undefined(),
        },
        body: zod_1.z.object({
            name: zod_1.z.string(),
            description: zod_1.z.string(),
            additionalContext: zod_1.z
                .object({
                current: zod_1.z
                    .object({
                    version: zod_1.z.string(),
                    content: zod_1.z.string(),
                })
                    .describe("Current cluster context version"),
                history: zod_1.z
                    .array(zod_1.z.object({
                    version: zod_1.z.string(),
                    content: zod_1.z.string(),
                }))
                    .describe("History of the cluster context versions"),
            })
                .optional()
                .describe("Additional cluster context which is included in all runs"),
            debug: zod_1.z
                .boolean()
                .optional()
                .describe("Enable additional logging (Including prompts and results) for use by Inferable support"),
        }),
    },
    getCluster: {
        method: "GET",
        path: "/clusters/:clusterId",
        headers: zod_1.z.object({
            authorization: zod_1.z.string(),
        }),
        responses: {
            200: zod_1.z.object({
                id: zod_1.z.string(),
                name: zod_1.z.string(),
                description: zod_1.z.string().nullable(),
                createdAt: zod_1.z.date(),
                debug: zod_1.z.boolean(),
                lastPingAt: zod_1.z.date().nullable(),
            }),
            401: zod_1.z.undefined(),
            404: zod_1.z.undefined(),
        },
        pathParams: zod_1.z.object({
            clusterId: zod_1.z.string(),
        }),
    },
    getService: {
        method: "GET",
        path: "/clusters/:clusterId/service/:serviceName",
        headers: zod_1.z.object({
            authorization: zod_1.z.string(),
        }),
        responses: {
            200: zod_1.z.object({
                jobs: zod_1.z.array(zod_1.z.object({
                    id: zod_1.z.string(),
                    targetFn: zod_1.z.string(),
                    service: zod_1.z.string().nullable(),
                    status: zod_1.z.string(),
                    resultType: zod_1.z.string().nullable(),
                    createdAt: zod_1.z.date(),
                    functionExecutionTime: zod_1.z.number().nullable(),
                })),
                definition: zod_1.z
                    .object({
                    name: zod_1.z.string(),
                    functions: zod_1.z
                        .array(zod_1.z.object({
                        name: zod_1.z.string(),
                        rate: zod_1.z
                            .object({
                            per: zod_1.z.enum(["minute", "hour"]),
                            limit: zod_1.z.number(),
                        })
                            .optional(),
                        cacheTTL: zod_1.z.number().optional(),
                    }))
                        .optional(),
                })
                    .nullable(),
            }),
            401: zod_1.z.undefined(),
            404: zod_1.z.undefined(),
        },
        pathParams: zod_1.z.object({
            clusterId: zod_1.z.string(),
            serviceName: zod_1.z.string(),
        }),
        query: zod_1.z.object({
            limit: zod_1.z.coerce.number().min(100).max(5000).default(2000),
        }),
    },
    listEvents: {
        method: "GET",
        path: "/clusters/:clusterId/events",
        headers: zod_1.z.object({
            authorization: zod_1.z.string(),
        }),
        responses: {
            200: zod_1.z.array(zod_1.z.object({
                type: zod_1.z.string(),
                machineId: zod_1.z.string().nullable(),
                service: zod_1.z.string().nullable(),
                createdAt: zod_1.z.date(),
                jobId: zod_1.z.string().nullable(),
                targetFn: zod_1.z.string().nullable(),
                resultType: zod_1.z.string().nullable(),
                status: zod_1.z.string().nullable(),
                workflowId: zod_1.z.string().nullable(),
                meta: zod_1.z.any().nullable(),
                id: zod_1.z.string(),
            })),
            401: zod_1.z.undefined(),
            404: zod_1.z.undefined(),
        },
        query: zod_1.z.object({
            type: zod_1.z.string().optional(),
            jobId: zod_1.z.string().optional(),
            machineId: zod_1.z.string().optional(),
            service: zod_1.z.string().optional(),
            workflowId: zod_1.z.string().optional(),
            includeMeta: zod_1.z.string().optional(),
        }),
    },
    getEventMeta: {
        method: "GET",
        path: "/clusters/:clusterId/events/:eventId/meta",
        headers: zod_1.z.object({
            authorization: zod_1.z.string(),
        }),
        responses: {
            200: zod_1.z.object({
                type: zod_1.z.string(),
                machineId: zod_1.z.string().nullable(),
                service: zod_1.z.string().nullable(),
                createdAt: zod_1.z.date(),
                jobId: zod_1.z.string().nullable(),
                targetFn: zod_1.z.string().nullable(),
                resultType: zod_1.z.string().nullable(),
                status: zod_1.z.string().nullable(),
                meta: zod_1.z.unknown(),
                id: zod_1.z.string(),
            }),
            401: zod_1.z.undefined(),
            404: zod_1.z.undefined(),
        },
    },
    // TODO: Remove
    executeJobSync: {
        method: "POST",
        path: "/clusters/:clusterId/execute",
        headers: zod_1.z.object({
            authorization: zod_1.z.string(),
        }),
        body: zod_1.z.object({
            service: zod_1.z.string(),
            function: zod_1.z.string(),
            input: zod_1.z.object({}).passthrough(),
        }),
        responses: {
            401: zod_1.z.undefined(),
            404: zod_1.z.undefined(),
            200: zod_1.z.object({
                resultType: zod_1.z.string(),
                result: zod_1.z.any(),
                status: zod_1.z.string(),
            }),
            400: zod_1.z.object({
                message: zod_1.z.string(),
            }),
            500: zod_1.z.object({
                error: zod_1.z.string(),
            }),
        },
    },
    createRun: {
        method: "POST",
        path: "/clusters/:clusterId/runs",
        headers: zod_1.z.object({
            authorization: zod_1.z.string(),
        }),
        body: zod_1.z.object({
            message: zod_1.z
                .string()
                .optional()
                .describe("The prompt message, do not provide if using a prompt template"),
            result: zod_1.z
                .object({
                handler: zod_1.z
                    .object({
                    service: zod_1.z.string(),
                    function: zod_1.z.string(),
                })
                    .optional()
                    .describe("The Inferable function which will be used to return result for the run"),
                schema: zod_1.z
                    .object({})
                    .passthrough()
                    .optional()
                    .describe("The JSON schema which the result should conform to"),
            })
                .optional(),
            attachedFunctions: zod_1.z
                .array(zod_1.z.string())
                .optional()
                .describe("An array of attached functions (Keys should be service in the format <SERVICE>_<FUNCTION>)"),
            metadata: zod_1.z
                .record(zod_1.z.string())
                .optional()
                .describe("Run metadata which can be used to filter runs"),
            test: zod_1.z
                .object({
                enabled: zod_1.z.boolean().default(false),
                mocks: zod_1.z
                    .record(zod_1.z.object({
                    output: zod_1.z
                        .object({})
                        .passthrough()
                        .describe("The mock output of the function"),
                }))
                    .optional()
                    .describe("Function mocks to be used in the run. (Keys should be function in the format <SERVICE>_<FUNCTION>)"),
            })
                .optional()
                .describe("When provided, the run will be marked as as a test / evaluation"),
            template: zod_1.z
                .object({
                id: zod_1.z.string().describe("The prompt template ID"),
                input: zod_1.z
                    .object({})
                    .passthrough()
                    .describe("The input arguments, these should match what is described in the prompt template definition"),
            })
                .optional()
                .describe("A prompt template which the run should be created from"),
        }),
        responses: {
            201: zod_1.z.object({
                id: zod_1.z.string().describe("The id of the newly created run"),
            }),
            401: zod_1.z.undefined(),
            400: zod_1.z.object({
                message: zod_1.z.string(),
            }),
        },
        pathParams: zod_1.z.object({
            clusterId: zod_1.z.string(),
        }),
    },
    deleteRun: {
        method: "DELETE",
        path: "/clusters/:clusterId/runs/:runId",
        headers: zod_1.z.object({
            authorization: zod_1.z.string(),
        }),
        body: zod_1.z.undefined(),
        responses: {
            204: zod_1.z.undefined(),
            401: zod_1.z.undefined(),
        },
        pathParams: zod_1.z.object({
            runId: zod_1.z.string(),
            clusterId: zod_1.z.string(),
        }),
    },
    createMessage: {
        method: "POST",
        path: "/clusters/:clusterId/runs/:runId/messages",
        headers: zod_1.z.object({
            authorization: zod_1.z.string(),
        }),
        body: zod_1.z.object({
            id: zod_1.z
                .string()
                .length(26)
                .regex(/^[0-9a-z]+$/i)
                .optional(),
            message: zod_1.z.string(),
            type: zod_1.z.enum(["human", "supervisor"]).optional(),
        }),
        responses: {
            200: zod_1.z.object({
                messages: zod_1.z.array(zod_1.z.object({
                    id: zod_1.z.string(),
                    data: exports.messageDataSchema,
                    type: zod_1.z.enum([
                        "human",
                        "template",
                        "result",
                        "agent",
                        "agent-invalid",
                        "supervisor",
                    ]),
                    createdAt: zod_1.z.date(),
                    pending: zod_1.z.boolean().default(false),
                })),
            }),
            401: zod_1.z.undefined(),
        },
        pathParams: zod_1.z.object({
            runId: zod_1.z.string(),
            clusterId: zod_1.z.string(),
        }),
    },
    listMessages: {
        method: "GET",
        path: "/clusters/:clusterId/runs/:runId/messages",
        headers: zod_1.z.object({
            authorization: zod_1.z.string(),
        }),
        responses: {
            200: zod_1.z.array(zod_1.z.object({
                id: zod_1.z.string(),
                data: exports.messageDataSchema,
                type: zod_1.z.enum([
                    "human",
                    "template",
                    "result",
                    "agent",
                    "agent-invalid",
                    "supervisor",
                ]),
                createdAt: zod_1.z.date(),
                pending: zod_1.z.boolean().default(false),
                displayableContext: zod_1.z.record(zod_1.z.string()).nullable(),
            })),
            401: zod_1.z.undefined(),
        },
    },
    listRuns: {
        method: "GET",
        path: "/clusters/:clusterId/runs",
        headers: zod_1.z.object({
            authorization: zod_1.z.string(),
        }),
        query: zod_1.z.object({
            userId: zod_1.z.string().optional(),
            test: zod_1.z.coerce
                .string()
                .transform((value) => value === "true")
                .optional(),
            limit: zod_1.z.coerce.number().min(10).max(50).default(50),
            metadata: zod_1.z
                .string()
                .optional()
                .describe("Filter runs by a metadata value (value:key)"),
            promptTemplateId: zod_1.z.string().optional(),
        }),
        responses: {
            200: zod_1.z.array(zod_1.z.object({
                id: zod_1.z.string(),
                name: zod_1.z.string(),
                userId: zod_1.z.string().nullable(),
                createdAt: zod_1.z.date(),
                status: zod_1.z
                    .enum(["pending", "running", "paused", "done", "failed"])
                    .nullable(),
                parentWorkflowId: zod_1.z.string().nullable(),
                test: zod_1.z.boolean(),
                promptTemplateId: zod_1.z.string().nullable(),
                promptTemplateVersion: zod_1.z.number().nullable(),
                feedbackScore: zod_1.z.number().nullable(),
            })),
            401: zod_1.z.undefined(),
        },
    },
    getRun: {
        method: "GET",
        path: "/clusters/:clusterId/runs/:runId",
        headers: zod_1.z.object({
            authorization: zod_1.z.string(),
        }),
        responses: {
            200: zod_1.z.object({
                id: zod_1.z.string(),
                jobHandle: zod_1.z.string().nullable(),
                userId: zod_1.z.string().nullable(),
                status: zod_1.z
                    .enum(["pending", "running", "paused", "done", "failed"])
                    .nullable(),
                failureReason: zod_1.z.string().nullable(),
                test: zod_1.z.boolean(),
                feedbackComment: zod_1.z.string().nullable(),
                feedbackScore: zod_1.z.number().nullable(),
                result: zod_1.z.string().nullable(),
                summary: zod_1.z.string().nullable(),
                metadata: zod_1.z.record(zod_1.z.string()).nullable(),
                attachedFunctions: zod_1.z.array(zod_1.z.string()).nullable(),
            }),
            401: zod_1.z.undefined(),
        },
    },
    createFeedback: {
        method: "POST",
        path: "/clusters/:clusterId/runs/:runId/feedback",
        headers: zod_1.z.object({
            authorization: zod_1.z.string(),
        }),
        body: zod_1.z.object({
            comment: zod_1.z.string().describe("Feedback comment").nullable(),
            score: zod_1.z
                .number()
                .describe("Score between 0 and 1")
                .min(0)
                .max(1)
                .nullable(),
        }),
        responses: {
            204: zod_1.z.undefined(),
            401: zod_1.z.undefined(),
            404: zod_1.z.undefined(),
        },
        pathParams: zod_1.z.object({
            runId: zod_1.z.string(),
            clusterId: zod_1.z.string(),
        }),
    },
    resolveInputRequest: {
        method: "POST",
        path: "/clusters/:clusterId/runs/:runId/input-requests/:inputRequestId",
        headers: zod_1.z.object({
            authorization: zod_1.z.string().optional(),
        }),
        body: zod_1.z.object({
            input: zod_1.z.string(),
        }),
        responses: {
            204: zod_1.z.undefined(),
            401: zod_1.z.undefined(),
            404: zod_1.z.undefined(),
        },
        pathParams: zod_1.z.object({
            runId: zod_1.z.string(),
            inputRequestId: zod_1.z.string(),
            clusterId: zod_1.z.string(),
        }),
    },
    getInputRequest: {
        method: "GET",
        path: "/clusters/:clusterId/runs/:runId/input-requests/:inputRequestId",
        headers: zod_1.z.object({
            authorization: zod_1.z.string().optional(),
        }),
        pathParams: zod_1.z.object({
            clusterId: zod_1.z.string(),
            runId: zod_1.z.string(),
            inputRequestId: zod_1.z.string(),
        }),
        responses: {
            200: zod_1.z.object({
                id: zod_1.z.string(),
                runId: zod_1.z.string(),
                clusterId: zod_1.z.string(),
                resolvedAt: zod_1.z.date().nullable(),
                createdAt: zod_1.z.date(),
                requestArgs: zod_1.z.string().nullable(),
                service: zod_1.z.string().nullable(),
                function: zod_1.z.string().nullable(),
                description: zod_1.z.string().nullable(),
                type: zod_1.z.string(),
                options: zod_1.z.array(zod_1.z.string()).optional(),
            }),
            401: zod_1.z.undefined(),
            404: zod_1.z.undefined(),
        },
    },
    oas: {
        method: "GET",
        path: "/public/oas.json",
        responses: {
            200: zod_1.z.unknown(),
        },
    },
    // TODO: Remove
    pingCluster: {
        method: "POST",
        path: "/ping-cluster",
        headers: zod_1.z.object({
            authorization: zod_1.z.string(),
            "x-machine-id": zod_1.z.string(),
            "x-machine-sdk-version": zod_1.z.string(),
            "x-machine-sdk-language": zod_1.z.string(),
            "x-forwarded-for": zod_1.z.string().optional(),
        }),
        body: zod_1.z.object({
            services: zod_1.z.array(zod_1.z.string()),
        }),
        responses: {
            204: zod_1.z.undefined(),
            401: zod_1.z.undefined(),
        },
    },
    // TODO: Remove
    pingClusterV2: {
        method: "POST",
        path: "/ping-cluster-v2",
        headers: zod_1.z.object({
            authorization: zod_1.z.string(),
            "x-machine-id": zod_1.z.string(),
            "x-machine-sdk-version": zod_1.z.string(),
            "x-machine-sdk-language": zod_1.z.string(),
            "x-forwarded-for": zod_1.z.string().optional(),
            "x-sentinel-no-mask": zod_1.z.string().optional(),
        }),
        body: zod_1.z.object({
            services: zod_1.z.array(zod_1.z.string()),
        }),
        responses: {
            200: zod_1.z.object({
                outdated: zod_1.z.boolean(),
            }),
            401: zod_1.z.undefined(),
        },
    },
    updateMessage: {
        method: "PUT",
        path: "/clusters/:clusterId/runs/:runId/messages/:messageId",
        headers: zod_1.z.object({ authorization: zod_1.z.string() }),
        body: zod_1.z.object({ message: zod_1.z.string() }),
        responses: {
            200: zod_1.z.object({
                data: exports.genericMessageDataSchema,
                id: zod_1.z.string(),
            }),
            404: zod_1.z.object({ message: zod_1.z.string() }),
            401: zod_1.z.undefined(),
        },
        pathParams: zod_1.z.object({
            clusterId: zod_1.z.string(),
            runId: zod_1.z.string(),
            messageId: zod_1.z.string(),
        }),
    },
    storeServiceMetadata: {
        method: "PUT",
        path: "/clusters/:clusterId/services/:service/keys/:key",
        headers: zod_1.z.object({ authorization: zod_1.z.string() }),
        body: zod_1.z.object({
            value: zod_1.z.string(),
        }),
        pathParams: zod_1.z.object({
            clusterId: zod_1.z.string(),
            service: zod_1.z.string(),
            key: zod_1.z.string(),
        }),
        responses: {
            204: zod_1.z.undefined(),
            401: zod_1.z.undefined(),
        },
    },
    getClusterExport: {
        method: "GET",
        path: "/clusters/:clusterId/export",
        headers: zod_1.z.object({ authorization: zod_1.z.string() }),
        pathParams: zod_1.z.object({ clusterId: zod_1.z.string() }),
        responses: {
            200: zod_1.z.object({
                data: zod_1.z.string(),
            }),
        },
    },
    consumeClusterExport: {
        method: "POST",
        path: "/clusters/:clusterId/import",
        headers: zod_1.z.object({ authorization: zod_1.z.string() }),
        body: zod_1.z.object({ data: zod_1.z.string() }),
        pathParams: zod_1.z.object({ clusterId: zod_1.z.string() }),
        responses: {
            200: zod_1.z.object({ message: zod_1.z.string() }),
            400: zod_1.z.undefined(),
        },
    },
    // TODO: Remove
    getJob: {
        method: "GET",
        path: "/clusters/:clusterId/jobs/:jobId",
        headers: zod_1.z.object({ authorization: zod_1.z.string() }),
        pathParams: zod_1.z.object({
            clusterId: zod_1.z.string(),
            jobId: zod_1.z.string(),
        }),
        responses: {
            200: zod_1.z.object({
                id: zod_1.z.string(),
                status: zod_1.z.string(),
                targetFn: zod_1.z.string(),
                service: zod_1.z.string(),
                executingMachineId: zod_1.z.string().nullable(),
                targetArgs: zod_1.z.string(),
                result: zod_1.z.string().nullable(),
                resultType: zod_1.z.string().nullable(),
                createdAt: zod_1.z.date(),
                blobs: zod_1.z.array(exports.blobSchema),
            }),
        },
    },
    listJobReferences: {
        method: "GET",
        path: "/clusters/:clusterId/runs/:runId/job-references",
        headers: zod_1.z.object({ authorization: zod_1.z.string() }),
        pathParams: zod_1.z.object({
            clusterId: zod_1.z.string(),
            runId: zod_1.z.string(),
        }),
        query: zod_1.z.object({
            token: zod_1.z.string(),
            before: zod_1.z.string(),
        }),
        responses: {
            200: zod_1.z.array(zod_1.z.object({
                id: zod_1.z.string(),
                result: zod_1.z.string().nullable(),
                createdAt: zod_1.z.date(),
                status: zod_1.z.string(),
                targetFn: zod_1.z.string(),
                service: zod_1.z.string(),
                executingMachineId: zod_1.z.string().nullable(),
            })),
        },
    },
    createApiKey: {
        method: "POST",
        path: "/clusters/:clusterId/api-keys",
        headers: zod_1.z.object({ authorization: zod_1.z.string() }),
        pathParams: zod_1.z.object({
            clusterId: zod_1.z.string(),
        }),
        body: zod_1.z.object({
            name: zod_1.z.string(),
            type: zod_1.z.enum(["cluster_manage", "cluster_consume", "cluster_machine"]),
        }),
        responses: {
            200: zod_1.z.object({
                id: zod_1.z.string(),
                key: zod_1.z.string(),
            }),
        },
    },
    listApiKeys: {
        method: "GET",
        path: "/clusters/:clusterId/api-keys",
        headers: zod_1.z.object({ authorization: zod_1.z.string() }),
        pathParams: zod_1.z.object({
            clusterId: zod_1.z.string(),
        }),
        responses: {
            200: zod_1.z.array(zod_1.z.object({
                id: zod_1.z.string(),
                name: zod_1.z.string(),
                type: zod_1.z.enum([
                    "cluster_manage",
                    "cluster_consume",
                    "cluster_machine",
                ]),
                createdAt: zod_1.z.date(),
                createdBy: zod_1.z.string(),
                revokedAt: zod_1.z.date().nullable(),
            })),
        },
    },
    revokeApiKey: {
        method: "DELETE",
        path: "/clusters/:clusterId/api-keys/:keyId",
        headers: zod_1.z.object({ authorization: zod_1.z.string() }),
        pathParams: zod_1.z.object({
            clusterId: zod_1.z.string(),
            keyId: zod_1.z.string(),
        }),
        body: zod_1.z.undefined(),
        responses: {
            204: zod_1.z.undefined(),
        },
    },
    getClusterContext: {
        method: "GET",
        path: "/clusters/:clusterId/additional-context",
        headers: zod_1.z.object({
            authorization: zod_1.z.string(),
        }),
        responses: {
            200: zod_1.z.object({
                additionalContext: exports.VersionedTextsSchema.nullable(),
            }),
            401: zod_1.z.undefined(),
            404: zod_1.z.undefined(),
        },
        pathParams: zod_1.z.object({
            clusterId: zod_1.z.string(),
        }),
    },
    listMachines: {
        method: "GET",
        path: "/clusters/:clusterId/machines",
        headers: zod_1.z.object({
            authorization: zod_1.z.string(),
        }),
        responses: {
            200: zod_1.z.array(zod_1.z.object({
                id: zod_1.z.string(),
                lastPingAt: zod_1.z.date(),
                ip: zod_1.z.string(),
            })),
        },
        pathParams: zod_1.z.object({
            clusterId: zod_1.z.string(),
        }),
    },
    listServices: {
        method: "GET",
        path: "/clusters/:clusterId/services",
        headers: zod_1.z.object({
            authorization: zod_1.z.string(),
        }),
        responses: {
            200: zod_1.z.array(zod_1.z.object({
                name: zod_1.z.string(),
                description: zod_1.z.string().optional(),
                functions: zod_1.z
                    .array(zod_1.z.object({
                    name: zod_1.z.string(),
                    description: zod_1.z.string().optional(),
                    schema: zod_1.z.string().optional(),
                    config: exports.FunctionConfigSchema.optional(),
                }))
                    .optional(),
            })),
        },
        pathParams: zod_1.z.object({
            clusterId: zod_1.z.string(),
        }),
    },
    getRunTimeline: {
        method: "GET",
        path: "/clusters/:clusterId/runs/:runId/timeline",
        headers: zod_1.z.object({ authorization: zod_1.z.string() }),
        query: zod_1.z.object({
            messagesAfter: zod_1.z.string().default("0"),
            activityAfter: zod_1.z.string().default("0"),
            jobsAfter: zod_1.z.string().default("0"),
            inputRequestsAfter: zod_1.z.string().default("0"),
        }),
        pathParams: zod_1.z.object({
            clusterId: zod_1.z.string(),
            runId: zod_1.z.string(),
        }),
        responses: {
            200: zod_1.z.object({
                messages: zod_1.z.array(zod_1.z.object({
                    id: zod_1.z.string(),
                    data: exports.messageDataSchema,
                    type: zod_1.z.enum([
                        "human",
                        // TODO: Remove 'template' type
                        "template",
                        "result",
                        "agent",
                        "agent-invalid",
                        "supervisor",
                    ]),
                    createdAt: zod_1.z.date(),
                    pending: zod_1.z.boolean().default(false),
                    displayableContext: zod_1.z.record(zod_1.z.string()).nullable(),
                })),
                activity: zod_1.z.array(zod_1.z.object({
                    id: zod_1.z.string(),
                    type: zod_1.z.string(),
                    machineId: zod_1.z.string().nullable(),
                    service: zod_1.z.string().nullable(),
                    createdAt: zod_1.z.date(),
                    jobId: zod_1.z.string().nullable(),
                    targetFn: zod_1.z.string().nullable(),
                })),
                jobs: zod_1.z.array(zod_1.z.object({
                    id: zod_1.z.string(),
                    status: zod_1.z.string(),
                    targetFn: zod_1.z.string(),
                    service: zod_1.z.string(),
                    resultType: zod_1.z.string().nullable(),
                    createdAt: zod_1.z.date(),
                })),
                inputRequests: zod_1.z.array(zod_1.z.object({
                    id: zod_1.z.string(),
                    type: zod_1.z.string(),
                    requestArgs: zod_1.z.string().nullable().optional(),
                    resolvedAt: zod_1.z.date().nullable().optional(),
                    createdAt: zod_1.z.date(),
                    service: zod_1.z.string().nullable().optional(),
                    function: zod_1.z.string().nullable().optional(),
                    description: zod_1.z.string().nullable().optional(),
                    presentedOptions: zod_1.z.array(zod_1.z.string()).nullable().optional(),
                })),
                run: zod_1.z.object({
                    id: zod_1.z.string(),
                    jobHandle: zod_1.z.string().nullable(),
                    userId: zod_1.z.string().nullable(),
                    status: zod_1.z
                        .enum(["pending", "running", "paused", "done", "failed"])
                        .nullable(),
                    failureReason: zod_1.z.string().nullable(),
                    test: zod_1.z.boolean(),
                    feedbackComment: zod_1.z.string().nullable(),
                    feedbackScore: zod_1.z.number().nullable(),
                    attachedFunctions: zod_1.z.array(zod_1.z.string()).nullable(),
                    name: zod_1.z.string().nullable(),
                }),
                blobs: zod_1.z.array(exports.blobSchema),
            }),
        },
    },
    getBlobData: {
        method: "GET",
        path: "/clusters/:clusterId/blobs/:blobId/data",
        headers: zod_1.z.object({ authorization: zod_1.z.string() }),
        pathParams: zod_1.z.object({
            clusterId: zod_1.z.string(),
            blobId: zod_1.z.string(),
        }),
        responses: {
            200: zod_1.z.any(),
            404: zod_1.z.undefined(),
        },
    },
    upsertToolMetadata: {
        method: "PUT",
        path: "/clusters/:clusterId/tool-metadata",
        headers: zod_1.z.object({
            authorization: zod_1.z.string(),
        }),
        pathParams: zod_1.z.object({
            clusterId: zod_1.z.string(),
        }),
        body: zod_1.z.object({
            service: zod_1.z.string(),
            function_name: zod_1.z.string(),
            user_defined_context: zod_1.z.string().nullable(),
            result_schema: zod_1.z.unknown().nullable(),
        }),
        responses: {
            204: zod_1.z.undefined(),
            401: zod_1.z.undefined(),
        },
    },
    getToolMetadata: {
        method: "GET",
        path: "/clusters/:clusterId/tool-metadata/:service/:function_name",
        headers: zod_1.z.object({
            authorization: zod_1.z.string(),
        }),
        pathParams: zod_1.z.object({
            clusterId: zod_1.z.string(),
            service: zod_1.z.string(),
            function_name: zod_1.z.string(),
        }),
        responses: {
            200: zod_1.z.object({
                cluster_id: zod_1.z.string(),
                service: zod_1.z.string(),
                function_name: zod_1.z.string(),
                user_defined_context: zod_1.z.string().nullable(),
                result_schema: zod_1.z.unknown().nullable(),
            }),
            401: zod_1.z.undefined(),
            404: zod_1.z.object({ message: zod_1.z.string() }),
        },
    },
    getAllToolMetadataForService: {
        method: "GET",
        path: "/clusters/:clusterId/tool-metadata/:service",
        headers: zod_1.z.object({
            authorization: zod_1.z.string(),
        }),
        pathParams: zod_1.z.object({
            clusterId: zod_1.z.string(),
            service: zod_1.z.string(),
        }),
        responses: {
            200: zod_1.z.array(zod_1.z.object({
                cluster_id: zod_1.z.string(),
                service: zod_1.z.string(),
                function_name: zod_1.z.string(),
                user_defined_context: zod_1.z.string().nullable(),
                result_schema: zod_1.z.unknown().nullable(),
            })),
            401: zod_1.z.undefined(),
        },
    },
    deleteToolMetadata: {
        method: "DELETE",
        path: "/clusters/:clusterId/tool-metadata/:service/:function_name",
        headers: zod_1.z.object({
            authorization: zod_1.z.string(),
        }),
        pathParams: zod_1.z.object({
            clusterId: zod_1.z.string(),
            service: zod_1.z.string(),
            function_name: zod_1.z.string(),
        }),
        body: zod_1.z.undefined(),
        responses: {
            204: zod_1.z.undefined(),
            401: zod_1.z.undefined(),
        },
    },
    generatePromptTemplate: {
        method: "GET",
        path: "/clusters/:clusterId/prompt-templates/generate",
        headers: zod_1.z.object({ authorization: zod_1.z.string() }),
        query: zod_1.z.object({
            runId: zod_1.z.string(),
            messageId: zod_1.z.string().optional(),
        }),
        responses: {
            200: zod_1.z.object({
                name: zod_1.z.string(),
                prompt: zod_1.z.string(),
                attachedFunctions: zod_1.z.array(zod_1.z.string()),
                structuredOutput: zod_1.z.unknown().nullable(),
            }),
        },
    },
    createPromptTemplate: {
        method: "POST",
        path: "/clusters/:clusterId/prompt-templates",
        headers: zod_1.z.object({ authorization: zod_1.z.string() }),
        body: zod_1.z.object({
            name: zod_1.z.string(),
            prompt: zod_1.z.string(),
            attachedFunctions: zod_1.z.array(zod_1.z.string()),
            structuredOutput: zod_1.z.object({}).passthrough().optional(),
        }),
        responses: {
            201: zod_1.z.object({ id: zod_1.z.string() }),
            401: zod_1.z.undefined(),
        },
        pathParams: zod_1.z.object({
            clusterId: zod_1.z.string(),
        }),
    },
    getPromptTemplate: {
        method: "GET",
        path: "/clusters/:clusterId/prompt-templates/:templateId",
        headers: zod_1.z.object({ authorization: zod_1.z.string() }),
        responses: {
            200: zod_1.z.object({
                id: zod_1.z.string(),
                clusterId: zod_1.z.string(),
                name: zod_1.z.string(),
                prompt: zod_1.z.string(),
                attachedFunctions: zod_1.z.array(zod_1.z.string()),
                structuredOutput: zod_1.z.unknown().nullable(),
                createdAt: zod_1.z.date(),
                updatedAt: zod_1.z.date(),
                versions: zod_1.z.array(zod_1.z.object({
                    version: zod_1.z.number(),
                    name: zod_1.z.string(),
                    prompt: zod_1.z.string(),
                    attachedFunctions: zod_1.z.array(zod_1.z.string()),
                    structuredOutput: zod_1.z.unknown().nullable(),
                })),
            }),
            401: zod_1.z.undefined(),
            404: zod_1.z.object({ message: zod_1.z.string() }),
        },
        pathParams: zod_1.z.object({
            clusterId: zod_1.z.string(),
            templateId: zod_1.z.string(),
        }),
        query: zod_1.z.object({
            withPreviousVersions: zod_1.z.enum(["true", "false"]).default("false"),
        }),
    },
    updatePromptTemplate: {
        method: "PUT",
        path: "/clusters/:clusterId/prompt-templates/:templateId",
        headers: zod_1.z.object({ authorization: zod_1.z.string() }),
        body: zod_1.z.object({
            name: zod_1.z.string().optional(),
            prompt: zod_1.z.string().optional(),
            attachedFunctions: zod_1.z.array(zod_1.z.string()).optional(),
            structuredOutput: zod_1.z.object({}).passthrough().optional(),
        }),
        responses: {
            200: zod_1.z.object({
                id: zod_1.z.string(),
                clusterId: zod_1.z.string(),
                name: zod_1.z.string(),
                prompt: zod_1.z.string(),
                attachedFunctions: zod_1.z.array(zod_1.z.string()),
                structuredOutput: zod_1.z.unknown().nullable(),
                createdAt: zod_1.z.date(),
                updatedAt: zod_1.z.date(),
            }),
            401: zod_1.z.undefined(),
            404: zod_1.z.object({ message: zod_1.z.string() }),
        },
        pathParams: zod_1.z.object({
            clusterId: zod_1.z.string(),
            templateId: zod_1.z.string(),
        }),
    },
    deletePromptTemplate: {
        method: "DELETE",
        path: "/clusters/:clusterId/prompt-templates/:templateId",
        headers: zod_1.z.object({ authorization: zod_1.z.string() }),
        responses: {
            204: zod_1.z.undefined(),
            401: zod_1.z.undefined(),
            404: zod_1.z.object({ message: zod_1.z.string() }),
        },
        body: zod_1.z.undefined(),
        pathParams: zod_1.z.object({
            clusterId: zod_1.z.string(),
            templateId: zod_1.z.string(),
        }),
    },
    listPromptTemplates: {
        method: "GET",
        path: "/clusters/:clusterId/prompt-templates",
        headers: zod_1.z.object({ authorization: zod_1.z.string() }),
        responses: {
            200: zod_1.z.array(zod_1.z.object({
                id: zod_1.z.string(),
                clusterId: zod_1.z.string(),
                name: zod_1.z.string(),
                prompt: zod_1.z.string(),
                attachedFunctions: zod_1.z.array(zod_1.z.string()),
                structuredOutput: zod_1.z.unknown().nullable(),
                createdAt: zod_1.z.date(),
                updatedAt: zod_1.z.date(),
            })),
            401: zod_1.z.undefined(),
        },
        pathParams: zod_1.z.object({
            clusterId: zod_1.z.string(),
        }),
    },
    searchPromptTemplates: {
        method: "GET",
        path: "/clusters/:clusterId/prompt-templates/search",
        headers: zod_1.z.object({ authorization: zod_1.z.string() }),
        query: zod_1.z.object({
            search: zod_1.z.string(),
        }),
        responses: {
            200: zod_1.z.array(zod_1.z.object({
                id: zod_1.z.string(),
                clusterId: zod_1.z.string(),
                name: zod_1.z.string(),
                prompt: zod_1.z.string(),
                attachedFunctions: zod_1.z.array(zod_1.z.string()),
                structuredOutput: zod_1.z.unknown().nullable(),
                createdAt: zod_1.z.date(),
                updatedAt: zod_1.z.date(),
                similarity: zod_1.z.number(),
            })),
            401: zod_1.z.undefined(),
        },
        pathParams: zod_1.z.object({
            clusterId: zod_1.z.string(),
        }),
    },
    updateClusterContext: {
        method: "PUT",
        path: "/clusters/:clusterId/additional-context",
        headers: zod_1.z.object({ authorization: zod_1.z.string() }),
        body: zod_1.z.object({
            additionalContext: exports.VersionedTextsSchema,
        }),
        responses: {
            204: zod_1.z.undefined(),
            401: zod_1.z.undefined(),
        },
        pathParams: zod_1.z.object({
            clusterId: zod_1.z.string(),
        }),
    },
    getTemplateMetrics: {
        method: "GET",
        path: "/clusters/:clusterId/prompt-templates/:templateId/metrics",
        headers: zod_1.z.object({ authorization: zod_1.z.string() }),
        responses: {
            200: zod_1.z.array(zod_1.z.object({
                createdAt: zod_1.z.date(),
                feedbackScore: zod_1.z.number().nullable(),
                jobFailureCount: zod_1.z.number(),
                timeToCompletion: zod_1.z.number(),
                jobCount: zod_1.z.number(),
            })),
        },
        pathParams: zod_1.z.object({
            clusterId: zod_1.z.string(),
            templateId: zod_1.z.string(),
        }),
    },
    createClusterKnowledgeArtifact: {
        method: "POST",
        path: "/clusters/:clusterId/knowledge",
        headers: zod_1.z.object({ authorization: zod_1.z.string() }),
        body: zod_1.z.object({
            artifacts: zod_1.z.array(zod_1.z.object({
                id: zod_1.z.string(),
                data: zod_1.z.string(),
            })),
        }),
        responses: {
            204: zod_1.z.undefined(),
            401: zod_1.z.undefined(),
        },
        pathParams: zod_1.z.object({
            clusterId: zod_1.z.string(),
        }),
    },
    createRetry: {
        method: "POST",
        path: "/clusters/:clusterId/runs/:runId/retry",
        headers: zod_1.z.object({ authorization: zod_1.z.string() }),
        body: zod_1.z.object({
            messageId: zod_1.z.string(),
        }),
        responses: {
            204: zod_1.z.undefined(),
            401: zod_1.z.undefined(),
        },
    },
    createCall: {
        method: "POST",
        path: "/clusters/:clusterId/calls",
        query: zod_1.z.object({
            waitTime: zod_1.z.coerce
                .number()
                .min(0)
                .max(20)
                .default(0)
                .describe("Time in seconds to keep the request open waiting for a response"),
        }),
        headers: zod_1.z.object({
            authorization: zod_1.z.string(),
        }),
        body: zod_1.z.object({
            service: zod_1.z.string(),
            function: zod_1.z.string(),
            input: zod_1.z.object({}).passthrough(),
        }),
        responses: {
            401: zod_1.z.undefined(),
            200: zod_1.z.object({
                id: zod_1.z.string(),
                result: zod_1.z.any().nullable(),
                resultType: zod_1.z.enum(["resolution", "rejection"]).nullable(),
                status: zod_1.z.enum(["pending", "running", "success", "failure", "stalled"]),
            }),
        },
    },
    createCallResult: {
        method: "POST",
        path: "/clusters/:clusterId/calls/:callId/result",
        headers: zod_1.z.object({
            authorization: zod_1.z.string(),
            ...machineHeaders,
        }),
        pathParams: zod_1.z.object({
            clusterId: zod_1.z.string(),
            callId: zod_1.z.string(),
        }),
        responses: {
            204: zod_1.z.undefined(),
            401: zod_1.z.undefined(),
        },
        body: zod_1.z.object({
            result: zod_1.z.any(),
            resultType: zod_1.z.enum(["resolution", "rejection"]),
            meta: zod_1.z.object({
                functionExecutionTime: zod_1.z.number().optional(),
            }),
        }),
    },
    listCalls: {
        method: "GET",
        path: "/clusters/:clusterId/calls",
        query: zod_1.z.object({
            service: zod_1.z.string(),
            status: zod_1.z
                .enum(["pending", "running", "paused", "done", "failed"])
                .default("pending"),
            limit: zod_1.z.coerce.number().min(1).max(20).default(10),
            acknowledge: zod_1.z.coerce
                .boolean()
                .default(false)
                .describe("Should calls be marked as running"),
        }),
        pathParams: zod_1.z.object({
            clusterId: zod_1.z.string(),
        }),
        headers: zod_1.z.object({
            authorization: zod_1.z.string(),
            ...machineHeaders,
        }),
        responses: {
            401: zod_1.z.undefined(),
            200: zod_1.z.array(zod_1.z.object({
                id: zod_1.z.string(),
                function: zod_1.z.string(),
                input: zod_1.z.any(),
            })),
        },
    },
};
exports.contract = c.router(exports.definition);
//# sourceMappingURL=contract.js.map