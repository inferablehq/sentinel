import { z } from "zod";
import { JsonSchemaInput } from "./types";
export declare const validateServiceName: (name: string) => void;
export declare const validateFunctionName: (name: string) => void;
export declare const validatePropertyName: (name: string) => void;
export declare const validateDescription: (description?: string) => void;
export declare const validateFunctionSchema: (input: JsonSchemaInput) => {
    path: string;
    error: string;
}[];
export declare const ajvErrorToFailures: (error: Error) => {
    path: string;
    error: string;
}[];
export declare const isZodType: (input: any) => input is z.ZodTypeAny;
export declare const BLOB_DATA_KEY = "__inferable_blob_data";
export declare const extractBlobs: (content: unknown) => {
    content: unknown;
    blobs: z.infer<typeof blobExtractionSchema>[];
};
declare const blobExtractionSchema: z.ZodIntersection<z.ZodObject<Omit<{
    id: z.ZodString;
    name: z.ZodString;
    type: z.ZodEnum<["json", "json-array"]>;
    encoding: z.ZodEnum<["base64"]>;
    size: z.ZodNumber;
    createdAt: z.ZodDate;
}, "id" | "createdAt">, "strip", z.ZodTypeAny, {
    name: string;
    type: "json" | "json-array";
    encoding: "base64";
    size: number;
}, {
    name: string;
    type: "json" | "json-array";
    encoding: "base64";
    size: number;
}>, z.ZodObject<{
    data: z.ZodString;
}, "strip", z.ZodTypeAny, {
    data: string;
}, {
    data: string;
}>>;
export declare const blob: ({ name, data }: {
    name: string;
    data: unknown;
}) => {
    __inferable_blob_data: {
        name: string;
        type: string;
        encoding: string;
        data: string;
        size: number;
    };
};
export {};
