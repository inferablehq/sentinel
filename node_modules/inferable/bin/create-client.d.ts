export declare const createApiClient: ({ baseUrl, machineId, clientAbortController, apiSecret, }: {
    baseUrl?: string;
    machineId?: string;
    clientAbortController?: AbortController;
    apiSecret?: string;
}) => {
    readonly createMachine: (args: {
        cache?: RequestCache | undefined;
        body: {
            service: string;
            functions?: {
                name: string;
                description?: string | undefined;
                schema?: string | undefined;
                config?: {
                    cache?: {
                        keyPath: string;
                        ttlSeconds: number;
                    } | undefined;
                    retryCountOnStall?: number | undefined;
                    timeoutSeconds?: number | undefined;
                    executionIdPath?: string | undefined;
                    requiresApproval?: boolean | undefined;
                    private?: boolean | undefined;
                } | undefined;
            }[] | undefined;
        };
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
            "x-machine-id"?: undefined;
            "x-machine-sdk-version"?: undefined;
            "x-machine-sdk-language"?: undefined;
            "x-forwarded-for"?: undefined;
            "x-sentinel-no-mask"?: undefined;
            "x-sentinel-unmask-keys"?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            "x-forwarded-for"?: string | undefined;
            "x-sentinel-no-mask"?: string | undefined;
            "x-sentinel-unmask-keys"?: string | undefined;
            authorization?: string | undefined;
            "x-machine-id"?: string | undefined;
            "x-machine-sdk-version"?: string | undefined;
            "x-machine-sdk-language"?: string | undefined;
        } | undefined;
    }) => Promise<{
        status: 200;
        body: {
            clusterId: string;
            queueUrl: string;
            region: string;
            enabled: boolean;
            expiration: Date;
            credentials: {
                accessKeyId: string;
                secretAccessKey: string;
                sessionToken: string;
            };
        };
        headers: Headers;
    } | {
        status: 204;
        body: undefined;
        headers: Headers;
    } | {
        status: 100 | 401 | 201 | 404 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly acknowledgeJob: (args: {
        params: {
            jobId: string;
        };
        cache?: RequestCache | undefined;
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
            "x-machine-id"?: undefined;
            "x-machine-sdk-version"?: undefined;
            "x-machine-sdk-language"?: undefined;
            "x-forwarded-for"?: undefined;
            "x-sentinel-no-mask"?: undefined;
            "x-sentinel-unmask-keys"?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            "x-forwarded-for"?: string | undefined;
            "x-sentinel-no-mask"?: string | undefined;
            "x-sentinel-unmask-keys"?: string | undefined;
            authorization?: string | undefined;
            "x-machine-id"?: string | undefined;
            "x-machine-sdk-version"?: string | undefined;
            "x-machine-sdk-language"?: string | undefined;
        } | undefined;
    }) => Promise<{
        status: 204;
        body: undefined;
        headers: Headers;
    } | {
        status: 401;
        body: undefined;
        headers: Headers;
    } | {
        status: 100 | 200 | 201 | 404 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly createResult: (args: {
        params: {
            jobId: string;
        };
        cache?: RequestCache | undefined;
        body: {
            result: string;
            resultType: "resolution" | "rejection";
            functionExecutionTime?: number | undefined;
        };
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
            "x-machine-id"?: undefined;
            "x-machine-sdk-version"?: undefined;
            "x-machine-sdk-language"?: undefined;
            "x-forwarded-for"?: undefined;
            "x-sentinel-no-mask"?: undefined;
            "x-sentinel-unmask-keys"?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            "x-forwarded-for"?: string | undefined;
            "x-sentinel-no-mask"?: string | undefined;
            "x-sentinel-unmask-keys"?: string | undefined;
            authorization?: string | undefined;
            "x-machine-id"?: string | undefined;
            "x-machine-sdk-version"?: string | undefined;
            "x-machine-sdk-language"?: string | undefined;
        } | undefined;
    }) => Promise<{
        status: 204;
        body: undefined;
        headers: Headers;
    } | {
        status: 401;
        body: undefined;
        headers: Headers;
    } | {
        status: 100 | 200 | 201 | 404 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly live: (args?: {
        cache?: RequestCache | undefined;
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: Record<string, string | undefined> | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
    } | undefined) => Promise<{
        status: 200;
        body: {
            status: string;
        };
        headers: Headers;
    } | {
        status: 100 | 204 | 401 | 201 | 404 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly createBlob: (args: {
        params: {
            jobId: string;
        };
        cache?: RequestCache | undefined;
        body: {
            name: string;
            type: "json" | "json-array";
            encoding: "base64";
            size: number;
        } & {
            data: string;
        };
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
            "x-machine-id"?: undefined;
            "x-machine-sdk-version"?: undefined;
            "x-machine-sdk-language"?: undefined;
            "x-forwarded-for"?: undefined;
            "x-sentinel-no-mask"?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            "x-forwarded-for"?: string | undefined;
            "x-sentinel-no-mask"?: string | undefined;
            authorization?: string | undefined;
            "x-machine-id"?: string | undefined;
            "x-machine-sdk-version"?: string | undefined;
            "x-machine-sdk-language"?: string | undefined;
        } | undefined;
    }) => Promise<{
        status: 401;
        body: undefined;
        headers: Headers;
    } | {
        status: 201;
        body: {
            id: string;
        };
        headers: Headers;
    } | {
        status: 404;
        body: {
            message: string;
        };
        headers: Headers;
    } | {
        status: 100 | 200 | 204 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly getContract: (args?: {
        cache?: RequestCache | undefined;
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: Record<string, string | undefined> | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
    } | undefined) => Promise<{
        status: 200;
        body: {
            contract: string;
        };
        headers: Headers;
    } | {
        status: 100 | 204 | 401 | 201 | 404 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly listClusters: (args?: {
        cache?: RequestCache | undefined;
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            authorization?: string | undefined;
        } | undefined;
    } | undefined) => Promise<{
        status: 200;
        body: {
            id: string;
            name: string;
            createdAt: Date;
            description: string | null;
        }[];
        headers: Headers;
    } | {
        status: 401;
        body: undefined;
        headers: Headers;
    } | {
        status: 100 | 204 | 201 | 404 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly createCluster: (args: {
        cache?: RequestCache | undefined;
        body: {
            description: string;
        };
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            authorization?: string | undefined;
        } | undefined;
    }) => Promise<{
        status: 204;
        body: undefined;
        headers: Headers;
    } | {
        status: 100 | 200 | 401 | 201 | 404 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly updateCluster: (args: {
        params: {
            clusterId: string;
        };
        cache?: RequestCache | undefined;
        body: {
            name: string;
            description: string;
            additionalContext?: {
                current: {
                    version: string;
                    content: string;
                };
                history: {
                    version: string;
                    content: string;
                }[];
            } | undefined;
            debug?: boolean | undefined;
        };
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            authorization?: string | undefined;
        } | undefined;
    }) => Promise<{
        status: 204;
        body: undefined;
        headers: Headers;
    } | {
        status: 401;
        body: undefined;
        headers: Headers;
    } | {
        status: 100 | 200 | 201 | 404 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly getCluster: (args: {
        params: {
            clusterId: string;
        };
        cache?: RequestCache | undefined;
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            authorization?: string | undefined;
        } | undefined;
    }) => Promise<{
        status: 200;
        body: {
            id: string;
            name: string;
            createdAt: Date;
            description: string | null;
            debug: boolean;
            lastPingAt: Date | null;
        };
        headers: Headers;
    } | {
        status: 401;
        body: undefined;
        headers: Headers;
    } | {
        status: 404;
        body: undefined;
        headers: Headers;
    } | {
        status: 100 | 204 | 201 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly getService: (args: {
        params: {
            clusterId: string;
            serviceName: string;
        };
        cache?: RequestCache | undefined;
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            authorization?: string | undefined;
        } | undefined;
        query?: {
            limit?: number | undefined;
        } | undefined;
    }) => Promise<{
        status: 200;
        body: {
            jobs: {
                id: string;
                status: string;
                createdAt: Date;
                service: string | null;
                resultType: string | null;
                functionExecutionTime: number | null;
                targetFn: string;
            }[];
            definition: {
                name: string;
                functions?: {
                    name: string;
                    rate?: {
                        per: "minute" | "hour";
                        limit: number;
                    } | undefined;
                    cacheTTL?: number | undefined;
                }[] | undefined;
            } | null;
        };
        headers: Headers;
    } | {
        status: 401;
        body: undefined;
        headers: Headers;
    } | {
        status: 404;
        body: undefined;
        headers: Headers;
    } | {
        status: 100 | 204 | 201 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly listEvents: (args: {
        params: {
            clusterId: string;
        };
        cache?: RequestCache | undefined;
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            authorization?: string | undefined;
        } | undefined;
        query?: {
            type?: string | undefined;
            service?: string | undefined;
            jobId?: string | undefined;
            machineId?: string | undefined;
            workflowId?: string | undefined;
            includeMeta?: string | undefined;
        } | undefined;
    }) => Promise<{
        status: 200;
        body: {
            id: string;
            type: string;
            status: string | null;
            createdAt: Date;
            service: string | null;
            jobId: string | null;
            resultType: string | null;
            targetFn: string | null;
            machineId: string | null;
            workflowId: string | null;
            meta?: any;
        }[];
        headers: Headers;
    } | {
        status: 401;
        body: undefined;
        headers: Headers;
    } | {
        status: 404;
        body: undefined;
        headers: Headers;
    } | {
        status: 100 | 204 | 201 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly getEventMeta: (args: {
        params: {
            clusterId: string;
            eventId: string;
        };
        cache?: RequestCache | undefined;
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            authorization?: string | undefined;
        } | undefined;
    }) => Promise<{
        status: 200;
        body: {
            id: string;
            type: string;
            status: string | null;
            createdAt: Date;
            service: string | null;
            jobId: string | null;
            resultType: string | null;
            targetFn: string | null;
            machineId: string | null;
            meta?: unknown;
        };
        headers: Headers;
    } | {
        status: 401;
        body: undefined;
        headers: Headers;
    } | {
        status: 404;
        body: undefined;
        headers: Headers;
    } | {
        status: 100 | 204 | 201 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly executeJobSync: (args: {
        params: {
            clusterId: string;
        };
        cache?: RequestCache | undefined;
        body: {
            function: string;
            input: {} & {
                [k: string]: unknown;
            };
            service: string;
        };
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            authorization?: string | undefined;
        } | undefined;
    }) => Promise<{
        status: 200;
        body: {
            status: string;
            resultType: string;
            result?: any;
        };
        headers: Headers;
    } | {
        status: 401;
        body: undefined;
        headers: Headers;
    } | {
        status: 404;
        body: undefined;
        headers: Headers;
    } | {
        status: 400;
        body: {
            message: string;
        };
        headers: Headers;
    } | {
        status: 500;
        body: {
            error: string;
        };
        headers: Headers;
    } | {
        status: 100 | 204 | 201 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly createRun: (args: {
        params: {
            clusterId: string;
        };
        cache?: RequestCache | undefined;
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            authorization?: string | undefined;
        } | undefined;
        body?: {
            message?: string | undefined;
            result?: {
                schema?: import("zod").objectInputType<{}, import("zod").ZodTypeAny, "passthrough"> | undefined;
                handler?: {
                    function: string;
                    service: string;
                } | undefined;
            } | undefined;
            attachedFunctions?: string[] | undefined;
            metadata?: Record<string, string> | undefined;
            test?: {
                enabled?: boolean | undefined;
                mocks?: Record<string, {
                    output: {} & {
                        [k: string]: unknown;
                    };
                }> | undefined;
            } | undefined;
            template?: {
                id: string;
                input: {} & {
                    [k: string]: unknown;
                };
            } | undefined;
        } | undefined;
    }) => Promise<{
        status: 401;
        body: undefined;
        headers: Headers;
    } | {
        status: 201;
        body: {
            id: string;
        };
        headers: Headers;
    } | {
        status: 400;
        body: {
            message: string;
        };
        headers: Headers;
    } | {
        status: 100 | 200 | 204 | 404 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly deleteRun: (args: {
        params: {
            clusterId: string;
            runId: string;
        };
        cache?: RequestCache | undefined;
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            authorization?: string | undefined;
        } | undefined;
    }) => Promise<{
        status: 204;
        body: undefined;
        headers: Headers;
    } | {
        status: 401;
        body: undefined;
        headers: Headers;
    } | {
        status: 100 | 200 | 201 | 404 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly createMessage: (args: {
        params: {
            clusterId: string;
            runId: string;
        };
        cache?: RequestCache | undefined;
        body: {
            message: string;
            id?: string | undefined;
            type?: "human" | "supervisor" | undefined;
        };
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            authorization?: string | undefined;
        } | undefined;
    }) => Promise<{
        status: 200;
        body: {
            messages: {
                id: string;
                type: "result" | "template" | "human" | "supervisor" | "agent" | "agent-invalid";
                createdAt: Date;
                data: {
                    message: string;
                    details?: import("zod").objectOutputType<{}, import("zod").ZodTypeAny, "passthrough"> | undefined;
                } | {
                    id: string;
                    result: {} & {
                        [k: string]: unknown;
                    };
                } | {
                    result?: any;
                    summary?: string | undefined;
                    done?: boolean | undefined;
                    learnings?: {
                        summary: string;
                        entities: {
                            name: string;
                            type: "tool";
                        }[];
                        relevance: {
                            temporality: "transient" | "persistent";
                        };
                    }[] | undefined;
                    issue?: string | undefined;
                    invocations?: {
                        toolName: string;
                        reasoning: string;
                        input: {} & {
                            [k: string]: unknown;
                        };
                        id?: string | undefined;
                    }[] | undefined;
                };
                pending: boolean;
            }[];
        };
        headers: Headers;
    } | {
        status: 401;
        body: undefined;
        headers: Headers;
    } | {
        status: 100 | 204 | 201 | 404 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly listMessages: (args: {
        params: {
            clusterId: string;
            runId: string;
        };
        cache?: RequestCache | undefined;
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            authorization?: string | undefined;
        } | undefined;
    }) => Promise<{
        status: 200;
        body: {
            id: string;
            type: "result" | "template" | "human" | "supervisor" | "agent" | "agent-invalid";
            createdAt: Date;
            data: {
                message: string;
                details?: import("zod").objectOutputType<{}, import("zod").ZodTypeAny, "passthrough"> | undefined;
            } | {
                id: string;
                result: {} & {
                    [k: string]: unknown;
                };
            } | {
                result?: any;
                summary?: string | undefined;
                done?: boolean | undefined;
                learnings?: {
                    summary: string;
                    entities: {
                        name: string;
                        type: "tool";
                    }[];
                    relevance: {
                        temporality: "transient" | "persistent";
                    };
                }[] | undefined;
                issue?: string | undefined;
                invocations?: {
                    toolName: string;
                    reasoning: string;
                    input: {} & {
                        [k: string]: unknown;
                    };
                    id?: string | undefined;
                }[] | undefined;
            };
            pending: boolean;
            displayableContext: Record<string, string> | null;
        }[];
        headers: Headers;
    } | {
        status: 401;
        body: undefined;
        headers: Headers;
    } | {
        status: 100 | 204 | 201 | 404 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly listRuns: (args: {
        params: {
            clusterId: string;
        };
        cache?: RequestCache | undefined;
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            authorization?: string | undefined;
        } | undefined;
        query?: {
            limit?: number | undefined;
            metadata?: string | undefined;
            test?: string | undefined;
            userId?: string | undefined;
            promptTemplateId?: string | undefined;
        } | undefined;
    }) => Promise<{
        status: 200;
        body: {
            id: string;
            name: string;
            status: "done" | "pending" | "running" | "paused" | "failed" | null;
            createdAt: Date;
            test: boolean;
            userId: string | null;
            promptTemplateId: string | null;
            parentWorkflowId: string | null;
            promptTemplateVersion: number | null;
            feedbackScore: number | null;
        }[];
        headers: Headers;
    } | {
        status: 401;
        body: undefined;
        headers: Headers;
    } | {
        status: 100 | 204 | 201 | 404 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly getRun: (args: {
        params: {
            clusterId: string;
            runId: string;
        };
        cache?: RequestCache | undefined;
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            authorization?: string | undefined;
        } | undefined;
    }) => Promise<{
        status: 200;
        body: {
            id: string;
            status: "done" | "pending" | "running" | "paused" | "failed" | null;
            result: string | null;
            summary: string | null;
            attachedFunctions: string[] | null;
            metadata: Record<string, string> | null;
            test: boolean;
            userId: string | null;
            feedbackScore: number | null;
            jobHandle: string | null;
            failureReason: string | null;
            feedbackComment: string | null;
        };
        headers: Headers;
    } | {
        status: 401;
        body: undefined;
        headers: Headers;
    } | {
        status: 100 | 204 | 201 | 404 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly createFeedback: (args: {
        params: {
            clusterId: string;
            runId: string;
        };
        cache?: RequestCache | undefined;
        body: {
            comment: string | null;
            score: number | null;
        };
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            authorization?: string | undefined;
        } | undefined;
    }) => Promise<{
        status: 204;
        body: undefined;
        headers: Headers;
    } | {
        status: 401;
        body: undefined;
        headers: Headers;
    } | {
        status: 404;
        body: undefined;
        headers: Headers;
    } | {
        status: 100 | 200 | 201 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly resolveInputRequest: (args: {
        params: {
            clusterId: string;
            runId: string;
            inputRequestId: string;
        };
        cache?: RequestCache | undefined;
        body: {
            input: string;
        };
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            authorization?: string | undefined;
        } | undefined;
    }) => Promise<{
        status: 204;
        body: undefined;
        headers: Headers;
    } | {
        status: 401;
        body: undefined;
        headers: Headers;
    } | {
        status: 404;
        body: undefined;
        headers: Headers;
    } | {
        status: 100 | 200 | 201 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly getInputRequest: (args: {
        params: {
            clusterId: string;
            runId: string;
            inputRequestId: string;
        };
        cache?: RequestCache | undefined;
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            authorization?: string | undefined;
        } | undefined;
    }) => Promise<{
        status: 200;
        body: {
            function: string | null;
            id: string;
            type: string;
            createdAt: Date;
            service: string | null;
            description: string | null;
            clusterId: string;
            runId: string;
            resolvedAt: Date | null;
            requestArgs: string | null;
            options?: string[] | undefined;
        };
        headers: Headers;
    } | {
        status: 401;
        body: undefined;
        headers: Headers;
    } | {
        status: 404;
        body: undefined;
        headers: Headers;
    } | {
        status: 100 | 204 | 201 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly oas: (args?: {
        cache?: RequestCache | undefined;
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: Record<string, string | undefined> | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
    } | undefined) => Promise<{
        status: 200;
        body: unknown;
        headers: Headers;
    } | {
        status: 100 | 204 | 401 | 201 | 404 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly pingCluster: (args: {
        cache?: RequestCache | undefined;
        body: {
            services: string[];
        };
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
            "x-machine-id"?: undefined;
            "x-machine-sdk-version"?: undefined;
            "x-machine-sdk-language"?: undefined;
            "x-forwarded-for"?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            "x-forwarded-for"?: string | undefined;
            authorization?: string | undefined;
            "x-machine-id"?: string | undefined;
            "x-machine-sdk-version"?: string | undefined;
            "x-machine-sdk-language"?: string | undefined;
        } | undefined;
    }) => Promise<{
        status: 204;
        body: undefined;
        headers: Headers;
    } | {
        status: 401;
        body: undefined;
        headers: Headers;
    } | {
        status: 100 | 200 | 201 | 404 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly pingClusterV2: (args: {
        cache?: RequestCache | undefined;
        body: {
            services: string[];
        };
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
            "x-machine-id"?: undefined;
            "x-machine-sdk-version"?: undefined;
            "x-machine-sdk-language"?: undefined;
            "x-forwarded-for"?: undefined;
            "x-sentinel-no-mask"?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            "x-forwarded-for"?: string | undefined;
            "x-sentinel-no-mask"?: string | undefined;
            authorization?: string | undefined;
            "x-machine-id"?: string | undefined;
            "x-machine-sdk-version"?: string | undefined;
            "x-machine-sdk-language"?: string | undefined;
        } | undefined;
    }) => Promise<{
        status: 200;
        body: {
            outdated: boolean;
        };
        headers: Headers;
    } | {
        status: 401;
        body: undefined;
        headers: Headers;
    } | {
        status: 100 | 204 | 201 | 404 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly updateMessage: (args: {
        params: {
            clusterId: string;
            runId: string;
            messageId: string;
        };
        cache?: RequestCache | undefined;
        body: {
            message: string;
        };
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            authorization?: string | undefined;
        } | undefined;
    }) => Promise<{
        status: 200;
        body: {
            id: string;
            data: {
                message: string;
                details?: import("zod").objectOutputType<{}, import("zod").ZodTypeAny, "passthrough"> | undefined;
            };
        };
        headers: Headers;
    } | {
        status: 401;
        body: undefined;
        headers: Headers;
    } | {
        status: 404;
        body: {
            message: string;
        };
        headers: Headers;
    } | {
        status: 100 | 204 | 201 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly storeServiceMetadata: (args: {
        params: {
            service: string;
            clusterId: string;
            key: string;
        };
        cache?: RequestCache | undefined;
        body: {
            value: string;
        };
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            authorization?: string | undefined;
        } | undefined;
    }) => Promise<{
        status: 204;
        body: undefined;
        headers: Headers;
    } | {
        status: 401;
        body: undefined;
        headers: Headers;
    } | {
        status: 100 | 200 | 201 | 404 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly getClusterExport: (args: {
        params: {
            clusterId: string;
        };
        cache?: RequestCache | undefined;
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            authorization?: string | undefined;
        } | undefined;
    }) => Promise<{
        status: 200;
        body: {
            data: string;
        };
        headers: Headers;
    } | {
        status: 100 | 204 | 401 | 201 | 404 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly consumeClusterExport: (args: {
        params: {
            clusterId: string;
        };
        cache?: RequestCache | undefined;
        body: {
            data: string;
        };
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            authorization?: string | undefined;
        } | undefined;
    }) => Promise<{
        status: 200;
        body: {
            message: string;
        };
        headers: Headers;
    } | {
        status: 400;
        body: undefined;
        headers: Headers;
    } | {
        status: 100 | 204 | 401 | 201 | 404 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly getJob: (args: {
        params: {
            clusterId: string;
            jobId: string;
        };
        cache?: RequestCache | undefined;
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            authorization?: string | undefined;
        } | undefined;
    }) => Promise<{
        status: 200;
        body: {
            id: string;
            status: string;
            createdAt: Date;
            result: string | null;
            service: string;
            resultType: string | null;
            targetFn: string;
            executingMachineId: string | null;
            targetArgs: string;
            blobs: {
                id: string;
                name: string;
                type: "json" | "json-array";
                encoding: "base64";
                size: number;
                createdAt: Date;
            }[];
        };
        headers: Headers;
    } | {
        status: 100 | 204 | 401 | 201 | 404 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly listJobReferences: (args: {
        params: {
            clusterId: string;
            runId: string;
        };
        cache?: RequestCache | undefined;
        query: {
            token: string;
            before: string;
        };
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            authorization?: string | undefined;
        } | undefined;
    }) => Promise<{
        status: 200;
        body: {
            id: string;
            status: string;
            createdAt: Date;
            result: string | null;
            service: string;
            targetFn: string;
            executingMachineId: string | null;
        }[];
        headers: Headers;
    } | {
        status: 100 | 204 | 401 | 201 | 404 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly createApiKey: (args: {
        params: {
            clusterId: string;
        };
        cache?: RequestCache | undefined;
        body: {
            name: string;
            type: "cluster_manage" | "cluster_consume" | "cluster_machine";
        };
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            authorization?: string | undefined;
        } | undefined;
    }) => Promise<{
        status: 200;
        body: {
            id: string;
            key: string;
        };
        headers: Headers;
    } | {
        status: 100 | 204 | 401 | 201 | 404 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly listApiKeys: (args: {
        params: {
            clusterId: string;
        };
        cache?: RequestCache | undefined;
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            authorization?: string | undefined;
        } | undefined;
    }) => Promise<{
        status: 200;
        body: {
            id: string;
            name: string;
            type: "cluster_manage" | "cluster_consume" | "cluster_machine";
            createdAt: Date;
            createdBy: string;
            revokedAt: Date | null;
        }[];
        headers: Headers;
    } | {
        status: 100 | 204 | 401 | 201 | 404 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly revokeApiKey: (args: {
        params: {
            clusterId: string;
            keyId: string;
        };
        cache?: RequestCache | undefined;
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            authorization?: string | undefined;
        } | undefined;
    }) => Promise<{
        status: 204;
        body: undefined;
        headers: Headers;
    } | {
        status: 100 | 200 | 401 | 201 | 404 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly getClusterContext: (args: {
        params: {
            clusterId: string;
        };
        cache?: RequestCache | undefined;
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            authorization?: string | undefined;
        } | undefined;
    }) => Promise<{
        status: 200;
        body: {
            additionalContext: {
                current: {
                    version: string;
                    content: string;
                };
                history: {
                    version: string;
                    content: string;
                }[];
            } | null;
        };
        headers: Headers;
    } | {
        status: 401;
        body: undefined;
        headers: Headers;
    } | {
        status: 404;
        body: undefined;
        headers: Headers;
    } | {
        status: 100 | 204 | 201 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly listMachines: (args: {
        params: {
            clusterId: string;
        };
        cache?: RequestCache | undefined;
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            authorization?: string | undefined;
        } | undefined;
    }) => Promise<{
        status: 200;
        body: {
            id: string;
            lastPingAt: Date;
            ip: string;
        }[];
        headers: Headers;
    } | {
        status: 100 | 204 | 401 | 201 | 404 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly listServices: (args: {
        params: {
            clusterId: string;
        };
        cache?: RequestCache | undefined;
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            authorization?: string | undefined;
        } | undefined;
    }) => Promise<{
        status: 200;
        body: {
            name: string;
            description?: string | undefined;
            functions?: {
                name: string;
                description?: string | undefined;
                schema?: string | undefined;
                config?: {
                    cache?: {
                        keyPath: string;
                        ttlSeconds: number;
                    } | undefined;
                    retryCountOnStall?: number | undefined;
                    timeoutSeconds?: number | undefined;
                    executionIdPath?: string | undefined;
                    requiresApproval?: boolean | undefined;
                    private?: boolean | undefined;
                } | undefined;
            }[] | undefined;
        }[];
        headers: Headers;
    } | {
        status: 100 | 204 | 401 | 201 | 404 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly getRunTimeline: (args: {
        params: {
            clusterId: string;
            runId: string;
        };
        cache?: RequestCache | undefined;
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            authorization?: string | undefined;
        } | undefined;
        query?: {
            messagesAfter?: string | undefined;
            activityAfter?: string | undefined;
            jobsAfter?: string | undefined;
            inputRequestsAfter?: string | undefined;
        } | undefined;
    }) => Promise<{
        status: 200;
        body: {
            jobs: {
                id: string;
                status: string;
                createdAt: Date;
                service: string;
                resultType: string | null;
                targetFn: string;
            }[];
            messages: {
                id: string;
                type: "result" | "template" | "human" | "supervisor" | "agent" | "agent-invalid";
                createdAt: Date;
                data: {
                    message: string;
                    details?: import("zod").objectOutputType<{}, import("zod").ZodTypeAny, "passthrough"> | undefined;
                } | {
                    id: string;
                    result: {} & {
                        [k: string]: unknown;
                    };
                } | {
                    result?: any;
                    summary?: string | undefined;
                    done?: boolean | undefined;
                    learnings?: {
                        summary: string;
                        entities: {
                            name: string;
                            type: "tool";
                        }[];
                        relevance: {
                            temporality: "transient" | "persistent";
                        };
                    }[] | undefined;
                    issue?: string | undefined;
                    invocations?: {
                        toolName: string;
                        reasoning: string;
                        input: {} & {
                            [k: string]: unknown;
                        };
                        id?: string | undefined;
                    }[] | undefined;
                };
                pending: boolean;
                displayableContext: Record<string, string> | null;
            }[];
            blobs: {
                id: string;
                name: string;
                type: "json" | "json-array";
                encoding: "base64";
                size: number;
                createdAt: Date;
            }[];
            activity: {
                id: string;
                type: string;
                createdAt: Date;
                service: string | null;
                jobId: string | null;
                targetFn: string | null;
                machineId: string | null;
            }[];
            inputRequests: {
                id: string;
                type: string;
                createdAt: Date;
                function?: string | null | undefined;
                service?: string | null | undefined;
                description?: string | null | undefined;
                resolvedAt?: Date | null | undefined;
                requestArgs?: string | null | undefined;
                presentedOptions?: string[] | null | undefined;
            }[];
            run: {
                id: string;
                name: string | null;
                status: "done" | "pending" | "running" | "paused" | "failed" | null;
                attachedFunctions: string[] | null;
                test: boolean;
                userId: string | null;
                feedbackScore: number | null;
                jobHandle: string | null;
                failureReason: string | null;
                feedbackComment: string | null;
            };
        };
        headers: Headers;
    } | {
        status: 100 | 204 | 401 | 201 | 404 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly getBlobData: (args: {
        params: {
            clusterId: string;
            blobId: string;
        };
        cache?: RequestCache | undefined;
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            authorization?: string | undefined;
        } | undefined;
    }) => Promise<{
        status: 200;
        body: any;
        headers: Headers;
    } | {
        status: 404;
        body: undefined;
        headers: Headers;
    } | {
        status: 100 | 204 | 401 | 201 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly upsertToolMetadata: (args: {
        params: {
            clusterId: string;
        };
        cache?: RequestCache | undefined;
        body: {
            service: string;
            function_name: string;
            user_defined_context: string | null;
            result_schema?: unknown;
        };
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            authorization?: string | undefined;
        } | undefined;
    }) => Promise<{
        status: 204;
        body: undefined;
        headers: Headers;
    } | {
        status: 401;
        body: undefined;
        headers: Headers;
    } | {
        status: 100 | 200 | 201 | 404 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly getToolMetadata: (args: {
        params: {
            service: string;
            clusterId: string;
            function_name: string;
        };
        cache?: RequestCache | undefined;
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            authorization?: string | undefined;
        } | undefined;
    }) => Promise<{
        status: 200;
        body: {
            service: string;
            function_name: string;
            user_defined_context: string | null;
            cluster_id: string;
            result_schema?: unknown;
        };
        headers: Headers;
    } | {
        status: 401;
        body: undefined;
        headers: Headers;
    } | {
        status: 404;
        body: {
            message: string;
        };
        headers: Headers;
    } | {
        status: 100 | 204 | 201 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly getAllToolMetadataForService: (args: {
        params: {
            service: string;
            clusterId: string;
        };
        cache?: RequestCache | undefined;
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            authorization?: string | undefined;
        } | undefined;
    }) => Promise<{
        status: 200;
        body: {
            service: string;
            function_name: string;
            user_defined_context: string | null;
            cluster_id: string;
            result_schema?: unknown;
        }[];
        headers: Headers;
    } | {
        status: 401;
        body: undefined;
        headers: Headers;
    } | {
        status: 100 | 204 | 201 | 404 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly deleteToolMetadata: (args: {
        params: {
            service: string;
            clusterId: string;
            function_name: string;
        };
        cache?: RequestCache | undefined;
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            authorization?: string | undefined;
        } | undefined;
    }) => Promise<{
        status: 204;
        body: undefined;
        headers: Headers;
    } | {
        status: 401;
        body: undefined;
        headers: Headers;
    } | {
        status: 100 | 200 | 201 | 404 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly generatePromptTemplate: (args: {
        params: {
            clusterId: string;
        };
        cache?: RequestCache | undefined;
        query: {
            runId: string;
            messageId?: string | undefined;
        };
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            authorization?: string | undefined;
        } | undefined;
    }) => Promise<{
        status: 200;
        body: {
            name: string;
            attachedFunctions: string[];
            prompt: string;
            structuredOutput?: unknown;
        };
        headers: Headers;
    } | {
        status: 100 | 204 | 401 | 201 | 404 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly createPromptTemplate: (args: {
        params: {
            clusterId: string;
        };
        cache?: RequestCache | undefined;
        body: {
            name: string;
            attachedFunctions: string[];
            prompt: string;
            structuredOutput?: import("zod").objectInputType<{}, import("zod").ZodTypeAny, "passthrough"> | undefined;
        };
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            authorization?: string | undefined;
        } | undefined;
    }) => Promise<{
        status: 401;
        body: undefined;
        headers: Headers;
    } | {
        status: 201;
        body: {
            id: string;
        };
        headers: Headers;
    } | {
        status: 100 | 200 | 204 | 404 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly getPromptTemplate: (args: {
        params: {
            clusterId: string;
            templateId: string;
        };
        cache?: RequestCache | undefined;
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            authorization?: string | undefined;
        } | undefined;
        query?: {
            withPreviousVersions?: "true" | "false" | undefined;
        } | undefined;
    }) => Promise<{
        status: 200;
        body: {
            id: string;
            name: string;
            createdAt: Date;
            clusterId: string;
            attachedFunctions: string[];
            prompt: string;
            updatedAt: Date;
            versions: {
                name: string;
                version: number;
                attachedFunctions: string[];
                prompt: string;
                structuredOutput?: unknown;
            }[];
            structuredOutput?: unknown;
        };
        headers: Headers;
    } | {
        status: 401;
        body: undefined;
        headers: Headers;
    } | {
        status: 404;
        body: {
            message: string;
        };
        headers: Headers;
    } | {
        status: 100 | 204 | 201 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly updatePromptTemplate: (args: {
        params: {
            clusterId: string;
            templateId: string;
        };
        cache?: RequestCache | undefined;
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            authorization?: string | undefined;
        } | undefined;
        body?: {
            name?: string | undefined;
            attachedFunctions?: string[] | undefined;
            prompt?: string | undefined;
            structuredOutput?: import("zod").objectInputType<{}, import("zod").ZodTypeAny, "passthrough"> | undefined;
        } | undefined;
    }) => Promise<{
        status: 200;
        body: {
            id: string;
            name: string;
            createdAt: Date;
            clusterId: string;
            attachedFunctions: string[];
            prompt: string;
            updatedAt: Date;
            structuredOutput?: unknown;
        };
        headers: Headers;
    } | {
        status: 401;
        body: undefined;
        headers: Headers;
    } | {
        status: 404;
        body: {
            message: string;
        };
        headers: Headers;
    } | {
        status: 100 | 204 | 201 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly deletePromptTemplate: (args: {
        params: {
            clusterId: string;
            templateId: string;
        };
        cache?: RequestCache | undefined;
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            authorization?: string | undefined;
        } | undefined;
    }) => Promise<{
        status: 204;
        body: undefined;
        headers: Headers;
    } | {
        status: 401;
        body: undefined;
        headers: Headers;
    } | {
        status: 404;
        body: {
            message: string;
        };
        headers: Headers;
    } | {
        status: 100 | 200 | 201 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly listPromptTemplates: (args: {
        params: {
            clusterId: string;
        };
        cache?: RequestCache | undefined;
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            authorization?: string | undefined;
        } | undefined;
    }) => Promise<{
        status: 200;
        body: {
            id: string;
            name: string;
            createdAt: Date;
            clusterId: string;
            attachedFunctions: string[];
            prompt: string;
            updatedAt: Date;
            structuredOutput?: unknown;
        }[];
        headers: Headers;
    } | {
        status: 401;
        body: undefined;
        headers: Headers;
    } | {
        status: 100 | 204 | 201 | 404 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly searchPromptTemplates: (args: {
        params: {
            clusterId: string;
        };
        cache?: RequestCache | undefined;
        query: {
            search: string;
        };
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            authorization?: string | undefined;
        } | undefined;
    }) => Promise<{
        status: 200;
        body: {
            id: string;
            name: string;
            createdAt: Date;
            clusterId: string;
            attachedFunctions: string[];
            prompt: string;
            updatedAt: Date;
            similarity: number;
            structuredOutput?: unknown;
        }[];
        headers: Headers;
    } | {
        status: 401;
        body: undefined;
        headers: Headers;
    } | {
        status: 100 | 204 | 201 | 404 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly updateClusterContext: (args: {
        params: {
            clusterId: string;
        };
        cache?: RequestCache | undefined;
        body: {
            additionalContext: {
                current: {
                    version: string;
                    content: string;
                };
                history: {
                    version: string;
                    content: string;
                }[];
            };
        };
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            authorization?: string | undefined;
        } | undefined;
    }) => Promise<{
        status: 204;
        body: undefined;
        headers: Headers;
    } | {
        status: 401;
        body: undefined;
        headers: Headers;
    } | {
        status: 100 | 200 | 201 | 404 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly getTemplateMetrics: (args: {
        params: {
            clusterId: string;
            templateId: string;
        };
        cache?: RequestCache | undefined;
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            authorization?: string | undefined;
        } | undefined;
    }) => Promise<{
        status: 200;
        body: {
            createdAt: Date;
            feedbackScore: number | null;
            jobFailureCount: number;
            timeToCompletion: number;
            jobCount: number;
        }[];
        headers: Headers;
    } | {
        status: 100 | 204 | 401 | 201 | 404 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly createClusterKnowledgeArtifact: (args: {
        params: {
            clusterId: string;
        };
        cache?: RequestCache | undefined;
        body: {
            artifacts: {
                id: string;
                data: string;
            }[];
        };
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            authorization?: string | undefined;
        } | undefined;
    }) => Promise<{
        status: 204;
        body: undefined;
        headers: Headers;
    } | {
        status: 401;
        body: undefined;
        headers: Headers;
    } | {
        status: 100 | 200 | 201 | 404 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly createRetry: (args: {
        params: {
            clusterId: string;
            runId: string;
        };
        cache?: RequestCache | undefined;
        body: {
            messageId: string;
        };
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            authorization?: string | undefined;
        } | undefined;
    }) => Promise<{
        status: 204;
        body: undefined;
        headers: Headers;
    } | {
        status: 401;
        body: undefined;
        headers: Headers;
    } | {
        status: 100 | 200 | 201 | 404 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly createCall: (args: {
        params: {
            clusterId: string;
        };
        cache?: RequestCache | undefined;
        body: {
            function: string;
            input: {} & {
                [k: string]: unknown;
            };
            service: string;
        };
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            authorization?: string | undefined;
        } | undefined;
        query?: {
            waitTime?: number | undefined;
        } | undefined;
    }) => Promise<{
        status: 200;
        body: {
            id: string;
            status: "pending" | "running" | "success" | "failure" | "stalled";
            resultType: "resolution" | "rejection" | null;
            result?: any;
        };
        headers: Headers;
    } | {
        status: 401;
        body: undefined;
        headers: Headers;
    } | {
        status: 100 | 204 | 201 | 404 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly createCallResult: (args: {
        params: {
            clusterId: string;
            callId: string;
        };
        cache?: RequestCache | undefined;
        body: {
            resultType: "resolution" | "rejection";
            meta: {
                functionExecutionTime?: number | undefined;
            };
            result?: any;
        };
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
            "x-machine-id"?: undefined;
            "x-machine-sdk-version"?: undefined;
            "x-machine-sdk-language"?: undefined;
            "x-forwarded-for"?: undefined;
            "x-sentinel-no-mask"?: undefined;
            "x-sentinel-unmask-keys"?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            "x-forwarded-for"?: string | undefined;
            "x-sentinel-no-mask"?: string | undefined;
            "x-sentinel-unmask-keys"?: string | undefined;
            authorization?: string | undefined;
            "x-machine-id"?: string | undefined;
            "x-machine-sdk-version"?: string | undefined;
            "x-machine-sdk-language"?: string | undefined;
        } | undefined;
    }) => Promise<{
        status: 204;
        body: undefined;
        headers: Headers;
    } | {
        status: 401;
        body: undefined;
        headers: Headers;
    } | {
        status: 100 | 200 | 201 | 404 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
    readonly listCalls: (args: {
        params: {
            clusterId: string;
        };
        cache?: RequestCache | undefined;
        query: {
            service: string;
            status?: "done" | "pending" | "running" | "paused" | "failed" | undefined;
            limit?: number | undefined;
            acknowledge?: boolean | undefined;
        };
        fetchOptions?: Omit<RequestInit, "headers" | "method" | "body"> | undefined;
        extraHeaders?: ({
            authorization?: undefined;
            "x-machine-id"?: undefined;
            "x-machine-sdk-version"?: undefined;
            "x-machine-sdk-language"?: undefined;
            "x-forwarded-for"?: undefined;
            "x-sentinel-no-mask"?: undefined;
            "x-sentinel-unmask-keys"?: undefined;
        } & Record<string, string | undefined>) | undefined;
        overrideClientOptions?: Partial<import("@ts-rest/core").OverrideableClientArgs> | undefined;
        headers?: {
            "x-forwarded-for"?: string | undefined;
            "x-sentinel-no-mask"?: string | undefined;
            "x-sentinel-unmask-keys"?: string | undefined;
            authorization?: string | undefined;
            "x-machine-id"?: string | undefined;
            "x-machine-sdk-version"?: string | undefined;
            "x-machine-sdk-language"?: string | undefined;
        } | undefined;
    }) => Promise<{
        status: 200;
        body: {
            function: string;
            id: string;
            input?: any;
        }[];
        headers: Headers;
    } | {
        status: 401;
        body: undefined;
        headers: Headers;
    } | {
        status: 100 | 204 | 201 | 404 | 400 | 500 | 101 | 102 | 202 | 203 | 205 | 206 | 207 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 402 | 403 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 428 | 429 | 431 | 451 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
        body: unknown;
        headers: Headers;
    }>;
};
