import debug from "debug";
import { z } from "zod";
import { FunctionRegistrationInput, JsonSchemaInput, RegisteredService } from "./types";
export declare const log: debug.Debugger;
/**
 * The Inferable client. This is the main entry point for using Inferable.
 *
 * Inferable client exposes two main methods:
 * * `service` - Registers a service with Inferable.
 * * `workflow` - Starts a workflow with Inferable
 *
 * @example Basic usage
 * ```ts
 * // src/service.ts
 *
 * // create a new Inferable instance
 * const d = new Inferable({
 *  apiSecret: "API_SECRET",
 * });
 *
 * const myService = d.service({
 *   name: "my-service",
 * });
 *
 * myService.register("hello", z.object({name: z.string()}), async ({name}: {name: string}) => {
 *  return `Hello ${name}`;
 * })
 *
 * await myService.start();
 *
 * // stop the service on shutdown
 * process.on("beforeExit", async () => {
 *   await myService.stop();
 * });
 *
 * ```
 */
export declare class Inferable {
    static getMachineId(): string;
    static getVersion(): string;
    private apiSecret;
    private endpoint;
    private machineId;
    private services;
    private functionRegistry;
    /**
     * Initializes a new Inferable instance.
     * @param apiSecret The API Secret for your Inferable cluster. If not provided, it will be read from the `INFERABLE_API_SECRET` environment variable.
     * @param options Additional options for the Inferable client.
     * @param options.endpoint The endpoint for the Inferable cluster. Defaults to https://api.inferable.ai.
     *
     * @example
     * ```ts
     * // Basic usage
     * const d = new Inferable({
     *  apiSecret: "API_SECRET",
     * });
     *
     * // OR
     *
     * process.env.INFERABLE_API_SECRET = "API_SECRET";
     * const d = new Inferable();
     *
     *
     * // With encryption
     * const d = new Inferable({
     *  encryptionKeys: [
     *    Buffer.from("abcdefghijklmnopqrstuvwxzy123456"), // current key
     *    Buffer.from("abcdefghijklmnopqrstuvwxzy123old"), // previous key
     *  ],
     * });
     * ```
     */
    constructor(options?: {
        apiSecret?: string;
        endpoint?: string;
        jobPollWaitTime?: number;
    });
    /**
     * An array containing the name of all services currently polling.
     */
    get activeServices(): string[];
    /**
     * An array containing the name of all services not currently polling.
     *
     * Note that this will only include services which have been started (`.start()` called).
     */
    get inactiveServices(): string[];
    /**
     * An array containing the name of all functions which have been registered.
     */
    get registeredFunctions(): string[];
    /**
     * Convenience reference to a service with name 'default'.
     * @returns A registered service instance.
     * @see {@link service}
     * @example
     * ```ts
     * const d = new Inferable({apiSecret: "API_SECRET"});
     *
     * d.default.register("hello", z.object({name: z.string()}), async ({name}: {name: string}) => {
     *   return `Hello ${name}`;
     * });
     *
     * // start the service
     * await d.default.start();
     *
     * // stop the service on shutdown
     * process.on("beforeExit", async () => {
     *   await d.default.stop();
     * });
     *
     */
    get default(): RegisteredService;
    /**
     * Registers a service with Inferable. This will register all functions on the service.
     * @param input The service definition.
     * @returns A registered service instance.
     * @example
     * ```ts
     * const d = new Inferable({apiSecret: "API_SECRET"});
     *
     * const service = d.service({
     *   name: "my-service",
     * });
     *
     * service.register("hello", z.object({name: z.string()}), async ({name}: {name: string}) => {
     *   return `Hello ${name}`;
     * });
     *
     * // start the service
     * await service.start();
     *
     * // stop the service on shutdown
     * process.on("beforeExit", async () => {
     *   await service.stop();
     * });
     * ```
     */
    service<T extends z.ZodTypeAny | JsonSchemaInput>(input: {
        name: string;
        functions?: FunctionRegistrationInput<T>[] | Promise<FunctionRegistrationInput<T>[]>;
    }): RegisteredService;
    /**
     * The cluster ID for this Inferable instance.
     */
    get clusterId(): string | null;
    private registerFunction;
}
