import { z } from "zod";
import { FunctionConfigSchema } from "./contract";
export type FunctionConfig = z.infer<typeof FunctionConfigSchema>;
export type FunctionInput<T extends z.ZodTypeAny | JsonSchemaInput> = T extends z.ZodObject<infer Input> ? {
    [K in keyof Input]: z.infer<Input[K]>;
} : any;
export declare const resultHandlerSchema: {
    input: z.ZodObject<{
        runId: z.ZodString;
        status: z.ZodEnum<["pending", "running", "paused", "done", "failed"]>;
        result: z.ZodNullable<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
        summary: z.ZodNullable<z.ZodString>;
        metadata: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        status: "done" | "pending" | "running" | "paused" | "failed";
        result: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | null;
        summary: string | null;
        metadata: Record<string, string> | null;
        runId: string;
    }, {
        status: "done" | "pending" | "running" | "paused" | "failed";
        result: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | null;
        summary: string | null;
        metadata: Record<string, string> | null;
        runId: string;
    }>;
};
import type { JSONSchema4Type } from "json-schema";
import type { JsonSchema7Type } from "zod-to-json-schema";
export type JsonSchema = JSONSchema4Type | JsonSchema7Type;
export type JsonSchemaInput = {
    type: string;
    properties: Record<string, JsonSchema>;
    required: string[];
    $schema: string;
};
export type FunctionSchema<T extends z.ZodTypeAny | JsonSchemaInput> = {
    input: T;
};
export type FunctionRegistrationInput<T extends z.ZodTypeAny | JsonSchemaInput> = {
    name: string;
    authenticate?: (authContext: string, args: FunctionInput<T>) => Promise<void>;
    func: (input: FunctionInput<T>) => any;
    schema: FunctionSchema<T>;
    config?: FunctionConfig;
    description?: string;
};
export type RegisteredService = {
    definition: {
        name: string;
    };
    /**
     * Registers a function against the service.
     * @param name Name of the function.
     * @param inputSchema Zod schema defining the function input.
     * @param func Function to be executed when the invoked is called.
     * @param config Configuration for the function call.
     * @example
     * ```ts
     * const d = new Inferable("API_SECRET");
     *
     * const service = d.service({
     *   name: "my-service",
     * });
     *
     * service.register("hello", z.object({name: z.string()}), async ({name}: {name: string}) => {
     *   return `Hello ${name}`;
     * });
     * ```
     */
    register: <T extends z.ZodTypeAny | JsonSchemaInput>(input: FunctionRegistrationInput<T>) => void;
    start: () => Promise<void>;
    stop: () => Promise<void>;
};
export interface FunctionRegistration<T extends JsonSchemaInput | z.ZodTypeAny = any> {
    name: string;
    authenticate?: (authContext: string, args: FunctionInput<T>) => Promise<void>;
    serviceName: string;
    description?: string;
    schema: {
        input: T;
        inputJson: string;
    };
    func: (args: FunctionInput<T>) => any;
    config?: FunctionConfig;
}
