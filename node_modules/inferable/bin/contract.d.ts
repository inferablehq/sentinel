import { z } from "zod";
export declare const blobSchema: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    type: z.ZodEnum<["json", "json-array"]>;
    encoding: z.ZodEnum<["base64"]>;
    size: z.ZodNumber;
    createdAt: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    id: string;
    name: string;
    type: "json" | "json-array";
    encoding: "base64";
    size: number;
    createdAt: Date;
}, {
    id: string;
    name: string;
    type: "json" | "json-array";
    encoding: "base64";
    size: number;
    createdAt: Date;
}>;
export declare const VersionedTextsSchema: z.ZodObject<{
    current: z.ZodObject<{
        version: z.ZodString;
        content: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        version: string;
        content: string;
    }, {
        version: string;
        content: string;
    }>;
    history: z.ZodArray<z.ZodObject<{
        version: z.ZodString;
        content: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        version: string;
        content: string;
    }, {
        version: string;
        content: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    current: {
        version: string;
        content: string;
    };
    history: {
        version: string;
        content: string;
    }[];
}, {
    current: {
        version: string;
        content: string;
    };
    history: {
        version: string;
        content: string;
    }[];
}>;
export declare const genericMessageDataSchema: z.ZodObject<{
    message: z.ZodString;
    details: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, "strict", z.ZodTypeAny, {
    message: string;
    details?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
}, {
    message: string;
    details?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
}>;
export declare const resultDataSchema: z.ZodObject<{
    id: z.ZodString;
    result: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
}, "strict", z.ZodTypeAny, {
    id: string;
    result: {} & {
        [k: string]: unknown;
    };
}, {
    id: string;
    result: {} & {
        [k: string]: unknown;
    };
}>;
export declare const learningSchema: z.ZodObject<{
    summary: z.ZodString;
    entities: z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        type: z.ZodEnum<["tool"]>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        type: "tool";
    }, {
        name: string;
        type: "tool";
    }>, "many">;
    relevance: z.ZodObject<{
        temporality: z.ZodEnum<["transient", "persistent"]>;
    }, "strip", z.ZodTypeAny, {
        temporality: "transient" | "persistent";
    }, {
        temporality: "transient" | "persistent";
    }>;
}, "strip", z.ZodTypeAny, {
    summary: string;
    entities: {
        name: string;
        type: "tool";
    }[];
    relevance: {
        temporality: "transient" | "persistent";
    };
}, {
    summary: string;
    entities: {
        name: string;
        type: "tool";
    }[];
    relevance: {
        temporality: "transient" | "persistent";
    };
}>;
export declare const agentDataSchema: z.ZodObject<{
    done: z.ZodOptional<z.ZodBoolean>;
    result: z.ZodOptional<z.ZodAny>;
    summary: z.ZodOptional<z.ZodString>;
    learnings: z.ZodOptional<z.ZodArray<z.ZodObject<{
        summary: z.ZodString;
        entities: z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            type: z.ZodEnum<["tool"]>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: "tool";
        }, {
            name: string;
            type: "tool";
        }>, "many">;
        relevance: z.ZodObject<{
            temporality: z.ZodEnum<["transient", "persistent"]>;
        }, "strip", z.ZodTypeAny, {
            temporality: "transient" | "persistent";
        }, {
            temporality: "transient" | "persistent";
        }>;
    }, "strip", z.ZodTypeAny, {
        summary: string;
        entities: {
            name: string;
            type: "tool";
        }[];
        relevance: {
            temporality: "transient" | "persistent";
        };
    }, {
        summary: string;
        entities: {
            name: string;
            type: "tool";
        }[];
        relevance: {
            temporality: "transient" | "persistent";
        };
    }>, "many">>;
    issue: z.ZodOptional<z.ZodString>;
    invocations: z.ZodOptional<z.ZodArray<z.ZodObject<{
        id: z.ZodOptional<z.ZodString>;
        toolName: z.ZodString;
        reasoning: z.ZodString;
        input: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
    }, "strip", z.ZodTypeAny, {
        toolName: string;
        reasoning: string;
        input: {} & {
            [k: string]: unknown;
        };
        id?: string | undefined;
    }, {
        toolName: string;
        reasoning: string;
        input: {} & {
            [k: string]: unknown;
        };
        id?: string | undefined;
    }>, "many">>;
}, "strict", z.ZodTypeAny, {
    result?: any;
    summary?: string | undefined;
    done?: boolean | undefined;
    learnings?: {
        summary: string;
        entities: {
            name: string;
            type: "tool";
        }[];
        relevance: {
            temporality: "transient" | "persistent";
        };
    }[] | undefined;
    issue?: string | undefined;
    invocations?: {
        toolName: string;
        reasoning: string;
        input: {} & {
            [k: string]: unknown;
        };
        id?: string | undefined;
    }[] | undefined;
}, {
    result?: any;
    summary?: string | undefined;
    done?: boolean | undefined;
    learnings?: {
        summary: string;
        entities: {
            name: string;
            type: "tool";
        }[];
        relevance: {
            temporality: "transient" | "persistent";
        };
    }[] | undefined;
    issue?: string | undefined;
    invocations?: {
        toolName: string;
        reasoning: string;
        input: {} & {
            [k: string]: unknown;
        };
        id?: string | undefined;
    }[] | undefined;
}>;
export declare const messageDataSchema: z.ZodUnion<[z.ZodObject<{
    id: z.ZodString;
    result: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
}, "strict", z.ZodTypeAny, {
    id: string;
    result: {} & {
        [k: string]: unknown;
    };
}, {
    id: string;
    result: {} & {
        [k: string]: unknown;
    };
}>, z.ZodObject<{
    done: z.ZodOptional<z.ZodBoolean>;
    result: z.ZodOptional<z.ZodAny>;
    summary: z.ZodOptional<z.ZodString>;
    learnings: z.ZodOptional<z.ZodArray<z.ZodObject<{
        summary: z.ZodString;
        entities: z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            type: z.ZodEnum<["tool"]>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: "tool";
        }, {
            name: string;
            type: "tool";
        }>, "many">;
        relevance: z.ZodObject<{
            temporality: z.ZodEnum<["transient", "persistent"]>;
        }, "strip", z.ZodTypeAny, {
            temporality: "transient" | "persistent";
        }, {
            temporality: "transient" | "persistent";
        }>;
    }, "strip", z.ZodTypeAny, {
        summary: string;
        entities: {
            name: string;
            type: "tool";
        }[];
        relevance: {
            temporality: "transient" | "persistent";
        };
    }, {
        summary: string;
        entities: {
            name: string;
            type: "tool";
        }[];
        relevance: {
            temporality: "transient" | "persistent";
        };
    }>, "many">>;
    issue: z.ZodOptional<z.ZodString>;
    invocations: z.ZodOptional<z.ZodArray<z.ZodObject<{
        id: z.ZodOptional<z.ZodString>;
        toolName: z.ZodString;
        reasoning: z.ZodString;
        input: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
    }, "strip", z.ZodTypeAny, {
        toolName: string;
        reasoning: string;
        input: {} & {
            [k: string]: unknown;
        };
        id?: string | undefined;
    }, {
        toolName: string;
        reasoning: string;
        input: {} & {
            [k: string]: unknown;
        };
        id?: string | undefined;
    }>, "many">>;
}, "strict", z.ZodTypeAny, {
    result?: any;
    summary?: string | undefined;
    done?: boolean | undefined;
    learnings?: {
        summary: string;
        entities: {
            name: string;
            type: "tool";
        }[];
        relevance: {
            temporality: "transient" | "persistent";
        };
    }[] | undefined;
    issue?: string | undefined;
    invocations?: {
        toolName: string;
        reasoning: string;
        input: {} & {
            [k: string]: unknown;
        };
        id?: string | undefined;
    }[] | undefined;
}, {
    result?: any;
    summary?: string | undefined;
    done?: boolean | undefined;
    learnings?: {
        summary: string;
        entities: {
            name: string;
            type: "tool";
        }[];
        relevance: {
            temporality: "transient" | "persistent";
        };
    }[] | undefined;
    issue?: string | undefined;
    invocations?: {
        toolName: string;
        reasoning: string;
        input: {} & {
            [k: string]: unknown;
        };
        id?: string | undefined;
    }[] | undefined;
}>, z.ZodObject<{
    message: z.ZodString;
    details: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, "strict", z.ZodTypeAny, {
    message: string;
    details?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
}, {
    message: string;
    details?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
}>]>;
export declare const FunctionConfigSchema: z.ZodObject<{
    cache: z.ZodOptional<z.ZodObject<{
        keyPath: z.ZodString;
        ttlSeconds: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        keyPath: string;
        ttlSeconds: number;
    }, {
        keyPath: string;
        ttlSeconds: number;
    }>>;
    retryCountOnStall: z.ZodOptional<z.ZodNumber>;
    timeoutSeconds: z.ZodOptional<z.ZodNumber>;
    executionIdPath: z.ZodOptional<z.ZodString>;
    requiresApproval: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
    private: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
}, "strip", z.ZodTypeAny, {
    cache?: {
        keyPath: string;
        ttlSeconds: number;
    } | undefined;
    retryCountOnStall?: number | undefined;
    timeoutSeconds?: number | undefined;
    executionIdPath?: string | undefined;
    requiresApproval?: boolean | undefined;
    private?: boolean | undefined;
}, {
    cache?: {
        keyPath: string;
        ttlSeconds: number;
    } | undefined;
    retryCountOnStall?: number | undefined;
    timeoutSeconds?: number | undefined;
    executionIdPath?: string | undefined;
    requiresApproval?: boolean | undefined;
    private?: boolean | undefined;
}>;
export declare const definition: {
    readonly createMachine: {
        readonly method: "POST";
        readonly path: "/machines";
        readonly headers: z.ZodObject<{
            "x-machine-id": z.ZodOptional<z.ZodString>;
            "x-machine-sdk-version": z.ZodOptional<z.ZodString>;
            "x-machine-sdk-language": z.ZodOptional<z.ZodString>;
            "x-forwarded-for": z.ZodOptional<z.ZodOptional<z.ZodString>>;
            "x-sentinel-no-mask": z.ZodOptional<z.ZodOptional<z.ZodString>>;
            "x-sentinel-unmask-keys": z.ZodOptional<z.ZodString>;
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
            "x-machine-id"?: string | undefined;
            "x-machine-sdk-version"?: string | undefined;
            "x-machine-sdk-language"?: string | undefined;
            "x-forwarded-for"?: string | undefined;
            "x-sentinel-no-mask"?: string | undefined;
            "x-sentinel-unmask-keys"?: string | undefined;
        }, {
            authorization: string;
            "x-machine-id"?: string | undefined;
            "x-machine-sdk-version"?: string | undefined;
            "x-machine-sdk-language"?: string | undefined;
            "x-forwarded-for"?: string | undefined;
            "x-sentinel-no-mask"?: string | undefined;
            "x-sentinel-unmask-keys"?: string | undefined;
        }>;
        readonly body: z.ZodObject<{
            service: z.ZodString;
            functions: z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodOptional<z.ZodString>;
                schema: z.ZodOptional<z.ZodString>;
                config: z.ZodOptional<z.ZodObject<{
                    cache: z.ZodOptional<z.ZodObject<{
                        keyPath: z.ZodString;
                        ttlSeconds: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        keyPath: string;
                        ttlSeconds: number;
                    }, {
                        keyPath: string;
                        ttlSeconds: number;
                    }>>;
                    retryCountOnStall: z.ZodOptional<z.ZodNumber>;
                    timeoutSeconds: z.ZodOptional<z.ZodNumber>;
                    executionIdPath: z.ZodOptional<z.ZodString>;
                    requiresApproval: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
                    private: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
                }, "strip", z.ZodTypeAny, {
                    cache?: {
                        keyPath: string;
                        ttlSeconds: number;
                    } | undefined;
                    retryCountOnStall?: number | undefined;
                    timeoutSeconds?: number | undefined;
                    executionIdPath?: string | undefined;
                    requiresApproval?: boolean | undefined;
                    private?: boolean | undefined;
                }, {
                    cache?: {
                        keyPath: string;
                        ttlSeconds: number;
                    } | undefined;
                    retryCountOnStall?: number | undefined;
                    timeoutSeconds?: number | undefined;
                    executionIdPath?: string | undefined;
                    requiresApproval?: boolean | undefined;
                    private?: boolean | undefined;
                }>>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                description?: string | undefined;
                schema?: string | undefined;
                config?: {
                    cache?: {
                        keyPath: string;
                        ttlSeconds: number;
                    } | undefined;
                    retryCountOnStall?: number | undefined;
                    timeoutSeconds?: number | undefined;
                    executionIdPath?: string | undefined;
                    requiresApproval?: boolean | undefined;
                    private?: boolean | undefined;
                } | undefined;
            }, {
                name: string;
                description?: string | undefined;
                schema?: string | undefined;
                config?: {
                    cache?: {
                        keyPath: string;
                        ttlSeconds: number;
                    } | undefined;
                    retryCountOnStall?: number | undefined;
                    timeoutSeconds?: number | undefined;
                    executionIdPath?: string | undefined;
                    requiresApproval?: boolean | undefined;
                    private?: boolean | undefined;
                } | undefined;
            }>, "many">>;
        }, "strip", z.ZodTypeAny, {
            service: string;
            functions?: {
                name: string;
                description?: string | undefined;
                schema?: string | undefined;
                config?: {
                    cache?: {
                        keyPath: string;
                        ttlSeconds: number;
                    } | undefined;
                    retryCountOnStall?: number | undefined;
                    timeoutSeconds?: number | undefined;
                    executionIdPath?: string | undefined;
                    requiresApproval?: boolean | undefined;
                    private?: boolean | undefined;
                } | undefined;
            }[] | undefined;
        }, {
            service: string;
            functions?: {
                name: string;
                description?: string | undefined;
                schema?: string | undefined;
                config?: {
                    cache?: {
                        keyPath: string;
                        ttlSeconds: number;
                    } | undefined;
                    retryCountOnStall?: number | undefined;
                    timeoutSeconds?: number | undefined;
                    executionIdPath?: string | undefined;
                    requiresApproval?: boolean | undefined;
                    private?: boolean | undefined;
                } | undefined;
            }[] | undefined;
        }>;
        readonly responses: {
            readonly 200: z.ZodObject<{
                clusterId: z.ZodString;
                queueUrl: z.ZodString;
                region: z.ZodString;
                enabled: z.ZodDefault<z.ZodBoolean>;
                expiration: z.ZodDate;
                credentials: z.ZodObject<{
                    accessKeyId: z.ZodString;
                    secretAccessKey: z.ZodString;
                    sessionToken: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    accessKeyId: string;
                    secretAccessKey: string;
                    sessionToken: string;
                }, {
                    accessKeyId: string;
                    secretAccessKey: string;
                    sessionToken: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                clusterId: string;
                queueUrl: string;
                region: string;
                enabled: boolean;
                expiration: Date;
                credentials: {
                    accessKeyId: string;
                    secretAccessKey: string;
                    sessionToken: string;
                };
            }, {
                clusterId: string;
                queueUrl: string;
                region: string;
                expiration: Date;
                credentials: {
                    accessKeyId: string;
                    secretAccessKey: string;
                    sessionToken: string;
                };
                enabled?: boolean | undefined;
            }>;
            readonly 204: z.ZodUndefined;
        };
    };
    readonly acknowledgeJob: {
        readonly method: "PUT";
        readonly path: "/jobs/:jobId";
        readonly headers: z.ZodObject<{
            "x-machine-id": z.ZodOptional<z.ZodString>;
            "x-machine-sdk-version": z.ZodOptional<z.ZodString>;
            "x-machine-sdk-language": z.ZodOptional<z.ZodString>;
            "x-forwarded-for": z.ZodOptional<z.ZodOptional<z.ZodString>>;
            "x-sentinel-no-mask": z.ZodOptional<z.ZodOptional<z.ZodString>>;
            "x-sentinel-unmask-keys": z.ZodOptional<z.ZodString>;
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
            "x-machine-id"?: string | undefined;
            "x-machine-sdk-version"?: string | undefined;
            "x-machine-sdk-language"?: string | undefined;
            "x-forwarded-for"?: string | undefined;
            "x-sentinel-no-mask"?: string | undefined;
            "x-sentinel-unmask-keys"?: string | undefined;
        }, {
            authorization: string;
            "x-machine-id"?: string | undefined;
            "x-machine-sdk-version"?: string | undefined;
            "x-machine-sdk-language"?: string | undefined;
            "x-forwarded-for"?: string | undefined;
            "x-sentinel-no-mask"?: string | undefined;
            "x-sentinel-unmask-keys"?: string | undefined;
        }>;
        readonly pathParams: z.ZodObject<{
            jobId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            jobId: string;
        }, {
            jobId: string;
        }>;
        readonly responses: {
            readonly 204: z.ZodUndefined;
            readonly 401: z.ZodUndefined;
        };
        readonly body: z.ZodUndefined;
    };
    readonly createResult: {
        readonly method: "POST";
        readonly path: "/jobs/:jobId/result";
        readonly headers: z.ZodObject<{
            "x-machine-id": z.ZodOptional<z.ZodString>;
            "x-machine-sdk-version": z.ZodOptional<z.ZodString>;
            "x-machine-sdk-language": z.ZodOptional<z.ZodString>;
            "x-forwarded-for": z.ZodOptional<z.ZodOptional<z.ZodString>>;
            "x-sentinel-no-mask": z.ZodOptional<z.ZodOptional<z.ZodString>>;
            "x-sentinel-unmask-keys": z.ZodOptional<z.ZodString>;
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
            "x-machine-id"?: string | undefined;
            "x-machine-sdk-version"?: string | undefined;
            "x-machine-sdk-language"?: string | undefined;
            "x-forwarded-for"?: string | undefined;
            "x-sentinel-no-mask"?: string | undefined;
            "x-sentinel-unmask-keys"?: string | undefined;
        }, {
            authorization: string;
            "x-machine-id"?: string | undefined;
            "x-machine-sdk-version"?: string | undefined;
            "x-machine-sdk-language"?: string | undefined;
            "x-forwarded-for"?: string | undefined;
            "x-sentinel-no-mask"?: string | undefined;
            "x-sentinel-unmask-keys"?: string | undefined;
        }>;
        readonly pathParams: z.ZodObject<{
            jobId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            jobId: string;
        }, {
            jobId: string;
        }>;
        readonly responses: {
            readonly 204: z.ZodUndefined;
            readonly 401: z.ZodUndefined;
        };
        readonly body: z.ZodObject<{
            result: z.ZodString;
            resultType: z.ZodEnum<["resolution", "rejection"]>;
            functionExecutionTime: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            result: string;
            resultType: "resolution" | "rejection";
            functionExecutionTime?: number | undefined;
        }, {
            result: string;
            resultType: "resolution" | "rejection";
            functionExecutionTime?: number | undefined;
        }>;
    };
    readonly live: {
        readonly method: "GET";
        readonly path: "/live";
        readonly responses: {
            readonly 200: z.ZodObject<{
                status: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                status: string;
            }, {
                status: string;
            }>;
        };
    };
    readonly createBlob: {
        readonly method: "POST";
        readonly path: "/jobs/:jobId/blob";
        readonly headers: z.ZodObject<{
            authorization: z.ZodString;
            "x-machine-id": z.ZodString;
            "x-machine-sdk-version": z.ZodString;
            "x-machine-sdk-language": z.ZodString;
            "x-forwarded-for": z.ZodOptional<z.ZodString>;
            "x-sentinel-no-mask": z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
            "x-machine-id": string;
            "x-machine-sdk-version": string;
            "x-machine-sdk-language": string;
            "x-forwarded-for"?: string | undefined;
            "x-sentinel-no-mask"?: string | undefined;
        }, {
            authorization: string;
            "x-machine-id": string;
            "x-machine-sdk-version": string;
            "x-machine-sdk-language": string;
            "x-forwarded-for"?: string | undefined;
            "x-sentinel-no-mask"?: string | undefined;
        }>;
        readonly pathParams: z.ZodObject<{
            jobId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            jobId: string;
        }, {
            jobId: string;
        }>;
        readonly responses: {
            readonly 201: z.ZodObject<{
                id: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                id: string;
            }, {
                id: string;
            }>;
            readonly 401: z.ZodUndefined;
            readonly 404: z.ZodObject<{
                message: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                message: string;
            }, {
                message: string;
            }>;
        };
        readonly body: z.ZodIntersection<z.ZodObject<Omit<{
            id: z.ZodString;
            name: z.ZodString;
            type: z.ZodEnum<["json", "json-array"]>;
            encoding: z.ZodEnum<["base64"]>;
            size: z.ZodNumber;
            createdAt: z.ZodDate;
        }, "id" | "createdAt">, "strip", z.ZodTypeAny, {
            name: string;
            type: "json" | "json-array";
            encoding: "base64";
            size: number;
        }, {
            name: string;
            type: "json" | "json-array";
            encoding: "base64";
            size: number;
        }>, z.ZodObject<{
            data: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            data: string;
        }, {
            data: string;
        }>>;
    };
    readonly getContract: {
        readonly method: "GET";
        readonly path: "/contract";
        readonly responses: {
            readonly 200: z.ZodObject<{
                contract: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                contract: string;
            }, {
                contract: string;
            }>;
        };
    };
    readonly listClusters: {
        readonly method: "GET";
        readonly path: "/clusters";
        readonly headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        readonly responses: {
            readonly 200: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                createdAt: z.ZodDate;
                description: z.ZodNullable<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                name: string;
                createdAt: Date;
                description: string | null;
            }, {
                id: string;
                name: string;
                createdAt: Date;
                description: string | null;
            }>, "many">;
            readonly 401: z.ZodUndefined;
        };
    };
    readonly createCluster: {
        readonly method: "POST";
        readonly path: "/clusters";
        readonly headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        readonly responses: {
            readonly 204: z.ZodUndefined;
        };
        readonly body: z.ZodObject<{
            description: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            description: string;
        }, {
            description: string;
        }>;
    };
    readonly updateCluster: {
        readonly method: "PUT";
        readonly path: "/clusters/:clusterId";
        readonly headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        readonly responses: {
            readonly 204: z.ZodUndefined;
            readonly 401: z.ZodUndefined;
        };
        readonly body: z.ZodObject<{
            name: z.ZodString;
            description: z.ZodString;
            additionalContext: z.ZodOptional<z.ZodObject<{
                current: z.ZodObject<{
                    version: z.ZodString;
                    content: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    version: string;
                    content: string;
                }, {
                    version: string;
                    content: string;
                }>;
                history: z.ZodArray<z.ZodObject<{
                    version: z.ZodString;
                    content: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    version: string;
                    content: string;
                }, {
                    version: string;
                    content: string;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                current: {
                    version: string;
                    content: string;
                };
                history: {
                    version: string;
                    content: string;
                }[];
            }, {
                current: {
                    version: string;
                    content: string;
                };
                history: {
                    version: string;
                    content: string;
                }[];
            }>>;
            debug: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            description: string;
            additionalContext?: {
                current: {
                    version: string;
                    content: string;
                };
                history: {
                    version: string;
                    content: string;
                }[];
            } | undefined;
            debug?: boolean | undefined;
        }, {
            name: string;
            description: string;
            additionalContext?: {
                current: {
                    version: string;
                    content: string;
                };
                history: {
                    version: string;
                    content: string;
                }[];
            } | undefined;
            debug?: boolean | undefined;
        }>;
    };
    readonly getCluster: {
        readonly method: "GET";
        readonly path: "/clusters/:clusterId";
        readonly headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        readonly responses: {
            readonly 200: z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                description: z.ZodNullable<z.ZodString>;
                createdAt: z.ZodDate;
                debug: z.ZodBoolean;
                lastPingAt: z.ZodNullable<z.ZodDate>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                name: string;
                createdAt: Date;
                description: string | null;
                debug: boolean;
                lastPingAt: Date | null;
            }, {
                id: string;
                name: string;
                createdAt: Date;
                description: string | null;
                debug: boolean;
                lastPingAt: Date | null;
            }>;
            readonly 401: z.ZodUndefined;
            readonly 404: z.ZodUndefined;
        };
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
        }, {
            clusterId: string;
        }>;
    };
    readonly getService: {
        readonly method: "GET";
        readonly path: "/clusters/:clusterId/service/:serviceName";
        readonly headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        readonly responses: {
            readonly 200: z.ZodObject<{
                jobs: z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    targetFn: z.ZodString;
                    service: z.ZodNullable<z.ZodString>;
                    status: z.ZodString;
                    resultType: z.ZodNullable<z.ZodString>;
                    createdAt: z.ZodDate;
                    functionExecutionTime: z.ZodNullable<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    status: string;
                    createdAt: Date;
                    service: string | null;
                    resultType: string | null;
                    functionExecutionTime: number | null;
                    targetFn: string;
                }, {
                    id: string;
                    status: string;
                    createdAt: Date;
                    service: string | null;
                    resultType: string | null;
                    functionExecutionTime: number | null;
                    targetFn: string;
                }>, "many">;
                definition: z.ZodNullable<z.ZodObject<{
                    name: z.ZodString;
                    functions: z.ZodOptional<z.ZodArray<z.ZodObject<{
                        name: z.ZodString;
                        rate: z.ZodOptional<z.ZodObject<{
                            per: z.ZodEnum<["minute", "hour"]>;
                            limit: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            per: "minute" | "hour";
                            limit: number;
                        }, {
                            per: "minute" | "hour";
                            limit: number;
                        }>>;
                        cacheTTL: z.ZodOptional<z.ZodNumber>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        rate?: {
                            per: "minute" | "hour";
                            limit: number;
                        } | undefined;
                        cacheTTL?: number | undefined;
                    }, {
                        name: string;
                        rate?: {
                            per: "minute" | "hour";
                            limit: number;
                        } | undefined;
                        cacheTTL?: number | undefined;
                    }>, "many">>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    functions?: {
                        name: string;
                        rate?: {
                            per: "minute" | "hour";
                            limit: number;
                        } | undefined;
                        cacheTTL?: number | undefined;
                    }[] | undefined;
                }, {
                    name: string;
                    functions?: {
                        name: string;
                        rate?: {
                            per: "minute" | "hour";
                            limit: number;
                        } | undefined;
                        cacheTTL?: number | undefined;
                    }[] | undefined;
                }>>;
            }, "strip", z.ZodTypeAny, {
                jobs: {
                    id: string;
                    status: string;
                    createdAt: Date;
                    service: string | null;
                    resultType: string | null;
                    functionExecutionTime: number | null;
                    targetFn: string;
                }[];
                definition: {
                    name: string;
                    functions?: {
                        name: string;
                        rate?: {
                            per: "minute" | "hour";
                            limit: number;
                        } | undefined;
                        cacheTTL?: number | undefined;
                    }[] | undefined;
                } | null;
            }, {
                jobs: {
                    id: string;
                    status: string;
                    createdAt: Date;
                    service: string | null;
                    resultType: string | null;
                    functionExecutionTime: number | null;
                    targetFn: string;
                }[];
                definition: {
                    name: string;
                    functions?: {
                        name: string;
                        rate?: {
                            per: "minute" | "hour";
                            limit: number;
                        } | undefined;
                        cacheTTL?: number | undefined;
                    }[] | undefined;
                } | null;
            }>;
            readonly 401: z.ZodUndefined;
            readonly 404: z.ZodUndefined;
        };
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
            serviceName: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
            serviceName: string;
        }, {
            clusterId: string;
            serviceName: string;
        }>;
        readonly query: z.ZodObject<{
            limit: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            limit: number;
        }, {
            limit?: number | undefined;
        }>;
    };
    readonly listEvents: {
        readonly method: "GET";
        readonly path: "/clusters/:clusterId/events";
        readonly headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        readonly responses: {
            readonly 200: z.ZodArray<z.ZodObject<{
                type: z.ZodString;
                machineId: z.ZodNullable<z.ZodString>;
                service: z.ZodNullable<z.ZodString>;
                createdAt: z.ZodDate;
                jobId: z.ZodNullable<z.ZodString>;
                targetFn: z.ZodNullable<z.ZodString>;
                resultType: z.ZodNullable<z.ZodString>;
                status: z.ZodNullable<z.ZodString>;
                workflowId: z.ZodNullable<z.ZodString>;
                meta: z.ZodNullable<z.ZodAny>;
                id: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                id: string;
                type: string;
                status: string | null;
                createdAt: Date;
                service: string | null;
                jobId: string | null;
                resultType: string | null;
                targetFn: string | null;
                machineId: string | null;
                workflowId: string | null;
                meta?: any;
            }, {
                id: string;
                type: string;
                status: string | null;
                createdAt: Date;
                service: string | null;
                jobId: string | null;
                resultType: string | null;
                targetFn: string | null;
                machineId: string | null;
                workflowId: string | null;
                meta?: any;
            }>, "many">;
            readonly 401: z.ZodUndefined;
            readonly 404: z.ZodUndefined;
        };
        readonly query: z.ZodObject<{
            type: z.ZodOptional<z.ZodString>;
            jobId: z.ZodOptional<z.ZodString>;
            machineId: z.ZodOptional<z.ZodString>;
            service: z.ZodOptional<z.ZodString>;
            workflowId: z.ZodOptional<z.ZodString>;
            includeMeta: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type?: string | undefined;
            service?: string | undefined;
            jobId?: string | undefined;
            machineId?: string | undefined;
            workflowId?: string | undefined;
            includeMeta?: string | undefined;
        }, {
            type?: string | undefined;
            service?: string | undefined;
            jobId?: string | undefined;
            machineId?: string | undefined;
            workflowId?: string | undefined;
            includeMeta?: string | undefined;
        }>;
    };
    readonly getEventMeta: {
        readonly method: "GET";
        readonly path: "/clusters/:clusterId/events/:eventId/meta";
        readonly headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        readonly responses: {
            readonly 200: z.ZodObject<{
                type: z.ZodString;
                machineId: z.ZodNullable<z.ZodString>;
                service: z.ZodNullable<z.ZodString>;
                createdAt: z.ZodDate;
                jobId: z.ZodNullable<z.ZodString>;
                targetFn: z.ZodNullable<z.ZodString>;
                resultType: z.ZodNullable<z.ZodString>;
                status: z.ZodNullable<z.ZodString>;
                meta: z.ZodUnknown;
                id: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                id: string;
                type: string;
                status: string | null;
                createdAt: Date;
                service: string | null;
                jobId: string | null;
                resultType: string | null;
                targetFn: string | null;
                machineId: string | null;
                meta?: unknown;
            }, {
                id: string;
                type: string;
                status: string | null;
                createdAt: Date;
                service: string | null;
                jobId: string | null;
                resultType: string | null;
                targetFn: string | null;
                machineId: string | null;
                meta?: unknown;
            }>;
            readonly 401: z.ZodUndefined;
            readonly 404: z.ZodUndefined;
        };
    };
    readonly executeJobSync: {
        readonly method: "POST";
        readonly path: "/clusters/:clusterId/execute";
        readonly headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        readonly body: z.ZodObject<{
            service: z.ZodString;
            function: z.ZodString;
            input: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
        }, "strip", z.ZodTypeAny, {
            function: string;
            input: {} & {
                [k: string]: unknown;
            };
            service: string;
        }, {
            function: string;
            input: {} & {
                [k: string]: unknown;
            };
            service: string;
        }>;
        readonly responses: {
            readonly 401: z.ZodUndefined;
            readonly 404: z.ZodUndefined;
            readonly 200: z.ZodObject<{
                resultType: z.ZodString;
                result: z.ZodAny;
                status: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                status: string;
                resultType: string;
                result?: any;
            }, {
                status: string;
                resultType: string;
                result?: any;
            }>;
            readonly 400: z.ZodObject<{
                message: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                message: string;
            }, {
                message: string;
            }>;
            readonly 500: z.ZodObject<{
                error: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                error: string;
            }, {
                error: string;
            }>;
        };
    };
    readonly createRun: {
        readonly method: "POST";
        readonly path: "/clusters/:clusterId/runs";
        readonly headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        readonly body: z.ZodObject<{
            message: z.ZodOptional<z.ZodString>;
            result: z.ZodOptional<z.ZodObject<{
                handler: z.ZodOptional<z.ZodObject<{
                    service: z.ZodString;
                    function: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    function: string;
                    service: string;
                }, {
                    function: string;
                    service: string;
                }>>;
                schema: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            }, "strip", z.ZodTypeAny, {
                schema?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                handler?: {
                    function: string;
                    service: string;
                } | undefined;
            }, {
                schema?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                handler?: {
                    function: string;
                    service: string;
                } | undefined;
            }>>;
            attachedFunctions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
            test: z.ZodOptional<z.ZodObject<{
                enabled: z.ZodDefault<z.ZodBoolean>;
                mocks: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    output: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
                }, "strip", z.ZodTypeAny, {
                    output: {} & {
                        [k: string]: unknown;
                    };
                }, {
                    output: {} & {
                        [k: string]: unknown;
                    };
                }>>>;
            }, "strip", z.ZodTypeAny, {
                enabled: boolean;
                mocks?: Record<string, {
                    output: {} & {
                        [k: string]: unknown;
                    };
                }> | undefined;
            }, {
                enabled?: boolean | undefined;
                mocks?: Record<string, {
                    output: {} & {
                        [k: string]: unknown;
                    };
                }> | undefined;
            }>>;
            template: z.ZodOptional<z.ZodObject<{
                id: z.ZodString;
                input: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                input: {} & {
                    [k: string]: unknown;
                };
            }, {
                id: string;
                input: {} & {
                    [k: string]: unknown;
                };
            }>>;
        }, "strip", z.ZodTypeAny, {
            message?: string | undefined;
            result?: {
                schema?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                handler?: {
                    function: string;
                    service: string;
                } | undefined;
            } | undefined;
            attachedFunctions?: string[] | undefined;
            metadata?: Record<string, string> | undefined;
            test?: {
                enabled: boolean;
                mocks?: Record<string, {
                    output: {} & {
                        [k: string]: unknown;
                    };
                }> | undefined;
            } | undefined;
            template?: {
                id: string;
                input: {} & {
                    [k: string]: unknown;
                };
            } | undefined;
        }, {
            message?: string | undefined;
            result?: {
                schema?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                handler?: {
                    function: string;
                    service: string;
                } | undefined;
            } | undefined;
            attachedFunctions?: string[] | undefined;
            metadata?: Record<string, string> | undefined;
            test?: {
                enabled?: boolean | undefined;
                mocks?: Record<string, {
                    output: {} & {
                        [k: string]: unknown;
                    };
                }> | undefined;
            } | undefined;
            template?: {
                id: string;
                input: {} & {
                    [k: string]: unknown;
                };
            } | undefined;
        }>;
        readonly responses: {
            readonly 201: z.ZodObject<{
                id: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                id: string;
            }, {
                id: string;
            }>;
            readonly 401: z.ZodUndefined;
            readonly 400: z.ZodObject<{
                message: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                message: string;
            }, {
                message: string;
            }>;
        };
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
        }, {
            clusterId: string;
        }>;
    };
    readonly deleteRun: {
        readonly method: "DELETE";
        readonly path: "/clusters/:clusterId/runs/:runId";
        readonly headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        readonly body: z.ZodUndefined;
        readonly responses: {
            readonly 204: z.ZodUndefined;
            readonly 401: z.ZodUndefined;
        };
        readonly pathParams: z.ZodObject<{
            runId: z.ZodString;
            clusterId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
            runId: string;
        }, {
            clusterId: string;
            runId: string;
        }>;
    };
    readonly createMessage: {
        readonly method: "POST";
        readonly path: "/clusters/:clusterId/runs/:runId/messages";
        readonly headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        readonly body: z.ZodObject<{
            id: z.ZodOptional<z.ZodString>;
            message: z.ZodString;
            type: z.ZodOptional<z.ZodEnum<["human", "supervisor"]>>;
        }, "strip", z.ZodTypeAny, {
            message: string;
            id?: string | undefined;
            type?: "human" | "supervisor" | undefined;
        }, {
            message: string;
            id?: string | undefined;
            type?: "human" | "supervisor" | undefined;
        }>;
        readonly responses: {
            readonly 200: z.ZodObject<{
                messages: z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    data: z.ZodUnion<[z.ZodObject<{
                        id: z.ZodString;
                        result: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
                    }, "strict", z.ZodTypeAny, {
                        id: string;
                        result: {} & {
                            [k: string]: unknown;
                        };
                    }, {
                        id: string;
                        result: {} & {
                            [k: string]: unknown;
                        };
                    }>, z.ZodObject<{
                        done: z.ZodOptional<z.ZodBoolean>;
                        result: z.ZodOptional<z.ZodAny>;
                        summary: z.ZodOptional<z.ZodString>;
                        learnings: z.ZodOptional<z.ZodArray<z.ZodObject<{
                            summary: z.ZodString;
                            entities: z.ZodArray<z.ZodObject<{
                                name: z.ZodString;
                                type: z.ZodEnum<["tool"]>;
                            }, "strip", z.ZodTypeAny, {
                                name: string;
                                type: "tool";
                            }, {
                                name: string;
                                type: "tool";
                            }>, "many">;
                            relevance: z.ZodObject<{
                                temporality: z.ZodEnum<["transient", "persistent"]>;
                            }, "strip", z.ZodTypeAny, {
                                temporality: "transient" | "persistent";
                            }, {
                                temporality: "transient" | "persistent";
                            }>;
                        }, "strip", z.ZodTypeAny, {
                            summary: string;
                            entities: {
                                name: string;
                                type: "tool";
                            }[];
                            relevance: {
                                temporality: "transient" | "persistent";
                            };
                        }, {
                            summary: string;
                            entities: {
                                name: string;
                                type: "tool";
                            }[];
                            relevance: {
                                temporality: "transient" | "persistent";
                            };
                        }>, "many">>;
                        issue: z.ZodOptional<z.ZodString>;
                        invocations: z.ZodOptional<z.ZodArray<z.ZodObject<{
                            id: z.ZodOptional<z.ZodString>;
                            toolName: z.ZodString;
                            reasoning: z.ZodString;
                            input: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
                        }, "strip", z.ZodTypeAny, {
                            toolName: string;
                            reasoning: string;
                            input: {} & {
                                [k: string]: unknown;
                            };
                            id?: string | undefined;
                        }, {
                            toolName: string;
                            reasoning: string;
                            input: {} & {
                                [k: string]: unknown;
                            };
                            id?: string | undefined;
                        }>, "many">>;
                    }, "strict", z.ZodTypeAny, {
                        result?: any;
                        summary?: string | undefined;
                        done?: boolean | undefined;
                        learnings?: {
                            summary: string;
                            entities: {
                                name: string;
                                type: "tool";
                            }[];
                            relevance: {
                                temporality: "transient" | "persistent";
                            };
                        }[] | undefined;
                        issue?: string | undefined;
                        invocations?: {
                            toolName: string;
                            reasoning: string;
                            input: {} & {
                                [k: string]: unknown;
                            };
                            id?: string | undefined;
                        }[] | undefined;
                    }, {
                        result?: any;
                        summary?: string | undefined;
                        done?: boolean | undefined;
                        learnings?: {
                            summary: string;
                            entities: {
                                name: string;
                                type: "tool";
                            }[];
                            relevance: {
                                temporality: "transient" | "persistent";
                            };
                        }[] | undefined;
                        issue?: string | undefined;
                        invocations?: {
                            toolName: string;
                            reasoning: string;
                            input: {} & {
                                [k: string]: unknown;
                            };
                            id?: string | undefined;
                        }[] | undefined;
                    }>, z.ZodObject<{
                        message: z.ZodString;
                        details: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
                    }, "strict", z.ZodTypeAny, {
                        message: string;
                        details?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    }, {
                        message: string;
                        details?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    }>]>;
                    type: z.ZodEnum<["human", "template", "result", "agent", "agent-invalid", "supervisor"]>;
                    createdAt: z.ZodDate;
                    pending: z.ZodDefault<z.ZodBoolean>;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    type: "result" | "template" | "human" | "supervisor" | "agent" | "agent-invalid";
                    createdAt: Date;
                    data: {
                        message: string;
                        details?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    } | {
                        id: string;
                        result: {} & {
                            [k: string]: unknown;
                        };
                    } | {
                        result?: any;
                        summary?: string | undefined;
                        done?: boolean | undefined;
                        learnings?: {
                            summary: string;
                            entities: {
                                name: string;
                                type: "tool";
                            }[];
                            relevance: {
                                temporality: "transient" | "persistent";
                            };
                        }[] | undefined;
                        issue?: string | undefined;
                        invocations?: {
                            toolName: string;
                            reasoning: string;
                            input: {} & {
                                [k: string]: unknown;
                            };
                            id?: string | undefined;
                        }[] | undefined;
                    };
                    pending: boolean;
                }, {
                    id: string;
                    type: "result" | "template" | "human" | "supervisor" | "agent" | "agent-invalid";
                    createdAt: Date;
                    data: {
                        message: string;
                        details?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    } | {
                        id: string;
                        result: {} & {
                            [k: string]: unknown;
                        };
                    } | {
                        result?: any;
                        summary?: string | undefined;
                        done?: boolean | undefined;
                        learnings?: {
                            summary: string;
                            entities: {
                                name: string;
                                type: "tool";
                            }[];
                            relevance: {
                                temporality: "transient" | "persistent";
                            };
                        }[] | undefined;
                        issue?: string | undefined;
                        invocations?: {
                            toolName: string;
                            reasoning: string;
                            input: {} & {
                                [k: string]: unknown;
                            };
                            id?: string | undefined;
                        }[] | undefined;
                    };
                    pending?: boolean | undefined;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                messages: {
                    id: string;
                    type: "result" | "template" | "human" | "supervisor" | "agent" | "agent-invalid";
                    createdAt: Date;
                    data: {
                        message: string;
                        details?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    } | {
                        id: string;
                        result: {} & {
                            [k: string]: unknown;
                        };
                    } | {
                        result?: any;
                        summary?: string | undefined;
                        done?: boolean | undefined;
                        learnings?: {
                            summary: string;
                            entities: {
                                name: string;
                                type: "tool";
                            }[];
                            relevance: {
                                temporality: "transient" | "persistent";
                            };
                        }[] | undefined;
                        issue?: string | undefined;
                        invocations?: {
                            toolName: string;
                            reasoning: string;
                            input: {} & {
                                [k: string]: unknown;
                            };
                            id?: string | undefined;
                        }[] | undefined;
                    };
                    pending: boolean;
                }[];
            }, {
                messages: {
                    id: string;
                    type: "result" | "template" | "human" | "supervisor" | "agent" | "agent-invalid";
                    createdAt: Date;
                    data: {
                        message: string;
                        details?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    } | {
                        id: string;
                        result: {} & {
                            [k: string]: unknown;
                        };
                    } | {
                        result?: any;
                        summary?: string | undefined;
                        done?: boolean | undefined;
                        learnings?: {
                            summary: string;
                            entities: {
                                name: string;
                                type: "tool";
                            }[];
                            relevance: {
                                temporality: "transient" | "persistent";
                            };
                        }[] | undefined;
                        issue?: string | undefined;
                        invocations?: {
                            toolName: string;
                            reasoning: string;
                            input: {} & {
                                [k: string]: unknown;
                            };
                            id?: string | undefined;
                        }[] | undefined;
                    };
                    pending?: boolean | undefined;
                }[];
            }>;
            readonly 401: z.ZodUndefined;
        };
        readonly pathParams: z.ZodObject<{
            runId: z.ZodString;
            clusterId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
            runId: string;
        }, {
            clusterId: string;
            runId: string;
        }>;
    };
    readonly listMessages: {
        readonly method: "GET";
        readonly path: "/clusters/:clusterId/runs/:runId/messages";
        readonly headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        readonly responses: {
            readonly 200: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                data: z.ZodUnion<[z.ZodObject<{
                    id: z.ZodString;
                    result: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
                }, "strict", z.ZodTypeAny, {
                    id: string;
                    result: {} & {
                        [k: string]: unknown;
                    };
                }, {
                    id: string;
                    result: {} & {
                        [k: string]: unknown;
                    };
                }>, z.ZodObject<{
                    done: z.ZodOptional<z.ZodBoolean>;
                    result: z.ZodOptional<z.ZodAny>;
                    summary: z.ZodOptional<z.ZodString>;
                    learnings: z.ZodOptional<z.ZodArray<z.ZodObject<{
                        summary: z.ZodString;
                        entities: z.ZodArray<z.ZodObject<{
                            name: z.ZodString;
                            type: z.ZodEnum<["tool"]>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            type: "tool";
                        }, {
                            name: string;
                            type: "tool";
                        }>, "many">;
                        relevance: z.ZodObject<{
                            temporality: z.ZodEnum<["transient", "persistent"]>;
                        }, "strip", z.ZodTypeAny, {
                            temporality: "transient" | "persistent";
                        }, {
                            temporality: "transient" | "persistent";
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        summary: string;
                        entities: {
                            name: string;
                            type: "tool";
                        }[];
                        relevance: {
                            temporality: "transient" | "persistent";
                        };
                    }, {
                        summary: string;
                        entities: {
                            name: string;
                            type: "tool";
                        }[];
                        relevance: {
                            temporality: "transient" | "persistent";
                        };
                    }>, "many">>;
                    issue: z.ZodOptional<z.ZodString>;
                    invocations: z.ZodOptional<z.ZodArray<z.ZodObject<{
                        id: z.ZodOptional<z.ZodString>;
                        toolName: z.ZodString;
                        reasoning: z.ZodString;
                        input: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
                    }, "strip", z.ZodTypeAny, {
                        toolName: string;
                        reasoning: string;
                        input: {} & {
                            [k: string]: unknown;
                        };
                        id?: string | undefined;
                    }, {
                        toolName: string;
                        reasoning: string;
                        input: {} & {
                            [k: string]: unknown;
                        };
                        id?: string | undefined;
                    }>, "many">>;
                }, "strict", z.ZodTypeAny, {
                    result?: any;
                    summary?: string | undefined;
                    done?: boolean | undefined;
                    learnings?: {
                        summary: string;
                        entities: {
                            name: string;
                            type: "tool";
                        }[];
                        relevance: {
                            temporality: "transient" | "persistent";
                        };
                    }[] | undefined;
                    issue?: string | undefined;
                    invocations?: {
                        toolName: string;
                        reasoning: string;
                        input: {} & {
                            [k: string]: unknown;
                        };
                        id?: string | undefined;
                    }[] | undefined;
                }, {
                    result?: any;
                    summary?: string | undefined;
                    done?: boolean | undefined;
                    learnings?: {
                        summary: string;
                        entities: {
                            name: string;
                            type: "tool";
                        }[];
                        relevance: {
                            temporality: "transient" | "persistent";
                        };
                    }[] | undefined;
                    issue?: string | undefined;
                    invocations?: {
                        toolName: string;
                        reasoning: string;
                        input: {} & {
                            [k: string]: unknown;
                        };
                        id?: string | undefined;
                    }[] | undefined;
                }>, z.ZodObject<{
                    message: z.ZodString;
                    details: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
                }, "strict", z.ZodTypeAny, {
                    message: string;
                    details?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                }, {
                    message: string;
                    details?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                }>]>;
                type: z.ZodEnum<["human", "template", "result", "agent", "agent-invalid", "supervisor"]>;
                createdAt: z.ZodDate;
                pending: z.ZodDefault<z.ZodBoolean>;
                displayableContext: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                type: "result" | "template" | "human" | "supervisor" | "agent" | "agent-invalid";
                createdAt: Date;
                data: {
                    message: string;
                    details?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                } | {
                    id: string;
                    result: {} & {
                        [k: string]: unknown;
                    };
                } | {
                    result?: any;
                    summary?: string | undefined;
                    done?: boolean | undefined;
                    learnings?: {
                        summary: string;
                        entities: {
                            name: string;
                            type: "tool";
                        }[];
                        relevance: {
                            temporality: "transient" | "persistent";
                        };
                    }[] | undefined;
                    issue?: string | undefined;
                    invocations?: {
                        toolName: string;
                        reasoning: string;
                        input: {} & {
                            [k: string]: unknown;
                        };
                        id?: string | undefined;
                    }[] | undefined;
                };
                pending: boolean;
                displayableContext: Record<string, string> | null;
            }, {
                id: string;
                type: "result" | "template" | "human" | "supervisor" | "agent" | "agent-invalid";
                createdAt: Date;
                data: {
                    message: string;
                    details?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                } | {
                    id: string;
                    result: {} & {
                        [k: string]: unknown;
                    };
                } | {
                    result?: any;
                    summary?: string | undefined;
                    done?: boolean | undefined;
                    learnings?: {
                        summary: string;
                        entities: {
                            name: string;
                            type: "tool";
                        }[];
                        relevance: {
                            temporality: "transient" | "persistent";
                        };
                    }[] | undefined;
                    issue?: string | undefined;
                    invocations?: {
                        toolName: string;
                        reasoning: string;
                        input: {} & {
                            [k: string]: unknown;
                        };
                        id?: string | undefined;
                    }[] | undefined;
                };
                displayableContext: Record<string, string> | null;
                pending?: boolean | undefined;
            }>, "many">;
            readonly 401: z.ZodUndefined;
        };
    };
    readonly listRuns: {
        readonly method: "GET";
        readonly path: "/clusters/:clusterId/runs";
        readonly headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        readonly query: z.ZodObject<{
            userId: z.ZodOptional<z.ZodString>;
            test: z.ZodOptional<z.ZodEffects<z.ZodString, boolean, string>>;
            limit: z.ZodDefault<z.ZodNumber>;
            metadata: z.ZodOptional<z.ZodString>;
            promptTemplateId: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            limit: number;
            metadata?: string | undefined;
            test?: boolean | undefined;
            userId?: string | undefined;
            promptTemplateId?: string | undefined;
        }, {
            limit?: number | undefined;
            metadata?: string | undefined;
            test?: string | undefined;
            userId?: string | undefined;
            promptTemplateId?: string | undefined;
        }>;
        readonly responses: {
            readonly 200: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                userId: z.ZodNullable<z.ZodString>;
                createdAt: z.ZodDate;
                status: z.ZodNullable<z.ZodEnum<["pending", "running", "paused", "done", "failed"]>>;
                parentWorkflowId: z.ZodNullable<z.ZodString>;
                test: z.ZodBoolean;
                promptTemplateId: z.ZodNullable<z.ZodString>;
                promptTemplateVersion: z.ZodNullable<z.ZodNumber>;
                feedbackScore: z.ZodNullable<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                name: string;
                status: "done" | "pending" | "running" | "paused" | "failed" | null;
                createdAt: Date;
                test: boolean;
                userId: string | null;
                promptTemplateId: string | null;
                parentWorkflowId: string | null;
                promptTemplateVersion: number | null;
                feedbackScore: number | null;
            }, {
                id: string;
                name: string;
                status: "done" | "pending" | "running" | "paused" | "failed" | null;
                createdAt: Date;
                test: boolean;
                userId: string | null;
                promptTemplateId: string | null;
                parentWorkflowId: string | null;
                promptTemplateVersion: number | null;
                feedbackScore: number | null;
            }>, "many">;
            readonly 401: z.ZodUndefined;
        };
    };
    readonly getRun: {
        readonly method: "GET";
        readonly path: "/clusters/:clusterId/runs/:runId";
        readonly headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        readonly responses: {
            readonly 200: z.ZodObject<{
                id: z.ZodString;
                jobHandle: z.ZodNullable<z.ZodString>;
                userId: z.ZodNullable<z.ZodString>;
                status: z.ZodNullable<z.ZodEnum<["pending", "running", "paused", "done", "failed"]>>;
                failureReason: z.ZodNullable<z.ZodString>;
                test: z.ZodBoolean;
                feedbackComment: z.ZodNullable<z.ZodString>;
                feedbackScore: z.ZodNullable<z.ZodNumber>;
                result: z.ZodNullable<z.ZodString>;
                summary: z.ZodNullable<z.ZodString>;
                metadata: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodString>>;
                attachedFunctions: z.ZodNullable<z.ZodArray<z.ZodString, "many">>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                status: "done" | "pending" | "running" | "paused" | "failed" | null;
                result: string | null;
                summary: string | null;
                attachedFunctions: string[] | null;
                metadata: Record<string, string> | null;
                test: boolean;
                userId: string | null;
                feedbackScore: number | null;
                jobHandle: string | null;
                failureReason: string | null;
                feedbackComment: string | null;
            }, {
                id: string;
                status: "done" | "pending" | "running" | "paused" | "failed" | null;
                result: string | null;
                summary: string | null;
                attachedFunctions: string[] | null;
                metadata: Record<string, string> | null;
                test: boolean;
                userId: string | null;
                feedbackScore: number | null;
                jobHandle: string | null;
                failureReason: string | null;
                feedbackComment: string | null;
            }>;
            readonly 401: z.ZodUndefined;
        };
    };
    readonly createFeedback: {
        readonly method: "POST";
        readonly path: "/clusters/:clusterId/runs/:runId/feedback";
        readonly headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        readonly body: z.ZodObject<{
            comment: z.ZodNullable<z.ZodString>;
            score: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            comment: string | null;
            score: number | null;
        }, {
            comment: string | null;
            score: number | null;
        }>;
        readonly responses: {
            readonly 204: z.ZodUndefined;
            readonly 401: z.ZodUndefined;
            readonly 404: z.ZodUndefined;
        };
        readonly pathParams: z.ZodObject<{
            runId: z.ZodString;
            clusterId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
            runId: string;
        }, {
            clusterId: string;
            runId: string;
        }>;
    };
    readonly resolveInputRequest: {
        readonly method: "POST";
        readonly path: "/clusters/:clusterId/runs/:runId/input-requests/:inputRequestId";
        readonly headers: z.ZodObject<{
            authorization: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            authorization?: string | undefined;
        }, {
            authorization?: string | undefined;
        }>;
        readonly body: z.ZodObject<{
            input: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            input: string;
        }, {
            input: string;
        }>;
        readonly responses: {
            readonly 204: z.ZodUndefined;
            readonly 401: z.ZodUndefined;
            readonly 404: z.ZodUndefined;
        };
        readonly pathParams: z.ZodObject<{
            runId: z.ZodString;
            inputRequestId: z.ZodString;
            clusterId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
            runId: string;
            inputRequestId: string;
        }, {
            clusterId: string;
            runId: string;
            inputRequestId: string;
        }>;
    };
    readonly getInputRequest: {
        readonly method: "GET";
        readonly path: "/clusters/:clusterId/runs/:runId/input-requests/:inputRequestId";
        readonly headers: z.ZodObject<{
            authorization: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            authorization?: string | undefined;
        }, {
            authorization?: string | undefined;
        }>;
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
            runId: z.ZodString;
            inputRequestId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
            runId: string;
            inputRequestId: string;
        }, {
            clusterId: string;
            runId: string;
            inputRequestId: string;
        }>;
        readonly responses: {
            readonly 200: z.ZodObject<{
                id: z.ZodString;
                runId: z.ZodString;
                clusterId: z.ZodString;
                resolvedAt: z.ZodNullable<z.ZodDate>;
                createdAt: z.ZodDate;
                requestArgs: z.ZodNullable<z.ZodString>;
                service: z.ZodNullable<z.ZodString>;
                function: z.ZodNullable<z.ZodString>;
                description: z.ZodNullable<z.ZodString>;
                type: z.ZodString;
                options: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, "strip", z.ZodTypeAny, {
                function: string | null;
                id: string;
                type: string;
                createdAt: Date;
                service: string | null;
                description: string | null;
                clusterId: string;
                runId: string;
                resolvedAt: Date | null;
                requestArgs: string | null;
                options?: string[] | undefined;
            }, {
                function: string | null;
                id: string;
                type: string;
                createdAt: Date;
                service: string | null;
                description: string | null;
                clusterId: string;
                runId: string;
                resolvedAt: Date | null;
                requestArgs: string | null;
                options?: string[] | undefined;
            }>;
            readonly 401: z.ZodUndefined;
            readonly 404: z.ZodUndefined;
        };
    };
    readonly oas: {
        readonly method: "GET";
        readonly path: "/public/oas.json";
        readonly responses: {
            readonly 200: z.ZodUnknown;
        };
    };
    readonly pingCluster: {
        readonly method: "POST";
        readonly path: "/ping-cluster";
        readonly headers: z.ZodObject<{
            authorization: z.ZodString;
            "x-machine-id": z.ZodString;
            "x-machine-sdk-version": z.ZodString;
            "x-machine-sdk-language": z.ZodString;
            "x-forwarded-for": z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
            "x-machine-id": string;
            "x-machine-sdk-version": string;
            "x-machine-sdk-language": string;
            "x-forwarded-for"?: string | undefined;
        }, {
            authorization: string;
            "x-machine-id": string;
            "x-machine-sdk-version": string;
            "x-machine-sdk-language": string;
            "x-forwarded-for"?: string | undefined;
        }>;
        readonly body: z.ZodObject<{
            services: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            services: string[];
        }, {
            services: string[];
        }>;
        readonly responses: {
            readonly 204: z.ZodUndefined;
            readonly 401: z.ZodUndefined;
        };
    };
    readonly pingClusterV2: {
        readonly method: "POST";
        readonly path: "/ping-cluster-v2";
        readonly headers: z.ZodObject<{
            authorization: z.ZodString;
            "x-machine-id": z.ZodString;
            "x-machine-sdk-version": z.ZodString;
            "x-machine-sdk-language": z.ZodString;
            "x-forwarded-for": z.ZodOptional<z.ZodString>;
            "x-sentinel-no-mask": z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
            "x-machine-id": string;
            "x-machine-sdk-version": string;
            "x-machine-sdk-language": string;
            "x-forwarded-for"?: string | undefined;
            "x-sentinel-no-mask"?: string | undefined;
        }, {
            authorization: string;
            "x-machine-id": string;
            "x-machine-sdk-version": string;
            "x-machine-sdk-language": string;
            "x-forwarded-for"?: string | undefined;
            "x-sentinel-no-mask"?: string | undefined;
        }>;
        readonly body: z.ZodObject<{
            services: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            services: string[];
        }, {
            services: string[];
        }>;
        readonly responses: {
            readonly 200: z.ZodObject<{
                outdated: z.ZodBoolean;
            }, "strip", z.ZodTypeAny, {
                outdated: boolean;
            }, {
                outdated: boolean;
            }>;
            readonly 401: z.ZodUndefined;
        };
    };
    readonly updateMessage: {
        readonly method: "PUT";
        readonly path: "/clusters/:clusterId/runs/:runId/messages/:messageId";
        readonly headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        readonly body: z.ZodObject<{
            message: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            message: string;
        }, {
            message: string;
        }>;
        readonly responses: {
            readonly 200: z.ZodObject<{
                data: z.ZodObject<{
                    message: z.ZodString;
                    details: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
                }, "strict", z.ZodTypeAny, {
                    message: string;
                    details?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                }, {
                    message: string;
                    details?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                }>;
                id: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                id: string;
                data: {
                    message: string;
                    details?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                };
            }, {
                id: string;
                data: {
                    message: string;
                    details?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                };
            }>;
            readonly 404: z.ZodObject<{
                message: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                message: string;
            }, {
                message: string;
            }>;
            readonly 401: z.ZodUndefined;
        };
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
            runId: z.ZodString;
            messageId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
            runId: string;
            messageId: string;
        }, {
            clusterId: string;
            runId: string;
            messageId: string;
        }>;
    };
    readonly storeServiceMetadata: {
        readonly method: "PUT";
        readonly path: "/clusters/:clusterId/services/:service/keys/:key";
        readonly headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        readonly body: z.ZodObject<{
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
        }, {
            value: string;
        }>;
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
            service: z.ZodString;
            key: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            service: string;
            clusterId: string;
            key: string;
        }, {
            service: string;
            clusterId: string;
            key: string;
        }>;
        readonly responses: {
            readonly 204: z.ZodUndefined;
            readonly 401: z.ZodUndefined;
        };
    };
    readonly getClusterExport: {
        readonly method: "GET";
        readonly path: "/clusters/:clusterId/export";
        readonly headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
        }, {
            clusterId: string;
        }>;
        readonly responses: {
            readonly 200: z.ZodObject<{
                data: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                data: string;
            }, {
                data: string;
            }>;
        };
    };
    readonly consumeClusterExport: {
        readonly method: "POST";
        readonly path: "/clusters/:clusterId/import";
        readonly headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        readonly body: z.ZodObject<{
            data: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            data: string;
        }, {
            data: string;
        }>;
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
        }, {
            clusterId: string;
        }>;
        readonly responses: {
            readonly 200: z.ZodObject<{
                message: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                message: string;
            }, {
                message: string;
            }>;
            readonly 400: z.ZodUndefined;
        };
    };
    readonly getJob: {
        readonly method: "GET";
        readonly path: "/clusters/:clusterId/jobs/:jobId";
        readonly headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
            jobId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
            jobId: string;
        }, {
            clusterId: string;
            jobId: string;
        }>;
        readonly responses: {
            readonly 200: z.ZodObject<{
                id: z.ZodString;
                status: z.ZodString;
                targetFn: z.ZodString;
                service: z.ZodString;
                executingMachineId: z.ZodNullable<z.ZodString>;
                targetArgs: z.ZodString;
                result: z.ZodNullable<z.ZodString>;
                resultType: z.ZodNullable<z.ZodString>;
                createdAt: z.ZodDate;
                blobs: z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    name: z.ZodString;
                    type: z.ZodEnum<["json", "json-array"]>;
                    encoding: z.ZodEnum<["base64"]>;
                    size: z.ZodNumber;
                    createdAt: z.ZodDate;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    name: string;
                    type: "json" | "json-array";
                    encoding: "base64";
                    size: number;
                    createdAt: Date;
                }, {
                    id: string;
                    name: string;
                    type: "json" | "json-array";
                    encoding: "base64";
                    size: number;
                    createdAt: Date;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                id: string;
                status: string;
                createdAt: Date;
                result: string | null;
                service: string;
                resultType: string | null;
                targetFn: string;
                executingMachineId: string | null;
                targetArgs: string;
                blobs: {
                    id: string;
                    name: string;
                    type: "json" | "json-array";
                    encoding: "base64";
                    size: number;
                    createdAt: Date;
                }[];
            }, {
                id: string;
                status: string;
                createdAt: Date;
                result: string | null;
                service: string;
                resultType: string | null;
                targetFn: string;
                executingMachineId: string | null;
                targetArgs: string;
                blobs: {
                    id: string;
                    name: string;
                    type: "json" | "json-array";
                    encoding: "base64";
                    size: number;
                    createdAt: Date;
                }[];
            }>;
        };
    };
    readonly listJobReferences: {
        readonly method: "GET";
        readonly path: "/clusters/:clusterId/runs/:runId/job-references";
        readonly headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
            runId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
            runId: string;
        }, {
            clusterId: string;
            runId: string;
        }>;
        readonly query: z.ZodObject<{
            token: z.ZodString;
            before: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            token: string;
            before: string;
        }, {
            token: string;
            before: string;
        }>;
        readonly responses: {
            readonly 200: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                result: z.ZodNullable<z.ZodString>;
                createdAt: z.ZodDate;
                status: z.ZodString;
                targetFn: z.ZodString;
                service: z.ZodString;
                executingMachineId: z.ZodNullable<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                status: string;
                createdAt: Date;
                result: string | null;
                service: string;
                targetFn: string;
                executingMachineId: string | null;
            }, {
                id: string;
                status: string;
                createdAt: Date;
                result: string | null;
                service: string;
                targetFn: string;
                executingMachineId: string | null;
            }>, "many">;
        };
    };
    readonly createApiKey: {
        readonly method: "POST";
        readonly path: "/clusters/:clusterId/api-keys";
        readonly headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
        }, {
            clusterId: string;
        }>;
        readonly body: z.ZodObject<{
            name: z.ZodString;
            type: z.ZodEnum<["cluster_manage", "cluster_consume", "cluster_machine"]>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: "cluster_manage" | "cluster_consume" | "cluster_machine";
        }, {
            name: string;
            type: "cluster_manage" | "cluster_consume" | "cluster_machine";
        }>;
        readonly responses: {
            readonly 200: z.ZodObject<{
                id: z.ZodString;
                key: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                id: string;
                key: string;
            }, {
                id: string;
                key: string;
            }>;
        };
    };
    readonly listApiKeys: {
        readonly method: "GET";
        readonly path: "/clusters/:clusterId/api-keys";
        readonly headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
        }, {
            clusterId: string;
        }>;
        readonly responses: {
            readonly 200: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                type: z.ZodEnum<["cluster_manage", "cluster_consume", "cluster_machine"]>;
                createdAt: z.ZodDate;
                createdBy: z.ZodString;
                revokedAt: z.ZodNullable<z.ZodDate>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                name: string;
                type: "cluster_manage" | "cluster_consume" | "cluster_machine";
                createdAt: Date;
                createdBy: string;
                revokedAt: Date | null;
            }, {
                id: string;
                name: string;
                type: "cluster_manage" | "cluster_consume" | "cluster_machine";
                createdAt: Date;
                createdBy: string;
                revokedAt: Date | null;
            }>, "many">;
        };
    };
    readonly revokeApiKey: {
        readonly method: "DELETE";
        readonly path: "/clusters/:clusterId/api-keys/:keyId";
        readonly headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
            keyId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
            keyId: string;
        }, {
            clusterId: string;
            keyId: string;
        }>;
        readonly body: z.ZodUndefined;
        readonly responses: {
            readonly 204: z.ZodUndefined;
        };
    };
    readonly getClusterContext: {
        readonly method: "GET";
        readonly path: "/clusters/:clusterId/additional-context";
        readonly headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        readonly responses: {
            readonly 200: z.ZodObject<{
                additionalContext: z.ZodNullable<z.ZodObject<{
                    current: z.ZodObject<{
                        version: z.ZodString;
                        content: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        version: string;
                        content: string;
                    }, {
                        version: string;
                        content: string;
                    }>;
                    history: z.ZodArray<z.ZodObject<{
                        version: z.ZodString;
                        content: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        version: string;
                        content: string;
                    }, {
                        version: string;
                        content: string;
                    }>, "many">;
                }, "strip", z.ZodTypeAny, {
                    current: {
                        version: string;
                        content: string;
                    };
                    history: {
                        version: string;
                        content: string;
                    }[];
                }, {
                    current: {
                        version: string;
                        content: string;
                    };
                    history: {
                        version: string;
                        content: string;
                    }[];
                }>>;
            }, "strip", z.ZodTypeAny, {
                additionalContext: {
                    current: {
                        version: string;
                        content: string;
                    };
                    history: {
                        version: string;
                        content: string;
                    }[];
                } | null;
            }, {
                additionalContext: {
                    current: {
                        version: string;
                        content: string;
                    };
                    history: {
                        version: string;
                        content: string;
                    }[];
                } | null;
            }>;
            readonly 401: z.ZodUndefined;
            readonly 404: z.ZodUndefined;
        };
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
        }, {
            clusterId: string;
        }>;
    };
    readonly listMachines: {
        readonly method: "GET";
        readonly path: "/clusters/:clusterId/machines";
        readonly headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        readonly responses: {
            readonly 200: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                lastPingAt: z.ZodDate;
                ip: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                id: string;
                lastPingAt: Date;
                ip: string;
            }, {
                id: string;
                lastPingAt: Date;
                ip: string;
            }>, "many">;
        };
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
        }, {
            clusterId: string;
        }>;
    };
    readonly listServices: {
        readonly method: "GET";
        readonly path: "/clusters/:clusterId/services";
        readonly headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        readonly responses: {
            readonly 200: z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodOptional<z.ZodString>;
                functions: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodOptional<z.ZodString>;
                    schema: z.ZodOptional<z.ZodString>;
                    config: z.ZodOptional<z.ZodObject<{
                        cache: z.ZodOptional<z.ZodObject<{
                            keyPath: z.ZodString;
                            ttlSeconds: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            keyPath: string;
                            ttlSeconds: number;
                        }, {
                            keyPath: string;
                            ttlSeconds: number;
                        }>>;
                        retryCountOnStall: z.ZodOptional<z.ZodNumber>;
                        timeoutSeconds: z.ZodOptional<z.ZodNumber>;
                        executionIdPath: z.ZodOptional<z.ZodString>;
                        requiresApproval: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
                        private: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        cache?: {
                            keyPath: string;
                            ttlSeconds: number;
                        } | undefined;
                        retryCountOnStall?: number | undefined;
                        timeoutSeconds?: number | undefined;
                        executionIdPath?: string | undefined;
                        requiresApproval?: boolean | undefined;
                        private?: boolean | undefined;
                    }, {
                        cache?: {
                            keyPath: string;
                            ttlSeconds: number;
                        } | undefined;
                        retryCountOnStall?: number | undefined;
                        timeoutSeconds?: number | undefined;
                        executionIdPath?: string | undefined;
                        requiresApproval?: boolean | undefined;
                        private?: boolean | undefined;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    description?: string | undefined;
                    schema?: string | undefined;
                    config?: {
                        cache?: {
                            keyPath: string;
                            ttlSeconds: number;
                        } | undefined;
                        retryCountOnStall?: number | undefined;
                        timeoutSeconds?: number | undefined;
                        executionIdPath?: string | undefined;
                        requiresApproval?: boolean | undefined;
                        private?: boolean | undefined;
                    } | undefined;
                }, {
                    name: string;
                    description?: string | undefined;
                    schema?: string | undefined;
                    config?: {
                        cache?: {
                            keyPath: string;
                            ttlSeconds: number;
                        } | undefined;
                        retryCountOnStall?: number | undefined;
                        timeoutSeconds?: number | undefined;
                        executionIdPath?: string | undefined;
                        requiresApproval?: boolean | undefined;
                        private?: boolean | undefined;
                    } | undefined;
                }>, "many">>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                description?: string | undefined;
                functions?: {
                    name: string;
                    description?: string | undefined;
                    schema?: string | undefined;
                    config?: {
                        cache?: {
                            keyPath: string;
                            ttlSeconds: number;
                        } | undefined;
                        retryCountOnStall?: number | undefined;
                        timeoutSeconds?: number | undefined;
                        executionIdPath?: string | undefined;
                        requiresApproval?: boolean | undefined;
                        private?: boolean | undefined;
                    } | undefined;
                }[] | undefined;
            }, {
                name: string;
                description?: string | undefined;
                functions?: {
                    name: string;
                    description?: string | undefined;
                    schema?: string | undefined;
                    config?: {
                        cache?: {
                            keyPath: string;
                            ttlSeconds: number;
                        } | undefined;
                        retryCountOnStall?: number | undefined;
                        timeoutSeconds?: number | undefined;
                        executionIdPath?: string | undefined;
                        requiresApproval?: boolean | undefined;
                        private?: boolean | undefined;
                    } | undefined;
                }[] | undefined;
            }>, "many">;
        };
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
        }, {
            clusterId: string;
        }>;
    };
    readonly getRunTimeline: {
        readonly method: "GET";
        readonly path: "/clusters/:clusterId/runs/:runId/timeline";
        readonly headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        readonly query: z.ZodObject<{
            messagesAfter: z.ZodDefault<z.ZodString>;
            activityAfter: z.ZodDefault<z.ZodString>;
            jobsAfter: z.ZodDefault<z.ZodString>;
            inputRequestsAfter: z.ZodDefault<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            messagesAfter: string;
            activityAfter: string;
            jobsAfter: string;
            inputRequestsAfter: string;
        }, {
            messagesAfter?: string | undefined;
            activityAfter?: string | undefined;
            jobsAfter?: string | undefined;
            inputRequestsAfter?: string | undefined;
        }>;
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
            runId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
            runId: string;
        }, {
            clusterId: string;
            runId: string;
        }>;
        readonly responses: {
            readonly 200: z.ZodObject<{
                messages: z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    data: z.ZodUnion<[z.ZodObject<{
                        id: z.ZodString;
                        result: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
                    }, "strict", z.ZodTypeAny, {
                        id: string;
                        result: {} & {
                            [k: string]: unknown;
                        };
                    }, {
                        id: string;
                        result: {} & {
                            [k: string]: unknown;
                        };
                    }>, z.ZodObject<{
                        done: z.ZodOptional<z.ZodBoolean>;
                        result: z.ZodOptional<z.ZodAny>;
                        summary: z.ZodOptional<z.ZodString>;
                        learnings: z.ZodOptional<z.ZodArray<z.ZodObject<{
                            summary: z.ZodString;
                            entities: z.ZodArray<z.ZodObject<{
                                name: z.ZodString;
                                type: z.ZodEnum<["tool"]>;
                            }, "strip", z.ZodTypeAny, {
                                name: string;
                                type: "tool";
                            }, {
                                name: string;
                                type: "tool";
                            }>, "many">;
                            relevance: z.ZodObject<{
                                temporality: z.ZodEnum<["transient", "persistent"]>;
                            }, "strip", z.ZodTypeAny, {
                                temporality: "transient" | "persistent";
                            }, {
                                temporality: "transient" | "persistent";
                            }>;
                        }, "strip", z.ZodTypeAny, {
                            summary: string;
                            entities: {
                                name: string;
                                type: "tool";
                            }[];
                            relevance: {
                                temporality: "transient" | "persistent";
                            };
                        }, {
                            summary: string;
                            entities: {
                                name: string;
                                type: "tool";
                            }[];
                            relevance: {
                                temporality: "transient" | "persistent";
                            };
                        }>, "many">>;
                        issue: z.ZodOptional<z.ZodString>;
                        invocations: z.ZodOptional<z.ZodArray<z.ZodObject<{
                            id: z.ZodOptional<z.ZodString>;
                            toolName: z.ZodString;
                            reasoning: z.ZodString;
                            input: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
                        }, "strip", z.ZodTypeAny, {
                            toolName: string;
                            reasoning: string;
                            input: {} & {
                                [k: string]: unknown;
                            };
                            id?: string | undefined;
                        }, {
                            toolName: string;
                            reasoning: string;
                            input: {} & {
                                [k: string]: unknown;
                            };
                            id?: string | undefined;
                        }>, "many">>;
                    }, "strict", z.ZodTypeAny, {
                        result?: any;
                        summary?: string | undefined;
                        done?: boolean | undefined;
                        learnings?: {
                            summary: string;
                            entities: {
                                name: string;
                                type: "tool";
                            }[];
                            relevance: {
                                temporality: "transient" | "persistent";
                            };
                        }[] | undefined;
                        issue?: string | undefined;
                        invocations?: {
                            toolName: string;
                            reasoning: string;
                            input: {} & {
                                [k: string]: unknown;
                            };
                            id?: string | undefined;
                        }[] | undefined;
                    }, {
                        result?: any;
                        summary?: string | undefined;
                        done?: boolean | undefined;
                        learnings?: {
                            summary: string;
                            entities: {
                                name: string;
                                type: "tool";
                            }[];
                            relevance: {
                                temporality: "transient" | "persistent";
                            };
                        }[] | undefined;
                        issue?: string | undefined;
                        invocations?: {
                            toolName: string;
                            reasoning: string;
                            input: {} & {
                                [k: string]: unknown;
                            };
                            id?: string | undefined;
                        }[] | undefined;
                    }>, z.ZodObject<{
                        message: z.ZodString;
                        details: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
                    }, "strict", z.ZodTypeAny, {
                        message: string;
                        details?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    }, {
                        message: string;
                        details?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    }>]>;
                    type: z.ZodEnum<["human", "template", "result", "agent", "agent-invalid", "supervisor"]>;
                    createdAt: z.ZodDate;
                    pending: z.ZodDefault<z.ZodBoolean>;
                    displayableContext: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodString>>;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    type: "result" | "template" | "human" | "supervisor" | "agent" | "agent-invalid";
                    createdAt: Date;
                    data: {
                        message: string;
                        details?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    } | {
                        id: string;
                        result: {} & {
                            [k: string]: unknown;
                        };
                    } | {
                        result?: any;
                        summary?: string | undefined;
                        done?: boolean | undefined;
                        learnings?: {
                            summary: string;
                            entities: {
                                name: string;
                                type: "tool";
                            }[];
                            relevance: {
                                temporality: "transient" | "persistent";
                            };
                        }[] | undefined;
                        issue?: string | undefined;
                        invocations?: {
                            toolName: string;
                            reasoning: string;
                            input: {} & {
                                [k: string]: unknown;
                            };
                            id?: string | undefined;
                        }[] | undefined;
                    };
                    pending: boolean;
                    displayableContext: Record<string, string> | null;
                }, {
                    id: string;
                    type: "result" | "template" | "human" | "supervisor" | "agent" | "agent-invalid";
                    createdAt: Date;
                    data: {
                        message: string;
                        details?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    } | {
                        id: string;
                        result: {} & {
                            [k: string]: unknown;
                        };
                    } | {
                        result?: any;
                        summary?: string | undefined;
                        done?: boolean | undefined;
                        learnings?: {
                            summary: string;
                            entities: {
                                name: string;
                                type: "tool";
                            }[];
                            relevance: {
                                temporality: "transient" | "persistent";
                            };
                        }[] | undefined;
                        issue?: string | undefined;
                        invocations?: {
                            toolName: string;
                            reasoning: string;
                            input: {} & {
                                [k: string]: unknown;
                            };
                            id?: string | undefined;
                        }[] | undefined;
                    };
                    displayableContext: Record<string, string> | null;
                    pending?: boolean | undefined;
                }>, "many">;
                activity: z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    type: z.ZodString;
                    machineId: z.ZodNullable<z.ZodString>;
                    service: z.ZodNullable<z.ZodString>;
                    createdAt: z.ZodDate;
                    jobId: z.ZodNullable<z.ZodString>;
                    targetFn: z.ZodNullable<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    type: string;
                    createdAt: Date;
                    service: string | null;
                    jobId: string | null;
                    targetFn: string | null;
                    machineId: string | null;
                }, {
                    id: string;
                    type: string;
                    createdAt: Date;
                    service: string | null;
                    jobId: string | null;
                    targetFn: string | null;
                    machineId: string | null;
                }>, "many">;
                jobs: z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    status: z.ZodString;
                    targetFn: z.ZodString;
                    service: z.ZodString;
                    resultType: z.ZodNullable<z.ZodString>;
                    createdAt: z.ZodDate;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    status: string;
                    createdAt: Date;
                    service: string;
                    resultType: string | null;
                    targetFn: string;
                }, {
                    id: string;
                    status: string;
                    createdAt: Date;
                    service: string;
                    resultType: string | null;
                    targetFn: string;
                }>, "many">;
                inputRequests: z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    type: z.ZodString;
                    requestArgs: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                    resolvedAt: z.ZodOptional<z.ZodNullable<z.ZodDate>>;
                    createdAt: z.ZodDate;
                    service: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                    function: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                    presentedOptions: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    type: string;
                    createdAt: Date;
                    function?: string | null | undefined;
                    service?: string | null | undefined;
                    description?: string | null | undefined;
                    resolvedAt?: Date | null | undefined;
                    requestArgs?: string | null | undefined;
                    presentedOptions?: string[] | null | undefined;
                }, {
                    id: string;
                    type: string;
                    createdAt: Date;
                    function?: string | null | undefined;
                    service?: string | null | undefined;
                    description?: string | null | undefined;
                    resolvedAt?: Date | null | undefined;
                    requestArgs?: string | null | undefined;
                    presentedOptions?: string[] | null | undefined;
                }>, "many">;
                run: z.ZodObject<{
                    id: z.ZodString;
                    jobHandle: z.ZodNullable<z.ZodString>;
                    userId: z.ZodNullable<z.ZodString>;
                    status: z.ZodNullable<z.ZodEnum<["pending", "running", "paused", "done", "failed"]>>;
                    failureReason: z.ZodNullable<z.ZodString>;
                    test: z.ZodBoolean;
                    feedbackComment: z.ZodNullable<z.ZodString>;
                    feedbackScore: z.ZodNullable<z.ZodNumber>;
                    attachedFunctions: z.ZodNullable<z.ZodArray<z.ZodString, "many">>;
                    name: z.ZodNullable<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    name: string | null;
                    status: "done" | "pending" | "running" | "paused" | "failed" | null;
                    attachedFunctions: string[] | null;
                    test: boolean;
                    userId: string | null;
                    feedbackScore: number | null;
                    jobHandle: string | null;
                    failureReason: string | null;
                    feedbackComment: string | null;
                }, {
                    id: string;
                    name: string | null;
                    status: "done" | "pending" | "running" | "paused" | "failed" | null;
                    attachedFunctions: string[] | null;
                    test: boolean;
                    userId: string | null;
                    feedbackScore: number | null;
                    jobHandle: string | null;
                    failureReason: string | null;
                    feedbackComment: string | null;
                }>;
                blobs: z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    name: z.ZodString;
                    type: z.ZodEnum<["json", "json-array"]>;
                    encoding: z.ZodEnum<["base64"]>;
                    size: z.ZodNumber;
                    createdAt: z.ZodDate;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    name: string;
                    type: "json" | "json-array";
                    encoding: "base64";
                    size: number;
                    createdAt: Date;
                }, {
                    id: string;
                    name: string;
                    type: "json" | "json-array";
                    encoding: "base64";
                    size: number;
                    createdAt: Date;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                jobs: {
                    id: string;
                    status: string;
                    createdAt: Date;
                    service: string;
                    resultType: string | null;
                    targetFn: string;
                }[];
                messages: {
                    id: string;
                    type: "result" | "template" | "human" | "supervisor" | "agent" | "agent-invalid";
                    createdAt: Date;
                    data: {
                        message: string;
                        details?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    } | {
                        id: string;
                        result: {} & {
                            [k: string]: unknown;
                        };
                    } | {
                        result?: any;
                        summary?: string | undefined;
                        done?: boolean | undefined;
                        learnings?: {
                            summary: string;
                            entities: {
                                name: string;
                                type: "tool";
                            }[];
                            relevance: {
                                temporality: "transient" | "persistent";
                            };
                        }[] | undefined;
                        issue?: string | undefined;
                        invocations?: {
                            toolName: string;
                            reasoning: string;
                            input: {} & {
                                [k: string]: unknown;
                            };
                            id?: string | undefined;
                        }[] | undefined;
                    };
                    pending: boolean;
                    displayableContext: Record<string, string> | null;
                }[];
                blobs: {
                    id: string;
                    name: string;
                    type: "json" | "json-array";
                    encoding: "base64";
                    size: number;
                    createdAt: Date;
                }[];
                activity: {
                    id: string;
                    type: string;
                    createdAt: Date;
                    service: string | null;
                    jobId: string | null;
                    targetFn: string | null;
                    machineId: string | null;
                }[];
                inputRequests: {
                    id: string;
                    type: string;
                    createdAt: Date;
                    function?: string | null | undefined;
                    service?: string | null | undefined;
                    description?: string | null | undefined;
                    resolvedAt?: Date | null | undefined;
                    requestArgs?: string | null | undefined;
                    presentedOptions?: string[] | null | undefined;
                }[];
                run: {
                    id: string;
                    name: string | null;
                    status: "done" | "pending" | "running" | "paused" | "failed" | null;
                    attachedFunctions: string[] | null;
                    test: boolean;
                    userId: string | null;
                    feedbackScore: number | null;
                    jobHandle: string | null;
                    failureReason: string | null;
                    feedbackComment: string | null;
                };
            }, {
                jobs: {
                    id: string;
                    status: string;
                    createdAt: Date;
                    service: string;
                    resultType: string | null;
                    targetFn: string;
                }[];
                messages: {
                    id: string;
                    type: "result" | "template" | "human" | "supervisor" | "agent" | "agent-invalid";
                    createdAt: Date;
                    data: {
                        message: string;
                        details?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    } | {
                        id: string;
                        result: {} & {
                            [k: string]: unknown;
                        };
                    } | {
                        result?: any;
                        summary?: string | undefined;
                        done?: boolean | undefined;
                        learnings?: {
                            summary: string;
                            entities: {
                                name: string;
                                type: "tool";
                            }[];
                            relevance: {
                                temporality: "transient" | "persistent";
                            };
                        }[] | undefined;
                        issue?: string | undefined;
                        invocations?: {
                            toolName: string;
                            reasoning: string;
                            input: {} & {
                                [k: string]: unknown;
                            };
                            id?: string | undefined;
                        }[] | undefined;
                    };
                    displayableContext: Record<string, string> | null;
                    pending?: boolean | undefined;
                }[];
                blobs: {
                    id: string;
                    name: string;
                    type: "json" | "json-array";
                    encoding: "base64";
                    size: number;
                    createdAt: Date;
                }[];
                activity: {
                    id: string;
                    type: string;
                    createdAt: Date;
                    service: string | null;
                    jobId: string | null;
                    targetFn: string | null;
                    machineId: string | null;
                }[];
                inputRequests: {
                    id: string;
                    type: string;
                    createdAt: Date;
                    function?: string | null | undefined;
                    service?: string | null | undefined;
                    description?: string | null | undefined;
                    resolvedAt?: Date | null | undefined;
                    requestArgs?: string | null | undefined;
                    presentedOptions?: string[] | null | undefined;
                }[];
                run: {
                    id: string;
                    name: string | null;
                    status: "done" | "pending" | "running" | "paused" | "failed" | null;
                    attachedFunctions: string[] | null;
                    test: boolean;
                    userId: string | null;
                    feedbackScore: number | null;
                    jobHandle: string | null;
                    failureReason: string | null;
                    feedbackComment: string | null;
                };
            }>;
        };
    };
    readonly getBlobData: {
        readonly method: "GET";
        readonly path: "/clusters/:clusterId/blobs/:blobId/data";
        readonly headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
            blobId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
            blobId: string;
        }, {
            clusterId: string;
            blobId: string;
        }>;
        readonly responses: {
            readonly 200: z.ZodAny;
            readonly 404: z.ZodUndefined;
        };
    };
    readonly upsertToolMetadata: {
        readonly method: "PUT";
        readonly path: "/clusters/:clusterId/tool-metadata";
        readonly headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
        }, {
            clusterId: string;
        }>;
        readonly body: z.ZodObject<{
            service: z.ZodString;
            function_name: z.ZodString;
            user_defined_context: z.ZodNullable<z.ZodString>;
            result_schema: z.ZodNullable<z.ZodUnknown>;
        }, "strip", z.ZodTypeAny, {
            service: string;
            function_name: string;
            user_defined_context: string | null;
            result_schema?: unknown;
        }, {
            service: string;
            function_name: string;
            user_defined_context: string | null;
            result_schema?: unknown;
        }>;
        readonly responses: {
            readonly 204: z.ZodUndefined;
            readonly 401: z.ZodUndefined;
        };
    };
    readonly getToolMetadata: {
        readonly method: "GET";
        readonly path: "/clusters/:clusterId/tool-metadata/:service/:function_name";
        readonly headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
            service: z.ZodString;
            function_name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            service: string;
            clusterId: string;
            function_name: string;
        }, {
            service: string;
            clusterId: string;
            function_name: string;
        }>;
        readonly responses: {
            readonly 200: z.ZodObject<{
                cluster_id: z.ZodString;
                service: z.ZodString;
                function_name: z.ZodString;
                user_defined_context: z.ZodNullable<z.ZodString>;
                result_schema: z.ZodNullable<z.ZodUnknown>;
            }, "strip", z.ZodTypeAny, {
                service: string;
                function_name: string;
                user_defined_context: string | null;
                cluster_id: string;
                result_schema?: unknown;
            }, {
                service: string;
                function_name: string;
                user_defined_context: string | null;
                cluster_id: string;
                result_schema?: unknown;
            }>;
            readonly 401: z.ZodUndefined;
            readonly 404: z.ZodObject<{
                message: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                message: string;
            }, {
                message: string;
            }>;
        };
    };
    readonly getAllToolMetadataForService: {
        readonly method: "GET";
        readonly path: "/clusters/:clusterId/tool-metadata/:service";
        readonly headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
            service: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            service: string;
            clusterId: string;
        }, {
            service: string;
            clusterId: string;
        }>;
        readonly responses: {
            readonly 200: z.ZodArray<z.ZodObject<{
                cluster_id: z.ZodString;
                service: z.ZodString;
                function_name: z.ZodString;
                user_defined_context: z.ZodNullable<z.ZodString>;
                result_schema: z.ZodNullable<z.ZodUnknown>;
            }, "strip", z.ZodTypeAny, {
                service: string;
                function_name: string;
                user_defined_context: string | null;
                cluster_id: string;
                result_schema?: unknown;
            }, {
                service: string;
                function_name: string;
                user_defined_context: string | null;
                cluster_id: string;
                result_schema?: unknown;
            }>, "many">;
            readonly 401: z.ZodUndefined;
        };
    };
    readonly deleteToolMetadata: {
        readonly method: "DELETE";
        readonly path: "/clusters/:clusterId/tool-metadata/:service/:function_name";
        readonly headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
            service: z.ZodString;
            function_name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            service: string;
            clusterId: string;
            function_name: string;
        }, {
            service: string;
            clusterId: string;
            function_name: string;
        }>;
        readonly body: z.ZodUndefined;
        readonly responses: {
            readonly 204: z.ZodUndefined;
            readonly 401: z.ZodUndefined;
        };
    };
    readonly generatePromptTemplate: {
        readonly method: "GET";
        readonly path: "/clusters/:clusterId/prompt-templates/generate";
        readonly headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        readonly query: z.ZodObject<{
            runId: z.ZodString;
            messageId: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            runId: string;
            messageId?: string | undefined;
        }, {
            runId: string;
            messageId?: string | undefined;
        }>;
        readonly responses: {
            readonly 200: z.ZodObject<{
                name: z.ZodString;
                prompt: z.ZodString;
                attachedFunctions: z.ZodArray<z.ZodString, "many">;
                structuredOutput: z.ZodNullable<z.ZodUnknown>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                attachedFunctions: string[];
                prompt: string;
                structuredOutput?: unknown;
            }, {
                name: string;
                attachedFunctions: string[];
                prompt: string;
                structuredOutput?: unknown;
            }>;
        };
    };
    readonly createPromptTemplate: {
        readonly method: "POST";
        readonly path: "/clusters/:clusterId/prompt-templates";
        readonly headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        readonly body: z.ZodObject<{
            name: z.ZodString;
            prompt: z.ZodString;
            attachedFunctions: z.ZodArray<z.ZodString, "many">;
            structuredOutput: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            attachedFunctions: string[];
            prompt: string;
            structuredOutput?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
        }, {
            name: string;
            attachedFunctions: string[];
            prompt: string;
            structuredOutput?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
        }>;
        readonly responses: {
            readonly 201: z.ZodObject<{
                id: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                id: string;
            }, {
                id: string;
            }>;
            readonly 401: z.ZodUndefined;
        };
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
        }, {
            clusterId: string;
        }>;
    };
    readonly getPromptTemplate: {
        readonly method: "GET";
        readonly path: "/clusters/:clusterId/prompt-templates/:templateId";
        readonly headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        readonly responses: {
            readonly 200: z.ZodObject<{
                id: z.ZodString;
                clusterId: z.ZodString;
                name: z.ZodString;
                prompt: z.ZodString;
                attachedFunctions: z.ZodArray<z.ZodString, "many">;
                structuredOutput: z.ZodNullable<z.ZodUnknown>;
                createdAt: z.ZodDate;
                updatedAt: z.ZodDate;
                versions: z.ZodArray<z.ZodObject<{
                    version: z.ZodNumber;
                    name: z.ZodString;
                    prompt: z.ZodString;
                    attachedFunctions: z.ZodArray<z.ZodString, "many">;
                    structuredOutput: z.ZodNullable<z.ZodUnknown>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    version: number;
                    attachedFunctions: string[];
                    prompt: string;
                    structuredOutput?: unknown;
                }, {
                    name: string;
                    version: number;
                    attachedFunctions: string[];
                    prompt: string;
                    structuredOutput?: unknown;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                id: string;
                name: string;
                createdAt: Date;
                clusterId: string;
                attachedFunctions: string[];
                prompt: string;
                updatedAt: Date;
                versions: {
                    name: string;
                    version: number;
                    attachedFunctions: string[];
                    prompt: string;
                    structuredOutput?: unknown;
                }[];
                structuredOutput?: unknown;
            }, {
                id: string;
                name: string;
                createdAt: Date;
                clusterId: string;
                attachedFunctions: string[];
                prompt: string;
                updatedAt: Date;
                versions: {
                    name: string;
                    version: number;
                    attachedFunctions: string[];
                    prompt: string;
                    structuredOutput?: unknown;
                }[];
                structuredOutput?: unknown;
            }>;
            readonly 401: z.ZodUndefined;
            readonly 404: z.ZodObject<{
                message: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                message: string;
            }, {
                message: string;
            }>;
        };
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
            templateId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
            templateId: string;
        }, {
            clusterId: string;
            templateId: string;
        }>;
        readonly query: z.ZodObject<{
            withPreviousVersions: z.ZodDefault<z.ZodEnum<["true", "false"]>>;
        }, "strip", z.ZodTypeAny, {
            withPreviousVersions: "true" | "false";
        }, {
            withPreviousVersions?: "true" | "false" | undefined;
        }>;
    };
    readonly updatePromptTemplate: {
        readonly method: "PUT";
        readonly path: "/clusters/:clusterId/prompt-templates/:templateId";
        readonly headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        readonly body: z.ZodObject<{
            name: z.ZodOptional<z.ZodString>;
            prompt: z.ZodOptional<z.ZodString>;
            attachedFunctions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            structuredOutput: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
        }, "strip", z.ZodTypeAny, {
            name?: string | undefined;
            attachedFunctions?: string[] | undefined;
            prompt?: string | undefined;
            structuredOutput?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
        }, {
            name?: string | undefined;
            attachedFunctions?: string[] | undefined;
            prompt?: string | undefined;
            structuredOutput?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
        }>;
        readonly responses: {
            readonly 200: z.ZodObject<{
                id: z.ZodString;
                clusterId: z.ZodString;
                name: z.ZodString;
                prompt: z.ZodString;
                attachedFunctions: z.ZodArray<z.ZodString, "many">;
                structuredOutput: z.ZodNullable<z.ZodUnknown>;
                createdAt: z.ZodDate;
                updatedAt: z.ZodDate;
            }, "strip", z.ZodTypeAny, {
                id: string;
                name: string;
                createdAt: Date;
                clusterId: string;
                attachedFunctions: string[];
                prompt: string;
                updatedAt: Date;
                structuredOutput?: unknown;
            }, {
                id: string;
                name: string;
                createdAt: Date;
                clusterId: string;
                attachedFunctions: string[];
                prompt: string;
                updatedAt: Date;
                structuredOutput?: unknown;
            }>;
            readonly 401: z.ZodUndefined;
            readonly 404: z.ZodObject<{
                message: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                message: string;
            }, {
                message: string;
            }>;
        };
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
            templateId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
            templateId: string;
        }, {
            clusterId: string;
            templateId: string;
        }>;
    };
    readonly deletePromptTemplate: {
        readonly method: "DELETE";
        readonly path: "/clusters/:clusterId/prompt-templates/:templateId";
        readonly headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        readonly responses: {
            readonly 204: z.ZodUndefined;
            readonly 401: z.ZodUndefined;
            readonly 404: z.ZodObject<{
                message: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                message: string;
            }, {
                message: string;
            }>;
        };
        readonly body: z.ZodUndefined;
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
            templateId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
            templateId: string;
        }, {
            clusterId: string;
            templateId: string;
        }>;
    };
    readonly listPromptTemplates: {
        readonly method: "GET";
        readonly path: "/clusters/:clusterId/prompt-templates";
        readonly headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        readonly responses: {
            readonly 200: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                clusterId: z.ZodString;
                name: z.ZodString;
                prompt: z.ZodString;
                attachedFunctions: z.ZodArray<z.ZodString, "many">;
                structuredOutput: z.ZodNullable<z.ZodUnknown>;
                createdAt: z.ZodDate;
                updatedAt: z.ZodDate;
            }, "strip", z.ZodTypeAny, {
                id: string;
                name: string;
                createdAt: Date;
                clusterId: string;
                attachedFunctions: string[];
                prompt: string;
                updatedAt: Date;
                structuredOutput?: unknown;
            }, {
                id: string;
                name: string;
                createdAt: Date;
                clusterId: string;
                attachedFunctions: string[];
                prompt: string;
                updatedAt: Date;
                structuredOutput?: unknown;
            }>, "many">;
            readonly 401: z.ZodUndefined;
        };
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
        }, {
            clusterId: string;
        }>;
    };
    readonly searchPromptTemplates: {
        readonly method: "GET";
        readonly path: "/clusters/:clusterId/prompt-templates/search";
        readonly headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        readonly query: z.ZodObject<{
            search: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            search: string;
        }, {
            search: string;
        }>;
        readonly responses: {
            readonly 200: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                clusterId: z.ZodString;
                name: z.ZodString;
                prompt: z.ZodString;
                attachedFunctions: z.ZodArray<z.ZodString, "many">;
                structuredOutput: z.ZodNullable<z.ZodUnknown>;
                createdAt: z.ZodDate;
                updatedAt: z.ZodDate;
                similarity: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                id: string;
                name: string;
                createdAt: Date;
                clusterId: string;
                attachedFunctions: string[];
                prompt: string;
                updatedAt: Date;
                similarity: number;
                structuredOutput?: unknown;
            }, {
                id: string;
                name: string;
                createdAt: Date;
                clusterId: string;
                attachedFunctions: string[];
                prompt: string;
                updatedAt: Date;
                similarity: number;
                structuredOutput?: unknown;
            }>, "many">;
            readonly 401: z.ZodUndefined;
        };
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
        }, {
            clusterId: string;
        }>;
    };
    readonly updateClusterContext: {
        readonly method: "PUT";
        readonly path: "/clusters/:clusterId/additional-context";
        readonly headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        readonly body: z.ZodObject<{
            additionalContext: z.ZodObject<{
                current: z.ZodObject<{
                    version: z.ZodString;
                    content: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    version: string;
                    content: string;
                }, {
                    version: string;
                    content: string;
                }>;
                history: z.ZodArray<z.ZodObject<{
                    version: z.ZodString;
                    content: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    version: string;
                    content: string;
                }, {
                    version: string;
                    content: string;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                current: {
                    version: string;
                    content: string;
                };
                history: {
                    version: string;
                    content: string;
                }[];
            }, {
                current: {
                    version: string;
                    content: string;
                };
                history: {
                    version: string;
                    content: string;
                }[];
            }>;
        }, "strip", z.ZodTypeAny, {
            additionalContext: {
                current: {
                    version: string;
                    content: string;
                };
                history: {
                    version: string;
                    content: string;
                }[];
            };
        }, {
            additionalContext: {
                current: {
                    version: string;
                    content: string;
                };
                history: {
                    version: string;
                    content: string;
                }[];
            };
        }>;
        readonly responses: {
            readonly 204: z.ZodUndefined;
            readonly 401: z.ZodUndefined;
        };
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
        }, {
            clusterId: string;
        }>;
    };
    readonly getTemplateMetrics: {
        readonly method: "GET";
        readonly path: "/clusters/:clusterId/prompt-templates/:templateId/metrics";
        readonly headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        readonly responses: {
            readonly 200: z.ZodArray<z.ZodObject<{
                createdAt: z.ZodDate;
                feedbackScore: z.ZodNullable<z.ZodNumber>;
                jobFailureCount: z.ZodNumber;
                timeToCompletion: z.ZodNumber;
                jobCount: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                createdAt: Date;
                feedbackScore: number | null;
                jobFailureCount: number;
                timeToCompletion: number;
                jobCount: number;
            }, {
                createdAt: Date;
                feedbackScore: number | null;
                jobFailureCount: number;
                timeToCompletion: number;
                jobCount: number;
            }>, "many">;
        };
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
            templateId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
            templateId: string;
        }, {
            clusterId: string;
            templateId: string;
        }>;
    };
    readonly createClusterKnowledgeArtifact: {
        readonly method: "POST";
        readonly path: "/clusters/:clusterId/knowledge";
        readonly headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        readonly body: z.ZodObject<{
            artifacts: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                data: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                id: string;
                data: string;
            }, {
                id: string;
                data: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            artifacts: {
                id: string;
                data: string;
            }[];
        }, {
            artifacts: {
                id: string;
                data: string;
            }[];
        }>;
        readonly responses: {
            readonly 204: z.ZodUndefined;
            readonly 401: z.ZodUndefined;
        };
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
        }, {
            clusterId: string;
        }>;
    };
    readonly createRetry: {
        readonly method: "POST";
        readonly path: "/clusters/:clusterId/runs/:runId/retry";
        readonly headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        readonly body: z.ZodObject<{
            messageId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            messageId: string;
        }, {
            messageId: string;
        }>;
        readonly responses: {
            readonly 204: z.ZodUndefined;
            readonly 401: z.ZodUndefined;
        };
    };
    readonly createCall: {
        readonly method: "POST";
        readonly path: "/clusters/:clusterId/calls";
        readonly query: z.ZodObject<{
            waitTime: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            waitTime: number;
        }, {
            waitTime?: number | undefined;
        }>;
        readonly headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        readonly body: z.ZodObject<{
            service: z.ZodString;
            function: z.ZodString;
            input: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
        }, "strip", z.ZodTypeAny, {
            function: string;
            input: {} & {
                [k: string]: unknown;
            };
            service: string;
        }, {
            function: string;
            input: {} & {
                [k: string]: unknown;
            };
            service: string;
        }>;
        readonly responses: {
            readonly 401: z.ZodUndefined;
            readonly 200: z.ZodObject<{
                id: z.ZodString;
                result: z.ZodNullable<z.ZodAny>;
                resultType: z.ZodNullable<z.ZodEnum<["resolution", "rejection"]>>;
                status: z.ZodEnum<["pending", "running", "success", "failure", "stalled"]>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                status: "pending" | "running" | "success" | "failure" | "stalled";
                resultType: "resolution" | "rejection" | null;
                result?: any;
            }, {
                id: string;
                status: "pending" | "running" | "success" | "failure" | "stalled";
                resultType: "resolution" | "rejection" | null;
                result?: any;
            }>;
        };
    };
    readonly createCallResult: {
        readonly method: "POST";
        readonly path: "/clusters/:clusterId/calls/:callId/result";
        readonly headers: z.ZodObject<{
            "x-machine-id": z.ZodOptional<z.ZodString>;
            "x-machine-sdk-version": z.ZodOptional<z.ZodString>;
            "x-machine-sdk-language": z.ZodOptional<z.ZodString>;
            "x-forwarded-for": z.ZodOptional<z.ZodOptional<z.ZodString>>;
            "x-sentinel-no-mask": z.ZodOptional<z.ZodOptional<z.ZodString>>;
            "x-sentinel-unmask-keys": z.ZodOptional<z.ZodString>;
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
            "x-machine-id"?: string | undefined;
            "x-machine-sdk-version"?: string | undefined;
            "x-machine-sdk-language"?: string | undefined;
            "x-forwarded-for"?: string | undefined;
            "x-sentinel-no-mask"?: string | undefined;
            "x-sentinel-unmask-keys"?: string | undefined;
        }, {
            authorization: string;
            "x-machine-id"?: string | undefined;
            "x-machine-sdk-version"?: string | undefined;
            "x-machine-sdk-language"?: string | undefined;
            "x-forwarded-for"?: string | undefined;
            "x-sentinel-no-mask"?: string | undefined;
            "x-sentinel-unmask-keys"?: string | undefined;
        }>;
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
            callId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
            callId: string;
        }, {
            clusterId: string;
            callId: string;
        }>;
        readonly responses: {
            readonly 204: z.ZodUndefined;
            readonly 401: z.ZodUndefined;
        };
        readonly body: z.ZodObject<{
            result: z.ZodAny;
            resultType: z.ZodEnum<["resolution", "rejection"]>;
            meta: z.ZodObject<{
                functionExecutionTime: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                functionExecutionTime?: number | undefined;
            }, {
                functionExecutionTime?: number | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            resultType: "resolution" | "rejection";
            meta: {
                functionExecutionTime?: number | undefined;
            };
            result?: any;
        }, {
            resultType: "resolution" | "rejection";
            meta: {
                functionExecutionTime?: number | undefined;
            };
            result?: any;
        }>;
    };
    readonly listCalls: {
        readonly method: "GET";
        readonly path: "/clusters/:clusterId/calls";
        readonly query: z.ZodObject<{
            service: z.ZodString;
            status: z.ZodDefault<z.ZodEnum<["pending", "running", "paused", "done", "failed"]>>;
            limit: z.ZodDefault<z.ZodNumber>;
            acknowledge: z.ZodDefault<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            status: "done" | "pending" | "running" | "paused" | "failed";
            service: string;
            limit: number;
            acknowledge: boolean;
        }, {
            service: string;
            status?: "done" | "pending" | "running" | "paused" | "failed" | undefined;
            limit?: number | undefined;
            acknowledge?: boolean | undefined;
        }>;
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
        }, {
            clusterId: string;
        }>;
        readonly headers: z.ZodObject<{
            "x-machine-id": z.ZodOptional<z.ZodString>;
            "x-machine-sdk-version": z.ZodOptional<z.ZodString>;
            "x-machine-sdk-language": z.ZodOptional<z.ZodString>;
            "x-forwarded-for": z.ZodOptional<z.ZodOptional<z.ZodString>>;
            "x-sentinel-no-mask": z.ZodOptional<z.ZodOptional<z.ZodString>>;
            "x-sentinel-unmask-keys": z.ZodOptional<z.ZodString>;
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
            "x-machine-id"?: string | undefined;
            "x-machine-sdk-version"?: string | undefined;
            "x-machine-sdk-language"?: string | undefined;
            "x-forwarded-for"?: string | undefined;
            "x-sentinel-no-mask"?: string | undefined;
            "x-sentinel-unmask-keys"?: string | undefined;
        }, {
            authorization: string;
            "x-machine-id"?: string | undefined;
            "x-machine-sdk-version"?: string | undefined;
            "x-machine-sdk-language"?: string | undefined;
            "x-forwarded-for"?: string | undefined;
            "x-sentinel-no-mask"?: string | undefined;
            "x-sentinel-unmask-keys"?: string | undefined;
        }>;
        readonly responses: {
            readonly 401: z.ZodUndefined;
            readonly 200: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                function: z.ZodString;
                input: z.ZodAny;
            }, "strip", z.ZodTypeAny, {
                function: string;
                id: string;
                input?: any;
            }, {
                function: string;
                id: string;
                input?: any;
            }>, "many">;
        };
    };
};
export declare const contract: {
    readonly createMachine: {
        readonly method: "POST";
        readonly body: z.ZodObject<{
            service: z.ZodString;
            functions: z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodOptional<z.ZodString>;
                schema: z.ZodOptional<z.ZodString>;
                config: z.ZodOptional<z.ZodObject<{
                    cache: z.ZodOptional<z.ZodObject<{
                        keyPath: z.ZodString;
                        ttlSeconds: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        keyPath: string;
                        ttlSeconds: number;
                    }, {
                        keyPath: string;
                        ttlSeconds: number;
                    }>>;
                    retryCountOnStall: z.ZodOptional<z.ZodNumber>;
                    timeoutSeconds: z.ZodOptional<z.ZodNumber>;
                    executionIdPath: z.ZodOptional<z.ZodString>;
                    requiresApproval: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
                    private: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
                }, "strip", z.ZodTypeAny, {
                    cache?: {
                        keyPath: string;
                        ttlSeconds: number;
                    } | undefined;
                    retryCountOnStall?: number | undefined;
                    timeoutSeconds?: number | undefined;
                    executionIdPath?: string | undefined;
                    requiresApproval?: boolean | undefined;
                    private?: boolean | undefined;
                }, {
                    cache?: {
                        keyPath: string;
                        ttlSeconds: number;
                    } | undefined;
                    retryCountOnStall?: number | undefined;
                    timeoutSeconds?: number | undefined;
                    executionIdPath?: string | undefined;
                    requiresApproval?: boolean | undefined;
                    private?: boolean | undefined;
                }>>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                description?: string | undefined;
                schema?: string | undefined;
                config?: {
                    cache?: {
                        keyPath: string;
                        ttlSeconds: number;
                    } | undefined;
                    retryCountOnStall?: number | undefined;
                    timeoutSeconds?: number | undefined;
                    executionIdPath?: string | undefined;
                    requiresApproval?: boolean | undefined;
                    private?: boolean | undefined;
                } | undefined;
            }, {
                name: string;
                description?: string | undefined;
                schema?: string | undefined;
                config?: {
                    cache?: {
                        keyPath: string;
                        ttlSeconds: number;
                    } | undefined;
                    retryCountOnStall?: number | undefined;
                    timeoutSeconds?: number | undefined;
                    executionIdPath?: string | undefined;
                    requiresApproval?: boolean | undefined;
                    private?: boolean | undefined;
                } | undefined;
            }>, "many">>;
        }, "strip", z.ZodTypeAny, {
            service: string;
            functions?: {
                name: string;
                description?: string | undefined;
                schema?: string | undefined;
                config?: {
                    cache?: {
                        keyPath: string;
                        ttlSeconds: number;
                    } | undefined;
                    retryCountOnStall?: number | undefined;
                    timeoutSeconds?: number | undefined;
                    executionIdPath?: string | undefined;
                    requiresApproval?: boolean | undefined;
                    private?: boolean | undefined;
                } | undefined;
            }[] | undefined;
        }, {
            service: string;
            functions?: {
                name: string;
                description?: string | undefined;
                schema?: string | undefined;
                config?: {
                    cache?: {
                        keyPath: string;
                        ttlSeconds: number;
                    } | undefined;
                    retryCountOnStall?: number | undefined;
                    timeoutSeconds?: number | undefined;
                    executionIdPath?: string | undefined;
                    requiresApproval?: boolean | undefined;
                    private?: boolean | undefined;
                } | undefined;
            }[] | undefined;
        }>;
        path: "/machines";
        headers: z.ZodObject<{
            "x-machine-id": z.ZodOptional<z.ZodString>;
            "x-machine-sdk-version": z.ZodOptional<z.ZodString>;
            "x-machine-sdk-language": z.ZodOptional<z.ZodString>;
            "x-forwarded-for": z.ZodOptional<z.ZodOptional<z.ZodString>>;
            "x-sentinel-no-mask": z.ZodOptional<z.ZodOptional<z.ZodString>>;
            "x-sentinel-unmask-keys": z.ZodOptional<z.ZodString>;
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
            "x-machine-id"?: string | undefined;
            "x-machine-sdk-version"?: string | undefined;
            "x-machine-sdk-language"?: string | undefined;
            "x-forwarded-for"?: string | undefined;
            "x-sentinel-no-mask"?: string | undefined;
            "x-sentinel-unmask-keys"?: string | undefined;
        }, {
            authorization: string;
            "x-machine-id"?: string | undefined;
            "x-machine-sdk-version"?: string | undefined;
            "x-machine-sdk-language"?: string | undefined;
            "x-forwarded-for"?: string | undefined;
            "x-sentinel-no-mask"?: string | undefined;
            "x-sentinel-unmask-keys"?: string | undefined;
        }>;
        responses: {
            readonly 200: z.ZodObject<{
                clusterId: z.ZodString;
                queueUrl: z.ZodString;
                region: z.ZodString;
                enabled: z.ZodDefault<z.ZodBoolean>;
                expiration: z.ZodDate;
                credentials: z.ZodObject<{
                    accessKeyId: z.ZodString;
                    secretAccessKey: z.ZodString;
                    sessionToken: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    accessKeyId: string;
                    secretAccessKey: string;
                    sessionToken: string;
                }, {
                    accessKeyId: string;
                    secretAccessKey: string;
                    sessionToken: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                clusterId: string;
                queueUrl: string;
                region: string;
                enabled: boolean;
                expiration: Date;
                credentials: {
                    accessKeyId: string;
                    secretAccessKey: string;
                    sessionToken: string;
                };
            }, {
                clusterId: string;
                queueUrl: string;
                region: string;
                expiration: Date;
                credentials: {
                    accessKeyId: string;
                    secretAccessKey: string;
                    sessionToken: string;
                };
                enabled?: boolean | undefined;
            }>;
            readonly 204: z.ZodUndefined;
        };
    };
    readonly acknowledgeJob: {
        readonly pathParams: z.ZodObject<{
            jobId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            jobId: string;
        }, {
            jobId: string;
        }>;
        readonly method: "PUT";
        readonly body: z.ZodUndefined;
        path: "/jobs/:jobId";
        headers: z.ZodObject<{
            "x-machine-id": z.ZodOptional<z.ZodString>;
            "x-machine-sdk-version": z.ZodOptional<z.ZodString>;
            "x-machine-sdk-language": z.ZodOptional<z.ZodString>;
            "x-forwarded-for": z.ZodOptional<z.ZodOptional<z.ZodString>>;
            "x-sentinel-no-mask": z.ZodOptional<z.ZodOptional<z.ZodString>>;
            "x-sentinel-unmask-keys": z.ZodOptional<z.ZodString>;
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
            "x-machine-id"?: string | undefined;
            "x-machine-sdk-version"?: string | undefined;
            "x-machine-sdk-language"?: string | undefined;
            "x-forwarded-for"?: string | undefined;
            "x-sentinel-no-mask"?: string | undefined;
            "x-sentinel-unmask-keys"?: string | undefined;
        }, {
            authorization: string;
            "x-machine-id"?: string | undefined;
            "x-machine-sdk-version"?: string | undefined;
            "x-machine-sdk-language"?: string | undefined;
            "x-forwarded-for"?: string | undefined;
            "x-sentinel-no-mask"?: string | undefined;
            "x-sentinel-unmask-keys"?: string | undefined;
        }>;
        responses: {
            readonly 204: z.ZodUndefined;
            readonly 401: z.ZodUndefined;
        };
    };
    readonly createResult: {
        readonly pathParams: z.ZodObject<{
            jobId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            jobId: string;
        }, {
            jobId: string;
        }>;
        readonly method: "POST";
        readonly body: z.ZodObject<{
            result: z.ZodString;
            resultType: z.ZodEnum<["resolution", "rejection"]>;
            functionExecutionTime: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            result: string;
            resultType: "resolution" | "rejection";
            functionExecutionTime?: number | undefined;
        }, {
            result: string;
            resultType: "resolution" | "rejection";
            functionExecutionTime?: number | undefined;
        }>;
        path: "/jobs/:jobId/result";
        headers: z.ZodObject<{
            "x-machine-id": z.ZodOptional<z.ZodString>;
            "x-machine-sdk-version": z.ZodOptional<z.ZodString>;
            "x-machine-sdk-language": z.ZodOptional<z.ZodString>;
            "x-forwarded-for": z.ZodOptional<z.ZodOptional<z.ZodString>>;
            "x-sentinel-no-mask": z.ZodOptional<z.ZodOptional<z.ZodString>>;
            "x-sentinel-unmask-keys": z.ZodOptional<z.ZodString>;
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
            "x-machine-id"?: string | undefined;
            "x-machine-sdk-version"?: string | undefined;
            "x-machine-sdk-language"?: string | undefined;
            "x-forwarded-for"?: string | undefined;
            "x-sentinel-no-mask"?: string | undefined;
            "x-sentinel-unmask-keys"?: string | undefined;
        }, {
            authorization: string;
            "x-machine-id"?: string | undefined;
            "x-machine-sdk-version"?: string | undefined;
            "x-machine-sdk-language"?: string | undefined;
            "x-forwarded-for"?: string | undefined;
            "x-sentinel-no-mask"?: string | undefined;
            "x-sentinel-unmask-keys"?: string | undefined;
        }>;
        responses: {
            readonly 204: z.ZodUndefined;
            readonly 401: z.ZodUndefined;
        };
    };
    readonly live: {
        readonly method: "GET";
        path: "/live";
        responses: {
            readonly 200: z.ZodObject<{
                status: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                status: string;
            }, {
                status: string;
            }>;
        };
    };
    readonly createBlob: {
        readonly pathParams: z.ZodObject<{
            jobId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            jobId: string;
        }, {
            jobId: string;
        }>;
        readonly method: "POST";
        readonly body: z.ZodIntersection<z.ZodObject<Omit<{
            id: z.ZodString;
            name: z.ZodString;
            type: z.ZodEnum<["json", "json-array"]>;
            encoding: z.ZodEnum<["base64"]>;
            size: z.ZodNumber;
            createdAt: z.ZodDate;
        }, "id" | "createdAt">, "strip", z.ZodTypeAny, {
            name: string;
            type: "json" | "json-array";
            encoding: "base64";
            size: number;
        }, {
            name: string;
            type: "json" | "json-array";
            encoding: "base64";
            size: number;
        }>, z.ZodObject<{
            data: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            data: string;
        }, {
            data: string;
        }>>;
        path: "/jobs/:jobId/blob";
        headers: z.ZodObject<{
            authorization: z.ZodString;
            "x-machine-id": z.ZodString;
            "x-machine-sdk-version": z.ZodString;
            "x-machine-sdk-language": z.ZodString;
            "x-forwarded-for": z.ZodOptional<z.ZodString>;
            "x-sentinel-no-mask": z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
            "x-machine-id": string;
            "x-machine-sdk-version": string;
            "x-machine-sdk-language": string;
            "x-forwarded-for"?: string | undefined;
            "x-sentinel-no-mask"?: string | undefined;
        }, {
            authorization: string;
            "x-machine-id": string;
            "x-machine-sdk-version": string;
            "x-machine-sdk-language": string;
            "x-forwarded-for"?: string | undefined;
            "x-sentinel-no-mask"?: string | undefined;
        }>;
        responses: {
            readonly 201: z.ZodObject<{
                id: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                id: string;
            }, {
                id: string;
            }>;
            readonly 401: z.ZodUndefined;
            readonly 404: z.ZodObject<{
                message: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                message: string;
            }, {
                message: string;
            }>;
        };
    };
    readonly getContract: {
        readonly method: "GET";
        path: "/contract";
        responses: {
            readonly 200: z.ZodObject<{
                contract: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                contract: string;
            }, {
                contract: string;
            }>;
        };
    };
    readonly listClusters: {
        readonly method: "GET";
        path: "/clusters";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            readonly 200: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                createdAt: z.ZodDate;
                description: z.ZodNullable<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                name: string;
                createdAt: Date;
                description: string | null;
            }, {
                id: string;
                name: string;
                createdAt: Date;
                description: string | null;
            }>, "many">;
            readonly 401: z.ZodUndefined;
        };
    };
    readonly createCluster: {
        readonly method: "POST";
        readonly body: z.ZodObject<{
            description: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            description: string;
        }, {
            description: string;
        }>;
        path: "/clusters";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            readonly 204: z.ZodUndefined;
        };
    };
    readonly updateCluster: {
        readonly method: "PUT";
        readonly body: z.ZodObject<{
            name: z.ZodString;
            description: z.ZodString;
            additionalContext: z.ZodOptional<z.ZodObject<{
                current: z.ZodObject<{
                    version: z.ZodString;
                    content: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    version: string;
                    content: string;
                }, {
                    version: string;
                    content: string;
                }>;
                history: z.ZodArray<z.ZodObject<{
                    version: z.ZodString;
                    content: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    version: string;
                    content: string;
                }, {
                    version: string;
                    content: string;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                current: {
                    version: string;
                    content: string;
                };
                history: {
                    version: string;
                    content: string;
                }[];
            }, {
                current: {
                    version: string;
                    content: string;
                };
                history: {
                    version: string;
                    content: string;
                }[];
            }>>;
            debug: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            description: string;
            additionalContext?: {
                current: {
                    version: string;
                    content: string;
                };
                history: {
                    version: string;
                    content: string;
                }[];
            } | undefined;
            debug?: boolean | undefined;
        }, {
            name: string;
            description: string;
            additionalContext?: {
                current: {
                    version: string;
                    content: string;
                };
                history: {
                    version: string;
                    content: string;
                }[];
            } | undefined;
            debug?: boolean | undefined;
        }>;
        path: "/clusters/:clusterId";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            readonly 204: z.ZodUndefined;
            readonly 401: z.ZodUndefined;
        };
    };
    readonly getCluster: {
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
        }, {
            clusterId: string;
        }>;
        readonly method: "GET";
        path: "/clusters/:clusterId";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            readonly 200: z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                description: z.ZodNullable<z.ZodString>;
                createdAt: z.ZodDate;
                debug: z.ZodBoolean;
                lastPingAt: z.ZodNullable<z.ZodDate>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                name: string;
                createdAt: Date;
                description: string | null;
                debug: boolean;
                lastPingAt: Date | null;
            }, {
                id: string;
                name: string;
                createdAt: Date;
                description: string | null;
                debug: boolean;
                lastPingAt: Date | null;
            }>;
            readonly 401: z.ZodUndefined;
            readonly 404: z.ZodUndefined;
        };
    };
    readonly getService: {
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
            serviceName: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
            serviceName: string;
        }, {
            clusterId: string;
            serviceName: string;
        }>;
        readonly query: z.ZodObject<{
            limit: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            limit: number;
        }, {
            limit?: number | undefined;
        }>;
        readonly method: "GET";
        path: "/clusters/:clusterId/service/:serviceName";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            readonly 200: z.ZodObject<{
                jobs: z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    targetFn: z.ZodString;
                    service: z.ZodNullable<z.ZodString>;
                    status: z.ZodString;
                    resultType: z.ZodNullable<z.ZodString>;
                    createdAt: z.ZodDate;
                    functionExecutionTime: z.ZodNullable<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    status: string;
                    createdAt: Date;
                    service: string | null;
                    resultType: string | null;
                    functionExecutionTime: number | null;
                    targetFn: string;
                }, {
                    id: string;
                    status: string;
                    createdAt: Date;
                    service: string | null;
                    resultType: string | null;
                    functionExecutionTime: number | null;
                    targetFn: string;
                }>, "many">;
                definition: z.ZodNullable<z.ZodObject<{
                    name: z.ZodString;
                    functions: z.ZodOptional<z.ZodArray<z.ZodObject<{
                        name: z.ZodString;
                        rate: z.ZodOptional<z.ZodObject<{
                            per: z.ZodEnum<["minute", "hour"]>;
                            limit: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            per: "minute" | "hour";
                            limit: number;
                        }, {
                            per: "minute" | "hour";
                            limit: number;
                        }>>;
                        cacheTTL: z.ZodOptional<z.ZodNumber>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        rate?: {
                            per: "minute" | "hour";
                            limit: number;
                        } | undefined;
                        cacheTTL?: number | undefined;
                    }, {
                        name: string;
                        rate?: {
                            per: "minute" | "hour";
                            limit: number;
                        } | undefined;
                        cacheTTL?: number | undefined;
                    }>, "many">>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    functions?: {
                        name: string;
                        rate?: {
                            per: "minute" | "hour";
                            limit: number;
                        } | undefined;
                        cacheTTL?: number | undefined;
                    }[] | undefined;
                }, {
                    name: string;
                    functions?: {
                        name: string;
                        rate?: {
                            per: "minute" | "hour";
                            limit: number;
                        } | undefined;
                        cacheTTL?: number | undefined;
                    }[] | undefined;
                }>>;
            }, "strip", z.ZodTypeAny, {
                jobs: {
                    id: string;
                    status: string;
                    createdAt: Date;
                    service: string | null;
                    resultType: string | null;
                    functionExecutionTime: number | null;
                    targetFn: string;
                }[];
                definition: {
                    name: string;
                    functions?: {
                        name: string;
                        rate?: {
                            per: "minute" | "hour";
                            limit: number;
                        } | undefined;
                        cacheTTL?: number | undefined;
                    }[] | undefined;
                } | null;
            }, {
                jobs: {
                    id: string;
                    status: string;
                    createdAt: Date;
                    service: string | null;
                    resultType: string | null;
                    functionExecutionTime: number | null;
                    targetFn: string;
                }[];
                definition: {
                    name: string;
                    functions?: {
                        name: string;
                        rate?: {
                            per: "minute" | "hour";
                            limit: number;
                        } | undefined;
                        cacheTTL?: number | undefined;
                    }[] | undefined;
                } | null;
            }>;
            readonly 401: z.ZodUndefined;
            readonly 404: z.ZodUndefined;
        };
    };
    readonly listEvents: {
        readonly query: z.ZodObject<{
            type: z.ZodOptional<z.ZodString>;
            jobId: z.ZodOptional<z.ZodString>;
            machineId: z.ZodOptional<z.ZodString>;
            service: z.ZodOptional<z.ZodString>;
            workflowId: z.ZodOptional<z.ZodString>;
            includeMeta: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type?: string | undefined;
            service?: string | undefined;
            jobId?: string | undefined;
            machineId?: string | undefined;
            workflowId?: string | undefined;
            includeMeta?: string | undefined;
        }, {
            type?: string | undefined;
            service?: string | undefined;
            jobId?: string | undefined;
            machineId?: string | undefined;
            workflowId?: string | undefined;
            includeMeta?: string | undefined;
        }>;
        readonly method: "GET";
        path: "/clusters/:clusterId/events";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            readonly 200: z.ZodArray<z.ZodObject<{
                type: z.ZodString;
                machineId: z.ZodNullable<z.ZodString>;
                service: z.ZodNullable<z.ZodString>;
                createdAt: z.ZodDate;
                jobId: z.ZodNullable<z.ZodString>;
                targetFn: z.ZodNullable<z.ZodString>;
                resultType: z.ZodNullable<z.ZodString>;
                status: z.ZodNullable<z.ZodString>;
                workflowId: z.ZodNullable<z.ZodString>;
                meta: z.ZodNullable<z.ZodAny>;
                id: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                id: string;
                type: string;
                status: string | null;
                createdAt: Date;
                service: string | null;
                jobId: string | null;
                resultType: string | null;
                targetFn: string | null;
                machineId: string | null;
                workflowId: string | null;
                meta?: any;
            }, {
                id: string;
                type: string;
                status: string | null;
                createdAt: Date;
                service: string | null;
                jobId: string | null;
                resultType: string | null;
                targetFn: string | null;
                machineId: string | null;
                workflowId: string | null;
                meta?: any;
            }>, "many">;
            readonly 401: z.ZodUndefined;
            readonly 404: z.ZodUndefined;
        };
    };
    readonly getEventMeta: {
        readonly method: "GET";
        path: "/clusters/:clusterId/events/:eventId/meta";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            readonly 200: z.ZodObject<{
                type: z.ZodString;
                machineId: z.ZodNullable<z.ZodString>;
                service: z.ZodNullable<z.ZodString>;
                createdAt: z.ZodDate;
                jobId: z.ZodNullable<z.ZodString>;
                targetFn: z.ZodNullable<z.ZodString>;
                resultType: z.ZodNullable<z.ZodString>;
                status: z.ZodNullable<z.ZodString>;
                meta: z.ZodUnknown;
                id: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                id: string;
                type: string;
                status: string | null;
                createdAt: Date;
                service: string | null;
                jobId: string | null;
                resultType: string | null;
                targetFn: string | null;
                machineId: string | null;
                meta?: unknown;
            }, {
                id: string;
                type: string;
                status: string | null;
                createdAt: Date;
                service: string | null;
                jobId: string | null;
                resultType: string | null;
                targetFn: string | null;
                machineId: string | null;
                meta?: unknown;
            }>;
            readonly 401: z.ZodUndefined;
            readonly 404: z.ZodUndefined;
        };
    };
    readonly executeJobSync: {
        readonly method: "POST";
        readonly body: z.ZodObject<{
            service: z.ZodString;
            function: z.ZodString;
            input: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
        }, "strip", z.ZodTypeAny, {
            function: string;
            input: {} & {
                [k: string]: unknown;
            };
            service: string;
        }, {
            function: string;
            input: {} & {
                [k: string]: unknown;
            };
            service: string;
        }>;
        path: "/clusters/:clusterId/execute";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            readonly 401: z.ZodUndefined;
            readonly 404: z.ZodUndefined;
            readonly 200: z.ZodObject<{
                resultType: z.ZodString;
                result: z.ZodAny;
                status: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                status: string;
                resultType: string;
                result?: any;
            }, {
                status: string;
                resultType: string;
                result?: any;
            }>;
            readonly 400: z.ZodObject<{
                message: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                message: string;
            }, {
                message: string;
            }>;
            readonly 500: z.ZodObject<{
                error: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                error: string;
            }, {
                error: string;
            }>;
        };
    };
    readonly createRun: {
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
        }, {
            clusterId: string;
        }>;
        readonly method: "POST";
        readonly body: z.ZodObject<{
            message: z.ZodOptional<z.ZodString>;
            result: z.ZodOptional<z.ZodObject<{
                handler: z.ZodOptional<z.ZodObject<{
                    service: z.ZodString;
                    function: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    function: string;
                    service: string;
                }, {
                    function: string;
                    service: string;
                }>>;
                schema: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            }, "strip", z.ZodTypeAny, {
                schema?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                handler?: {
                    function: string;
                    service: string;
                } | undefined;
            }, {
                schema?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                handler?: {
                    function: string;
                    service: string;
                } | undefined;
            }>>;
            attachedFunctions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
            test: z.ZodOptional<z.ZodObject<{
                enabled: z.ZodDefault<z.ZodBoolean>;
                mocks: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    output: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
                }, "strip", z.ZodTypeAny, {
                    output: {} & {
                        [k: string]: unknown;
                    };
                }, {
                    output: {} & {
                        [k: string]: unknown;
                    };
                }>>>;
            }, "strip", z.ZodTypeAny, {
                enabled: boolean;
                mocks?: Record<string, {
                    output: {} & {
                        [k: string]: unknown;
                    };
                }> | undefined;
            }, {
                enabled?: boolean | undefined;
                mocks?: Record<string, {
                    output: {} & {
                        [k: string]: unknown;
                    };
                }> | undefined;
            }>>;
            template: z.ZodOptional<z.ZodObject<{
                id: z.ZodString;
                input: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                input: {} & {
                    [k: string]: unknown;
                };
            }, {
                id: string;
                input: {} & {
                    [k: string]: unknown;
                };
            }>>;
        }, "strip", z.ZodTypeAny, {
            message?: string | undefined;
            result?: {
                schema?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                handler?: {
                    function: string;
                    service: string;
                } | undefined;
            } | undefined;
            attachedFunctions?: string[] | undefined;
            metadata?: Record<string, string> | undefined;
            test?: {
                enabled: boolean;
                mocks?: Record<string, {
                    output: {} & {
                        [k: string]: unknown;
                    };
                }> | undefined;
            } | undefined;
            template?: {
                id: string;
                input: {} & {
                    [k: string]: unknown;
                };
            } | undefined;
        }, {
            message?: string | undefined;
            result?: {
                schema?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                handler?: {
                    function: string;
                    service: string;
                } | undefined;
            } | undefined;
            attachedFunctions?: string[] | undefined;
            metadata?: Record<string, string> | undefined;
            test?: {
                enabled?: boolean | undefined;
                mocks?: Record<string, {
                    output: {} & {
                        [k: string]: unknown;
                    };
                }> | undefined;
            } | undefined;
            template?: {
                id: string;
                input: {} & {
                    [k: string]: unknown;
                };
            } | undefined;
        }>;
        path: "/clusters/:clusterId/runs";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            readonly 201: z.ZodObject<{
                id: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                id: string;
            }, {
                id: string;
            }>;
            readonly 401: z.ZodUndefined;
            readonly 400: z.ZodObject<{
                message: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                message: string;
            }, {
                message: string;
            }>;
        };
    };
    readonly deleteRun: {
        readonly pathParams: z.ZodObject<{
            runId: z.ZodString;
            clusterId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
            runId: string;
        }, {
            clusterId: string;
            runId: string;
        }>;
        readonly method: "DELETE";
        readonly body: z.ZodUndefined;
        path: "/clusters/:clusterId/runs/:runId";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            readonly 204: z.ZodUndefined;
            readonly 401: z.ZodUndefined;
        };
    };
    readonly createMessage: {
        readonly pathParams: z.ZodObject<{
            runId: z.ZodString;
            clusterId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
            runId: string;
        }, {
            clusterId: string;
            runId: string;
        }>;
        readonly method: "POST";
        readonly body: z.ZodObject<{
            id: z.ZodOptional<z.ZodString>;
            message: z.ZodString;
            type: z.ZodOptional<z.ZodEnum<["human", "supervisor"]>>;
        }, "strip", z.ZodTypeAny, {
            message: string;
            id?: string | undefined;
            type?: "human" | "supervisor" | undefined;
        }, {
            message: string;
            id?: string | undefined;
            type?: "human" | "supervisor" | undefined;
        }>;
        path: "/clusters/:clusterId/runs/:runId/messages";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            readonly 200: z.ZodObject<{
                messages: z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    data: z.ZodUnion<[z.ZodObject<{
                        id: z.ZodString;
                        result: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
                    }, "strict", z.ZodTypeAny, {
                        id: string;
                        result: {} & {
                            [k: string]: unknown;
                        };
                    }, {
                        id: string;
                        result: {} & {
                            [k: string]: unknown;
                        };
                    }>, z.ZodObject<{
                        done: z.ZodOptional<z.ZodBoolean>;
                        result: z.ZodOptional<z.ZodAny>;
                        summary: z.ZodOptional<z.ZodString>;
                        learnings: z.ZodOptional<z.ZodArray<z.ZodObject<{
                            summary: z.ZodString;
                            entities: z.ZodArray<z.ZodObject<{
                                name: z.ZodString;
                                type: z.ZodEnum<["tool"]>;
                            }, "strip", z.ZodTypeAny, {
                                name: string;
                                type: "tool";
                            }, {
                                name: string;
                                type: "tool";
                            }>, "many">;
                            relevance: z.ZodObject<{
                                temporality: z.ZodEnum<["transient", "persistent"]>;
                            }, "strip", z.ZodTypeAny, {
                                temporality: "transient" | "persistent";
                            }, {
                                temporality: "transient" | "persistent";
                            }>;
                        }, "strip", z.ZodTypeAny, {
                            summary: string;
                            entities: {
                                name: string;
                                type: "tool";
                            }[];
                            relevance: {
                                temporality: "transient" | "persistent";
                            };
                        }, {
                            summary: string;
                            entities: {
                                name: string;
                                type: "tool";
                            }[];
                            relevance: {
                                temporality: "transient" | "persistent";
                            };
                        }>, "many">>;
                        issue: z.ZodOptional<z.ZodString>;
                        invocations: z.ZodOptional<z.ZodArray<z.ZodObject<{
                            id: z.ZodOptional<z.ZodString>;
                            toolName: z.ZodString;
                            reasoning: z.ZodString;
                            input: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
                        }, "strip", z.ZodTypeAny, {
                            toolName: string;
                            reasoning: string;
                            input: {} & {
                                [k: string]: unknown;
                            };
                            id?: string | undefined;
                        }, {
                            toolName: string;
                            reasoning: string;
                            input: {} & {
                                [k: string]: unknown;
                            };
                            id?: string | undefined;
                        }>, "many">>;
                    }, "strict", z.ZodTypeAny, {
                        result?: any;
                        summary?: string | undefined;
                        done?: boolean | undefined;
                        learnings?: {
                            summary: string;
                            entities: {
                                name: string;
                                type: "tool";
                            }[];
                            relevance: {
                                temporality: "transient" | "persistent";
                            };
                        }[] | undefined;
                        issue?: string | undefined;
                        invocations?: {
                            toolName: string;
                            reasoning: string;
                            input: {} & {
                                [k: string]: unknown;
                            };
                            id?: string | undefined;
                        }[] | undefined;
                    }, {
                        result?: any;
                        summary?: string | undefined;
                        done?: boolean | undefined;
                        learnings?: {
                            summary: string;
                            entities: {
                                name: string;
                                type: "tool";
                            }[];
                            relevance: {
                                temporality: "transient" | "persistent";
                            };
                        }[] | undefined;
                        issue?: string | undefined;
                        invocations?: {
                            toolName: string;
                            reasoning: string;
                            input: {} & {
                                [k: string]: unknown;
                            };
                            id?: string | undefined;
                        }[] | undefined;
                    }>, z.ZodObject<{
                        message: z.ZodString;
                        details: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
                    }, "strict", z.ZodTypeAny, {
                        message: string;
                        details?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    }, {
                        message: string;
                        details?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    }>]>;
                    type: z.ZodEnum<["human", "template", "result", "agent", "agent-invalid", "supervisor"]>;
                    createdAt: z.ZodDate;
                    pending: z.ZodDefault<z.ZodBoolean>;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    type: "result" | "template" | "human" | "supervisor" | "agent" | "agent-invalid";
                    createdAt: Date;
                    data: {
                        message: string;
                        details?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    } | {
                        id: string;
                        result: {} & {
                            [k: string]: unknown;
                        };
                    } | {
                        result?: any;
                        summary?: string | undefined;
                        done?: boolean | undefined;
                        learnings?: {
                            summary: string;
                            entities: {
                                name: string;
                                type: "tool";
                            }[];
                            relevance: {
                                temporality: "transient" | "persistent";
                            };
                        }[] | undefined;
                        issue?: string | undefined;
                        invocations?: {
                            toolName: string;
                            reasoning: string;
                            input: {} & {
                                [k: string]: unknown;
                            };
                            id?: string | undefined;
                        }[] | undefined;
                    };
                    pending: boolean;
                }, {
                    id: string;
                    type: "result" | "template" | "human" | "supervisor" | "agent" | "agent-invalid";
                    createdAt: Date;
                    data: {
                        message: string;
                        details?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    } | {
                        id: string;
                        result: {} & {
                            [k: string]: unknown;
                        };
                    } | {
                        result?: any;
                        summary?: string | undefined;
                        done?: boolean | undefined;
                        learnings?: {
                            summary: string;
                            entities: {
                                name: string;
                                type: "tool";
                            }[];
                            relevance: {
                                temporality: "transient" | "persistent";
                            };
                        }[] | undefined;
                        issue?: string | undefined;
                        invocations?: {
                            toolName: string;
                            reasoning: string;
                            input: {} & {
                                [k: string]: unknown;
                            };
                            id?: string | undefined;
                        }[] | undefined;
                    };
                    pending?: boolean | undefined;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                messages: {
                    id: string;
                    type: "result" | "template" | "human" | "supervisor" | "agent" | "agent-invalid";
                    createdAt: Date;
                    data: {
                        message: string;
                        details?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    } | {
                        id: string;
                        result: {} & {
                            [k: string]: unknown;
                        };
                    } | {
                        result?: any;
                        summary?: string | undefined;
                        done?: boolean | undefined;
                        learnings?: {
                            summary: string;
                            entities: {
                                name: string;
                                type: "tool";
                            }[];
                            relevance: {
                                temporality: "transient" | "persistent";
                            };
                        }[] | undefined;
                        issue?: string | undefined;
                        invocations?: {
                            toolName: string;
                            reasoning: string;
                            input: {} & {
                                [k: string]: unknown;
                            };
                            id?: string | undefined;
                        }[] | undefined;
                    };
                    pending: boolean;
                }[];
            }, {
                messages: {
                    id: string;
                    type: "result" | "template" | "human" | "supervisor" | "agent" | "agent-invalid";
                    createdAt: Date;
                    data: {
                        message: string;
                        details?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    } | {
                        id: string;
                        result: {} & {
                            [k: string]: unknown;
                        };
                    } | {
                        result?: any;
                        summary?: string | undefined;
                        done?: boolean | undefined;
                        learnings?: {
                            summary: string;
                            entities: {
                                name: string;
                                type: "tool";
                            }[];
                            relevance: {
                                temporality: "transient" | "persistent";
                            };
                        }[] | undefined;
                        issue?: string | undefined;
                        invocations?: {
                            toolName: string;
                            reasoning: string;
                            input: {} & {
                                [k: string]: unknown;
                            };
                            id?: string | undefined;
                        }[] | undefined;
                    };
                    pending?: boolean | undefined;
                }[];
            }>;
            readonly 401: z.ZodUndefined;
        };
    };
    readonly listMessages: {
        readonly method: "GET";
        path: "/clusters/:clusterId/runs/:runId/messages";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            readonly 200: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                data: z.ZodUnion<[z.ZodObject<{
                    id: z.ZodString;
                    result: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
                }, "strict", z.ZodTypeAny, {
                    id: string;
                    result: {} & {
                        [k: string]: unknown;
                    };
                }, {
                    id: string;
                    result: {} & {
                        [k: string]: unknown;
                    };
                }>, z.ZodObject<{
                    done: z.ZodOptional<z.ZodBoolean>;
                    result: z.ZodOptional<z.ZodAny>;
                    summary: z.ZodOptional<z.ZodString>;
                    learnings: z.ZodOptional<z.ZodArray<z.ZodObject<{
                        summary: z.ZodString;
                        entities: z.ZodArray<z.ZodObject<{
                            name: z.ZodString;
                            type: z.ZodEnum<["tool"]>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            type: "tool";
                        }, {
                            name: string;
                            type: "tool";
                        }>, "many">;
                        relevance: z.ZodObject<{
                            temporality: z.ZodEnum<["transient", "persistent"]>;
                        }, "strip", z.ZodTypeAny, {
                            temporality: "transient" | "persistent";
                        }, {
                            temporality: "transient" | "persistent";
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        summary: string;
                        entities: {
                            name: string;
                            type: "tool";
                        }[];
                        relevance: {
                            temporality: "transient" | "persistent";
                        };
                    }, {
                        summary: string;
                        entities: {
                            name: string;
                            type: "tool";
                        }[];
                        relevance: {
                            temporality: "transient" | "persistent";
                        };
                    }>, "many">>;
                    issue: z.ZodOptional<z.ZodString>;
                    invocations: z.ZodOptional<z.ZodArray<z.ZodObject<{
                        id: z.ZodOptional<z.ZodString>;
                        toolName: z.ZodString;
                        reasoning: z.ZodString;
                        input: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
                    }, "strip", z.ZodTypeAny, {
                        toolName: string;
                        reasoning: string;
                        input: {} & {
                            [k: string]: unknown;
                        };
                        id?: string | undefined;
                    }, {
                        toolName: string;
                        reasoning: string;
                        input: {} & {
                            [k: string]: unknown;
                        };
                        id?: string | undefined;
                    }>, "many">>;
                }, "strict", z.ZodTypeAny, {
                    result?: any;
                    summary?: string | undefined;
                    done?: boolean | undefined;
                    learnings?: {
                        summary: string;
                        entities: {
                            name: string;
                            type: "tool";
                        }[];
                        relevance: {
                            temporality: "transient" | "persistent";
                        };
                    }[] | undefined;
                    issue?: string | undefined;
                    invocations?: {
                        toolName: string;
                        reasoning: string;
                        input: {} & {
                            [k: string]: unknown;
                        };
                        id?: string | undefined;
                    }[] | undefined;
                }, {
                    result?: any;
                    summary?: string | undefined;
                    done?: boolean | undefined;
                    learnings?: {
                        summary: string;
                        entities: {
                            name: string;
                            type: "tool";
                        }[];
                        relevance: {
                            temporality: "transient" | "persistent";
                        };
                    }[] | undefined;
                    issue?: string | undefined;
                    invocations?: {
                        toolName: string;
                        reasoning: string;
                        input: {} & {
                            [k: string]: unknown;
                        };
                        id?: string | undefined;
                    }[] | undefined;
                }>, z.ZodObject<{
                    message: z.ZodString;
                    details: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
                }, "strict", z.ZodTypeAny, {
                    message: string;
                    details?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                }, {
                    message: string;
                    details?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                }>]>;
                type: z.ZodEnum<["human", "template", "result", "agent", "agent-invalid", "supervisor"]>;
                createdAt: z.ZodDate;
                pending: z.ZodDefault<z.ZodBoolean>;
                displayableContext: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                type: "result" | "template" | "human" | "supervisor" | "agent" | "agent-invalid";
                createdAt: Date;
                data: {
                    message: string;
                    details?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                } | {
                    id: string;
                    result: {} & {
                        [k: string]: unknown;
                    };
                } | {
                    result?: any;
                    summary?: string | undefined;
                    done?: boolean | undefined;
                    learnings?: {
                        summary: string;
                        entities: {
                            name: string;
                            type: "tool";
                        }[];
                        relevance: {
                            temporality: "transient" | "persistent";
                        };
                    }[] | undefined;
                    issue?: string | undefined;
                    invocations?: {
                        toolName: string;
                        reasoning: string;
                        input: {} & {
                            [k: string]: unknown;
                        };
                        id?: string | undefined;
                    }[] | undefined;
                };
                pending: boolean;
                displayableContext: Record<string, string> | null;
            }, {
                id: string;
                type: "result" | "template" | "human" | "supervisor" | "agent" | "agent-invalid";
                createdAt: Date;
                data: {
                    message: string;
                    details?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                } | {
                    id: string;
                    result: {} & {
                        [k: string]: unknown;
                    };
                } | {
                    result?: any;
                    summary?: string | undefined;
                    done?: boolean | undefined;
                    learnings?: {
                        summary: string;
                        entities: {
                            name: string;
                            type: "tool";
                        }[];
                        relevance: {
                            temporality: "transient" | "persistent";
                        };
                    }[] | undefined;
                    issue?: string | undefined;
                    invocations?: {
                        toolName: string;
                        reasoning: string;
                        input: {} & {
                            [k: string]: unknown;
                        };
                        id?: string | undefined;
                    }[] | undefined;
                };
                displayableContext: Record<string, string> | null;
                pending?: boolean | undefined;
            }>, "many">;
            readonly 401: z.ZodUndefined;
        };
    };
    readonly listRuns: {
        readonly query: z.ZodObject<{
            userId: z.ZodOptional<z.ZodString>;
            test: z.ZodOptional<z.ZodEffects<z.ZodString, boolean, string>>;
            limit: z.ZodDefault<z.ZodNumber>;
            metadata: z.ZodOptional<z.ZodString>;
            promptTemplateId: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            limit: number;
            metadata?: string | undefined;
            test?: boolean | undefined;
            userId?: string | undefined;
            promptTemplateId?: string | undefined;
        }, {
            limit?: number | undefined;
            metadata?: string | undefined;
            test?: string | undefined;
            userId?: string | undefined;
            promptTemplateId?: string | undefined;
        }>;
        readonly method: "GET";
        path: "/clusters/:clusterId/runs";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            readonly 200: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                userId: z.ZodNullable<z.ZodString>;
                createdAt: z.ZodDate;
                status: z.ZodNullable<z.ZodEnum<["pending", "running", "paused", "done", "failed"]>>;
                parentWorkflowId: z.ZodNullable<z.ZodString>;
                test: z.ZodBoolean;
                promptTemplateId: z.ZodNullable<z.ZodString>;
                promptTemplateVersion: z.ZodNullable<z.ZodNumber>;
                feedbackScore: z.ZodNullable<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                name: string;
                status: "done" | "pending" | "running" | "paused" | "failed" | null;
                createdAt: Date;
                test: boolean;
                userId: string | null;
                promptTemplateId: string | null;
                parentWorkflowId: string | null;
                promptTemplateVersion: number | null;
                feedbackScore: number | null;
            }, {
                id: string;
                name: string;
                status: "done" | "pending" | "running" | "paused" | "failed" | null;
                createdAt: Date;
                test: boolean;
                userId: string | null;
                promptTemplateId: string | null;
                parentWorkflowId: string | null;
                promptTemplateVersion: number | null;
                feedbackScore: number | null;
            }>, "many">;
            readonly 401: z.ZodUndefined;
        };
    };
    readonly getRun: {
        readonly method: "GET";
        path: "/clusters/:clusterId/runs/:runId";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            readonly 200: z.ZodObject<{
                id: z.ZodString;
                jobHandle: z.ZodNullable<z.ZodString>;
                userId: z.ZodNullable<z.ZodString>;
                status: z.ZodNullable<z.ZodEnum<["pending", "running", "paused", "done", "failed"]>>;
                failureReason: z.ZodNullable<z.ZodString>;
                test: z.ZodBoolean;
                feedbackComment: z.ZodNullable<z.ZodString>;
                feedbackScore: z.ZodNullable<z.ZodNumber>;
                result: z.ZodNullable<z.ZodString>;
                summary: z.ZodNullable<z.ZodString>;
                metadata: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodString>>;
                attachedFunctions: z.ZodNullable<z.ZodArray<z.ZodString, "many">>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                status: "done" | "pending" | "running" | "paused" | "failed" | null;
                result: string | null;
                summary: string | null;
                attachedFunctions: string[] | null;
                metadata: Record<string, string> | null;
                test: boolean;
                userId: string | null;
                feedbackScore: number | null;
                jobHandle: string | null;
                failureReason: string | null;
                feedbackComment: string | null;
            }, {
                id: string;
                status: "done" | "pending" | "running" | "paused" | "failed" | null;
                result: string | null;
                summary: string | null;
                attachedFunctions: string[] | null;
                metadata: Record<string, string> | null;
                test: boolean;
                userId: string | null;
                feedbackScore: number | null;
                jobHandle: string | null;
                failureReason: string | null;
                feedbackComment: string | null;
            }>;
            readonly 401: z.ZodUndefined;
        };
    };
    readonly createFeedback: {
        readonly pathParams: z.ZodObject<{
            runId: z.ZodString;
            clusterId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
            runId: string;
        }, {
            clusterId: string;
            runId: string;
        }>;
        readonly method: "POST";
        readonly body: z.ZodObject<{
            comment: z.ZodNullable<z.ZodString>;
            score: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            comment: string | null;
            score: number | null;
        }, {
            comment: string | null;
            score: number | null;
        }>;
        path: "/clusters/:clusterId/runs/:runId/feedback";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            readonly 204: z.ZodUndefined;
            readonly 401: z.ZodUndefined;
            readonly 404: z.ZodUndefined;
        };
    };
    readonly resolveInputRequest: {
        readonly pathParams: z.ZodObject<{
            runId: z.ZodString;
            inputRequestId: z.ZodString;
            clusterId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
            runId: string;
            inputRequestId: string;
        }, {
            clusterId: string;
            runId: string;
            inputRequestId: string;
        }>;
        readonly method: "POST";
        readonly body: z.ZodObject<{
            input: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            input: string;
        }, {
            input: string;
        }>;
        path: "/clusters/:clusterId/runs/:runId/input-requests/:inputRequestId";
        headers: z.ZodObject<{
            authorization: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            authorization?: string | undefined;
        }, {
            authorization?: string | undefined;
        }>;
        responses: {
            readonly 204: z.ZodUndefined;
            readonly 401: z.ZodUndefined;
            readonly 404: z.ZodUndefined;
        };
    };
    readonly getInputRequest: {
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
            runId: z.ZodString;
            inputRequestId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
            runId: string;
            inputRequestId: string;
        }, {
            clusterId: string;
            runId: string;
            inputRequestId: string;
        }>;
        readonly method: "GET";
        path: "/clusters/:clusterId/runs/:runId/input-requests/:inputRequestId";
        headers: z.ZodObject<{
            authorization: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            authorization?: string | undefined;
        }, {
            authorization?: string | undefined;
        }>;
        responses: {
            readonly 200: z.ZodObject<{
                id: z.ZodString;
                runId: z.ZodString;
                clusterId: z.ZodString;
                resolvedAt: z.ZodNullable<z.ZodDate>;
                createdAt: z.ZodDate;
                requestArgs: z.ZodNullable<z.ZodString>;
                service: z.ZodNullable<z.ZodString>;
                function: z.ZodNullable<z.ZodString>;
                description: z.ZodNullable<z.ZodString>;
                type: z.ZodString;
                options: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, "strip", z.ZodTypeAny, {
                function: string | null;
                id: string;
                type: string;
                createdAt: Date;
                service: string | null;
                description: string | null;
                clusterId: string;
                runId: string;
                resolvedAt: Date | null;
                requestArgs: string | null;
                options?: string[] | undefined;
            }, {
                function: string | null;
                id: string;
                type: string;
                createdAt: Date;
                service: string | null;
                description: string | null;
                clusterId: string;
                runId: string;
                resolvedAt: Date | null;
                requestArgs: string | null;
                options?: string[] | undefined;
            }>;
            readonly 401: z.ZodUndefined;
            readonly 404: z.ZodUndefined;
        };
    };
    readonly oas: {
        readonly method: "GET";
        path: "/public/oas.json";
        responses: {
            readonly 200: z.ZodUnknown;
        };
    };
    readonly pingCluster: {
        readonly method: "POST";
        readonly body: z.ZodObject<{
            services: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            services: string[];
        }, {
            services: string[];
        }>;
        path: "/ping-cluster";
        headers: z.ZodObject<{
            authorization: z.ZodString;
            "x-machine-id": z.ZodString;
            "x-machine-sdk-version": z.ZodString;
            "x-machine-sdk-language": z.ZodString;
            "x-forwarded-for": z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
            "x-machine-id": string;
            "x-machine-sdk-version": string;
            "x-machine-sdk-language": string;
            "x-forwarded-for"?: string | undefined;
        }, {
            authorization: string;
            "x-machine-id": string;
            "x-machine-sdk-version": string;
            "x-machine-sdk-language": string;
            "x-forwarded-for"?: string | undefined;
        }>;
        responses: {
            readonly 204: z.ZodUndefined;
            readonly 401: z.ZodUndefined;
        };
    };
    readonly pingClusterV2: {
        readonly method: "POST";
        readonly body: z.ZodObject<{
            services: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            services: string[];
        }, {
            services: string[];
        }>;
        path: "/ping-cluster-v2";
        headers: z.ZodObject<{
            authorization: z.ZodString;
            "x-machine-id": z.ZodString;
            "x-machine-sdk-version": z.ZodString;
            "x-machine-sdk-language": z.ZodString;
            "x-forwarded-for": z.ZodOptional<z.ZodString>;
            "x-sentinel-no-mask": z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
            "x-machine-id": string;
            "x-machine-sdk-version": string;
            "x-machine-sdk-language": string;
            "x-forwarded-for"?: string | undefined;
            "x-sentinel-no-mask"?: string | undefined;
        }, {
            authorization: string;
            "x-machine-id": string;
            "x-machine-sdk-version": string;
            "x-machine-sdk-language": string;
            "x-forwarded-for"?: string | undefined;
            "x-sentinel-no-mask"?: string | undefined;
        }>;
        responses: {
            readonly 200: z.ZodObject<{
                outdated: z.ZodBoolean;
            }, "strip", z.ZodTypeAny, {
                outdated: boolean;
            }, {
                outdated: boolean;
            }>;
            readonly 401: z.ZodUndefined;
        };
    };
    readonly updateMessage: {
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
            runId: z.ZodString;
            messageId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
            runId: string;
            messageId: string;
        }, {
            clusterId: string;
            runId: string;
            messageId: string;
        }>;
        readonly method: "PUT";
        readonly body: z.ZodObject<{
            message: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            message: string;
        }, {
            message: string;
        }>;
        path: "/clusters/:clusterId/runs/:runId/messages/:messageId";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            readonly 200: z.ZodObject<{
                data: z.ZodObject<{
                    message: z.ZodString;
                    details: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
                }, "strict", z.ZodTypeAny, {
                    message: string;
                    details?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                }, {
                    message: string;
                    details?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                }>;
                id: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                id: string;
                data: {
                    message: string;
                    details?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                };
            }, {
                id: string;
                data: {
                    message: string;
                    details?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                };
            }>;
            readonly 404: z.ZodObject<{
                message: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                message: string;
            }, {
                message: string;
            }>;
            readonly 401: z.ZodUndefined;
        };
    };
    readonly storeServiceMetadata: {
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
            service: z.ZodString;
            key: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            service: string;
            clusterId: string;
            key: string;
        }, {
            service: string;
            clusterId: string;
            key: string;
        }>;
        readonly method: "PUT";
        readonly body: z.ZodObject<{
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
        }, {
            value: string;
        }>;
        path: "/clusters/:clusterId/services/:service/keys/:key";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            readonly 204: z.ZodUndefined;
            readonly 401: z.ZodUndefined;
        };
    };
    readonly getClusterExport: {
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
        }, {
            clusterId: string;
        }>;
        readonly method: "GET";
        path: "/clusters/:clusterId/export";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            readonly 200: z.ZodObject<{
                data: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                data: string;
            }, {
                data: string;
            }>;
        };
    };
    readonly consumeClusterExport: {
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
        }, {
            clusterId: string;
        }>;
        readonly method: "POST";
        readonly body: z.ZodObject<{
            data: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            data: string;
        }, {
            data: string;
        }>;
        path: "/clusters/:clusterId/import";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            readonly 200: z.ZodObject<{
                message: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                message: string;
            }, {
                message: string;
            }>;
            readonly 400: z.ZodUndefined;
        };
    };
    readonly getJob: {
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
            jobId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
            jobId: string;
        }, {
            clusterId: string;
            jobId: string;
        }>;
        readonly method: "GET";
        path: "/clusters/:clusterId/jobs/:jobId";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            readonly 200: z.ZodObject<{
                id: z.ZodString;
                status: z.ZodString;
                targetFn: z.ZodString;
                service: z.ZodString;
                executingMachineId: z.ZodNullable<z.ZodString>;
                targetArgs: z.ZodString;
                result: z.ZodNullable<z.ZodString>;
                resultType: z.ZodNullable<z.ZodString>;
                createdAt: z.ZodDate;
                blobs: z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    name: z.ZodString;
                    type: z.ZodEnum<["json", "json-array"]>;
                    encoding: z.ZodEnum<["base64"]>;
                    size: z.ZodNumber;
                    createdAt: z.ZodDate;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    name: string;
                    type: "json" | "json-array";
                    encoding: "base64";
                    size: number;
                    createdAt: Date;
                }, {
                    id: string;
                    name: string;
                    type: "json" | "json-array";
                    encoding: "base64";
                    size: number;
                    createdAt: Date;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                id: string;
                status: string;
                createdAt: Date;
                result: string | null;
                service: string;
                resultType: string | null;
                targetFn: string;
                executingMachineId: string | null;
                targetArgs: string;
                blobs: {
                    id: string;
                    name: string;
                    type: "json" | "json-array";
                    encoding: "base64";
                    size: number;
                    createdAt: Date;
                }[];
            }, {
                id: string;
                status: string;
                createdAt: Date;
                result: string | null;
                service: string;
                resultType: string | null;
                targetFn: string;
                executingMachineId: string | null;
                targetArgs: string;
                blobs: {
                    id: string;
                    name: string;
                    type: "json" | "json-array";
                    encoding: "base64";
                    size: number;
                    createdAt: Date;
                }[];
            }>;
        };
    };
    readonly listJobReferences: {
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
            runId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
            runId: string;
        }, {
            clusterId: string;
            runId: string;
        }>;
        readonly query: z.ZodObject<{
            token: z.ZodString;
            before: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            token: string;
            before: string;
        }, {
            token: string;
            before: string;
        }>;
        readonly method: "GET";
        path: "/clusters/:clusterId/runs/:runId/job-references";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            readonly 200: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                result: z.ZodNullable<z.ZodString>;
                createdAt: z.ZodDate;
                status: z.ZodString;
                targetFn: z.ZodString;
                service: z.ZodString;
                executingMachineId: z.ZodNullable<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                status: string;
                createdAt: Date;
                result: string | null;
                service: string;
                targetFn: string;
                executingMachineId: string | null;
            }, {
                id: string;
                status: string;
                createdAt: Date;
                result: string | null;
                service: string;
                targetFn: string;
                executingMachineId: string | null;
            }>, "many">;
        };
    };
    readonly createApiKey: {
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
        }, {
            clusterId: string;
        }>;
        readonly method: "POST";
        readonly body: z.ZodObject<{
            name: z.ZodString;
            type: z.ZodEnum<["cluster_manage", "cluster_consume", "cluster_machine"]>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: "cluster_manage" | "cluster_consume" | "cluster_machine";
        }, {
            name: string;
            type: "cluster_manage" | "cluster_consume" | "cluster_machine";
        }>;
        path: "/clusters/:clusterId/api-keys";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            readonly 200: z.ZodObject<{
                id: z.ZodString;
                key: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                id: string;
                key: string;
            }, {
                id: string;
                key: string;
            }>;
        };
    };
    readonly listApiKeys: {
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
        }, {
            clusterId: string;
        }>;
        readonly method: "GET";
        path: "/clusters/:clusterId/api-keys";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            readonly 200: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                type: z.ZodEnum<["cluster_manage", "cluster_consume", "cluster_machine"]>;
                createdAt: z.ZodDate;
                createdBy: z.ZodString;
                revokedAt: z.ZodNullable<z.ZodDate>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                name: string;
                type: "cluster_manage" | "cluster_consume" | "cluster_machine";
                createdAt: Date;
                createdBy: string;
                revokedAt: Date | null;
            }, {
                id: string;
                name: string;
                type: "cluster_manage" | "cluster_consume" | "cluster_machine";
                createdAt: Date;
                createdBy: string;
                revokedAt: Date | null;
            }>, "many">;
        };
    };
    readonly revokeApiKey: {
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
            keyId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
            keyId: string;
        }, {
            clusterId: string;
            keyId: string;
        }>;
        readonly method: "DELETE";
        readonly body: z.ZodUndefined;
        path: "/clusters/:clusterId/api-keys/:keyId";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            readonly 204: z.ZodUndefined;
        };
    };
    readonly getClusterContext: {
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
        }, {
            clusterId: string;
        }>;
        readonly method: "GET";
        path: "/clusters/:clusterId/additional-context";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            readonly 200: z.ZodObject<{
                additionalContext: z.ZodNullable<z.ZodObject<{
                    current: z.ZodObject<{
                        version: z.ZodString;
                        content: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        version: string;
                        content: string;
                    }, {
                        version: string;
                        content: string;
                    }>;
                    history: z.ZodArray<z.ZodObject<{
                        version: z.ZodString;
                        content: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        version: string;
                        content: string;
                    }, {
                        version: string;
                        content: string;
                    }>, "many">;
                }, "strip", z.ZodTypeAny, {
                    current: {
                        version: string;
                        content: string;
                    };
                    history: {
                        version: string;
                        content: string;
                    }[];
                }, {
                    current: {
                        version: string;
                        content: string;
                    };
                    history: {
                        version: string;
                        content: string;
                    }[];
                }>>;
            }, "strip", z.ZodTypeAny, {
                additionalContext: {
                    current: {
                        version: string;
                        content: string;
                    };
                    history: {
                        version: string;
                        content: string;
                    }[];
                } | null;
            }, {
                additionalContext: {
                    current: {
                        version: string;
                        content: string;
                    };
                    history: {
                        version: string;
                        content: string;
                    }[];
                } | null;
            }>;
            readonly 401: z.ZodUndefined;
            readonly 404: z.ZodUndefined;
        };
    };
    readonly listMachines: {
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
        }, {
            clusterId: string;
        }>;
        readonly method: "GET";
        path: "/clusters/:clusterId/machines";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            readonly 200: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                lastPingAt: z.ZodDate;
                ip: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                id: string;
                lastPingAt: Date;
                ip: string;
            }, {
                id: string;
                lastPingAt: Date;
                ip: string;
            }>, "many">;
        };
    };
    readonly listServices: {
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
        }, {
            clusterId: string;
        }>;
        readonly method: "GET";
        path: "/clusters/:clusterId/services";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            readonly 200: z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodOptional<z.ZodString>;
                functions: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodOptional<z.ZodString>;
                    schema: z.ZodOptional<z.ZodString>;
                    config: z.ZodOptional<z.ZodObject<{
                        cache: z.ZodOptional<z.ZodObject<{
                            keyPath: z.ZodString;
                            ttlSeconds: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            keyPath: string;
                            ttlSeconds: number;
                        }, {
                            keyPath: string;
                            ttlSeconds: number;
                        }>>;
                        retryCountOnStall: z.ZodOptional<z.ZodNumber>;
                        timeoutSeconds: z.ZodOptional<z.ZodNumber>;
                        executionIdPath: z.ZodOptional<z.ZodString>;
                        requiresApproval: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
                        private: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
                    }, "strip", z.ZodTypeAny, {
                        cache?: {
                            keyPath: string;
                            ttlSeconds: number;
                        } | undefined;
                        retryCountOnStall?: number | undefined;
                        timeoutSeconds?: number | undefined;
                        executionIdPath?: string | undefined;
                        requiresApproval?: boolean | undefined;
                        private?: boolean | undefined;
                    }, {
                        cache?: {
                            keyPath: string;
                            ttlSeconds: number;
                        } | undefined;
                        retryCountOnStall?: number | undefined;
                        timeoutSeconds?: number | undefined;
                        executionIdPath?: string | undefined;
                        requiresApproval?: boolean | undefined;
                        private?: boolean | undefined;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    description?: string | undefined;
                    schema?: string | undefined;
                    config?: {
                        cache?: {
                            keyPath: string;
                            ttlSeconds: number;
                        } | undefined;
                        retryCountOnStall?: number | undefined;
                        timeoutSeconds?: number | undefined;
                        executionIdPath?: string | undefined;
                        requiresApproval?: boolean | undefined;
                        private?: boolean | undefined;
                    } | undefined;
                }, {
                    name: string;
                    description?: string | undefined;
                    schema?: string | undefined;
                    config?: {
                        cache?: {
                            keyPath: string;
                            ttlSeconds: number;
                        } | undefined;
                        retryCountOnStall?: number | undefined;
                        timeoutSeconds?: number | undefined;
                        executionIdPath?: string | undefined;
                        requiresApproval?: boolean | undefined;
                        private?: boolean | undefined;
                    } | undefined;
                }>, "many">>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                description?: string | undefined;
                functions?: {
                    name: string;
                    description?: string | undefined;
                    schema?: string | undefined;
                    config?: {
                        cache?: {
                            keyPath: string;
                            ttlSeconds: number;
                        } | undefined;
                        retryCountOnStall?: number | undefined;
                        timeoutSeconds?: number | undefined;
                        executionIdPath?: string | undefined;
                        requiresApproval?: boolean | undefined;
                        private?: boolean | undefined;
                    } | undefined;
                }[] | undefined;
            }, {
                name: string;
                description?: string | undefined;
                functions?: {
                    name: string;
                    description?: string | undefined;
                    schema?: string | undefined;
                    config?: {
                        cache?: {
                            keyPath: string;
                            ttlSeconds: number;
                        } | undefined;
                        retryCountOnStall?: number | undefined;
                        timeoutSeconds?: number | undefined;
                        executionIdPath?: string | undefined;
                        requiresApproval?: boolean | undefined;
                        private?: boolean | undefined;
                    } | undefined;
                }[] | undefined;
            }>, "many">;
        };
    };
    readonly getRunTimeline: {
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
            runId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
            runId: string;
        }, {
            clusterId: string;
            runId: string;
        }>;
        readonly query: z.ZodObject<{
            messagesAfter: z.ZodDefault<z.ZodString>;
            activityAfter: z.ZodDefault<z.ZodString>;
            jobsAfter: z.ZodDefault<z.ZodString>;
            inputRequestsAfter: z.ZodDefault<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            messagesAfter: string;
            activityAfter: string;
            jobsAfter: string;
            inputRequestsAfter: string;
        }, {
            messagesAfter?: string | undefined;
            activityAfter?: string | undefined;
            jobsAfter?: string | undefined;
            inputRequestsAfter?: string | undefined;
        }>;
        readonly method: "GET";
        path: "/clusters/:clusterId/runs/:runId/timeline";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            readonly 200: z.ZodObject<{
                messages: z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    data: z.ZodUnion<[z.ZodObject<{
                        id: z.ZodString;
                        result: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
                    }, "strict", z.ZodTypeAny, {
                        id: string;
                        result: {} & {
                            [k: string]: unknown;
                        };
                    }, {
                        id: string;
                        result: {} & {
                            [k: string]: unknown;
                        };
                    }>, z.ZodObject<{
                        done: z.ZodOptional<z.ZodBoolean>;
                        result: z.ZodOptional<z.ZodAny>;
                        summary: z.ZodOptional<z.ZodString>;
                        learnings: z.ZodOptional<z.ZodArray<z.ZodObject<{
                            summary: z.ZodString;
                            entities: z.ZodArray<z.ZodObject<{
                                name: z.ZodString;
                                type: z.ZodEnum<["tool"]>;
                            }, "strip", z.ZodTypeAny, {
                                name: string;
                                type: "tool";
                            }, {
                                name: string;
                                type: "tool";
                            }>, "many">;
                            relevance: z.ZodObject<{
                                temporality: z.ZodEnum<["transient", "persistent"]>;
                            }, "strip", z.ZodTypeAny, {
                                temporality: "transient" | "persistent";
                            }, {
                                temporality: "transient" | "persistent";
                            }>;
                        }, "strip", z.ZodTypeAny, {
                            summary: string;
                            entities: {
                                name: string;
                                type: "tool";
                            }[];
                            relevance: {
                                temporality: "transient" | "persistent";
                            };
                        }, {
                            summary: string;
                            entities: {
                                name: string;
                                type: "tool";
                            }[];
                            relevance: {
                                temporality: "transient" | "persistent";
                            };
                        }>, "many">>;
                        issue: z.ZodOptional<z.ZodString>;
                        invocations: z.ZodOptional<z.ZodArray<z.ZodObject<{
                            id: z.ZodOptional<z.ZodString>;
                            toolName: z.ZodString;
                            reasoning: z.ZodString;
                            input: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
                        }, "strip", z.ZodTypeAny, {
                            toolName: string;
                            reasoning: string;
                            input: {} & {
                                [k: string]: unknown;
                            };
                            id?: string | undefined;
                        }, {
                            toolName: string;
                            reasoning: string;
                            input: {} & {
                                [k: string]: unknown;
                            };
                            id?: string | undefined;
                        }>, "many">>;
                    }, "strict", z.ZodTypeAny, {
                        result?: any;
                        summary?: string | undefined;
                        done?: boolean | undefined;
                        learnings?: {
                            summary: string;
                            entities: {
                                name: string;
                                type: "tool";
                            }[];
                            relevance: {
                                temporality: "transient" | "persistent";
                            };
                        }[] | undefined;
                        issue?: string | undefined;
                        invocations?: {
                            toolName: string;
                            reasoning: string;
                            input: {} & {
                                [k: string]: unknown;
                            };
                            id?: string | undefined;
                        }[] | undefined;
                    }, {
                        result?: any;
                        summary?: string | undefined;
                        done?: boolean | undefined;
                        learnings?: {
                            summary: string;
                            entities: {
                                name: string;
                                type: "tool";
                            }[];
                            relevance: {
                                temporality: "transient" | "persistent";
                            };
                        }[] | undefined;
                        issue?: string | undefined;
                        invocations?: {
                            toolName: string;
                            reasoning: string;
                            input: {} & {
                                [k: string]: unknown;
                            };
                            id?: string | undefined;
                        }[] | undefined;
                    }>, z.ZodObject<{
                        message: z.ZodString;
                        details: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
                    }, "strict", z.ZodTypeAny, {
                        message: string;
                        details?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    }, {
                        message: string;
                        details?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    }>]>;
                    type: z.ZodEnum<["human", "template", "result", "agent", "agent-invalid", "supervisor"]>;
                    createdAt: z.ZodDate;
                    pending: z.ZodDefault<z.ZodBoolean>;
                    displayableContext: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodString>>;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    type: "result" | "template" | "human" | "supervisor" | "agent" | "agent-invalid";
                    createdAt: Date;
                    data: {
                        message: string;
                        details?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    } | {
                        id: string;
                        result: {} & {
                            [k: string]: unknown;
                        };
                    } | {
                        result?: any;
                        summary?: string | undefined;
                        done?: boolean | undefined;
                        learnings?: {
                            summary: string;
                            entities: {
                                name: string;
                                type: "tool";
                            }[];
                            relevance: {
                                temporality: "transient" | "persistent";
                            };
                        }[] | undefined;
                        issue?: string | undefined;
                        invocations?: {
                            toolName: string;
                            reasoning: string;
                            input: {} & {
                                [k: string]: unknown;
                            };
                            id?: string | undefined;
                        }[] | undefined;
                    };
                    pending: boolean;
                    displayableContext: Record<string, string> | null;
                }, {
                    id: string;
                    type: "result" | "template" | "human" | "supervisor" | "agent" | "agent-invalid";
                    createdAt: Date;
                    data: {
                        message: string;
                        details?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    } | {
                        id: string;
                        result: {} & {
                            [k: string]: unknown;
                        };
                    } | {
                        result?: any;
                        summary?: string | undefined;
                        done?: boolean | undefined;
                        learnings?: {
                            summary: string;
                            entities: {
                                name: string;
                                type: "tool";
                            }[];
                            relevance: {
                                temporality: "transient" | "persistent";
                            };
                        }[] | undefined;
                        issue?: string | undefined;
                        invocations?: {
                            toolName: string;
                            reasoning: string;
                            input: {} & {
                                [k: string]: unknown;
                            };
                            id?: string | undefined;
                        }[] | undefined;
                    };
                    displayableContext: Record<string, string> | null;
                    pending?: boolean | undefined;
                }>, "many">;
                activity: z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    type: z.ZodString;
                    machineId: z.ZodNullable<z.ZodString>;
                    service: z.ZodNullable<z.ZodString>;
                    createdAt: z.ZodDate;
                    jobId: z.ZodNullable<z.ZodString>;
                    targetFn: z.ZodNullable<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    type: string;
                    createdAt: Date;
                    service: string | null;
                    jobId: string | null;
                    targetFn: string | null;
                    machineId: string | null;
                }, {
                    id: string;
                    type: string;
                    createdAt: Date;
                    service: string | null;
                    jobId: string | null;
                    targetFn: string | null;
                    machineId: string | null;
                }>, "many">;
                jobs: z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    status: z.ZodString;
                    targetFn: z.ZodString;
                    service: z.ZodString;
                    resultType: z.ZodNullable<z.ZodString>;
                    createdAt: z.ZodDate;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    status: string;
                    createdAt: Date;
                    service: string;
                    resultType: string | null;
                    targetFn: string;
                }, {
                    id: string;
                    status: string;
                    createdAt: Date;
                    service: string;
                    resultType: string | null;
                    targetFn: string;
                }>, "many">;
                inputRequests: z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    type: z.ZodString;
                    requestArgs: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                    resolvedAt: z.ZodOptional<z.ZodNullable<z.ZodDate>>;
                    createdAt: z.ZodDate;
                    service: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                    function: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                    presentedOptions: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    type: string;
                    createdAt: Date;
                    function?: string | null | undefined;
                    service?: string | null | undefined;
                    description?: string | null | undefined;
                    resolvedAt?: Date | null | undefined;
                    requestArgs?: string | null | undefined;
                    presentedOptions?: string[] | null | undefined;
                }, {
                    id: string;
                    type: string;
                    createdAt: Date;
                    function?: string | null | undefined;
                    service?: string | null | undefined;
                    description?: string | null | undefined;
                    resolvedAt?: Date | null | undefined;
                    requestArgs?: string | null | undefined;
                    presentedOptions?: string[] | null | undefined;
                }>, "many">;
                run: z.ZodObject<{
                    id: z.ZodString;
                    jobHandle: z.ZodNullable<z.ZodString>;
                    userId: z.ZodNullable<z.ZodString>;
                    status: z.ZodNullable<z.ZodEnum<["pending", "running", "paused", "done", "failed"]>>;
                    failureReason: z.ZodNullable<z.ZodString>;
                    test: z.ZodBoolean;
                    feedbackComment: z.ZodNullable<z.ZodString>;
                    feedbackScore: z.ZodNullable<z.ZodNumber>;
                    attachedFunctions: z.ZodNullable<z.ZodArray<z.ZodString, "many">>;
                    name: z.ZodNullable<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    name: string | null;
                    status: "done" | "pending" | "running" | "paused" | "failed" | null;
                    attachedFunctions: string[] | null;
                    test: boolean;
                    userId: string | null;
                    feedbackScore: number | null;
                    jobHandle: string | null;
                    failureReason: string | null;
                    feedbackComment: string | null;
                }, {
                    id: string;
                    name: string | null;
                    status: "done" | "pending" | "running" | "paused" | "failed" | null;
                    attachedFunctions: string[] | null;
                    test: boolean;
                    userId: string | null;
                    feedbackScore: number | null;
                    jobHandle: string | null;
                    failureReason: string | null;
                    feedbackComment: string | null;
                }>;
                blobs: z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    name: z.ZodString;
                    type: z.ZodEnum<["json", "json-array"]>;
                    encoding: z.ZodEnum<["base64"]>;
                    size: z.ZodNumber;
                    createdAt: z.ZodDate;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    name: string;
                    type: "json" | "json-array";
                    encoding: "base64";
                    size: number;
                    createdAt: Date;
                }, {
                    id: string;
                    name: string;
                    type: "json" | "json-array";
                    encoding: "base64";
                    size: number;
                    createdAt: Date;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                jobs: {
                    id: string;
                    status: string;
                    createdAt: Date;
                    service: string;
                    resultType: string | null;
                    targetFn: string;
                }[];
                messages: {
                    id: string;
                    type: "result" | "template" | "human" | "supervisor" | "agent" | "agent-invalid";
                    createdAt: Date;
                    data: {
                        message: string;
                        details?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    } | {
                        id: string;
                        result: {} & {
                            [k: string]: unknown;
                        };
                    } | {
                        result?: any;
                        summary?: string | undefined;
                        done?: boolean | undefined;
                        learnings?: {
                            summary: string;
                            entities: {
                                name: string;
                                type: "tool";
                            }[];
                            relevance: {
                                temporality: "transient" | "persistent";
                            };
                        }[] | undefined;
                        issue?: string | undefined;
                        invocations?: {
                            toolName: string;
                            reasoning: string;
                            input: {} & {
                                [k: string]: unknown;
                            };
                            id?: string | undefined;
                        }[] | undefined;
                    };
                    pending: boolean;
                    displayableContext: Record<string, string> | null;
                }[];
                blobs: {
                    id: string;
                    name: string;
                    type: "json" | "json-array";
                    encoding: "base64";
                    size: number;
                    createdAt: Date;
                }[];
                activity: {
                    id: string;
                    type: string;
                    createdAt: Date;
                    service: string | null;
                    jobId: string | null;
                    targetFn: string | null;
                    machineId: string | null;
                }[];
                inputRequests: {
                    id: string;
                    type: string;
                    createdAt: Date;
                    function?: string | null | undefined;
                    service?: string | null | undefined;
                    description?: string | null | undefined;
                    resolvedAt?: Date | null | undefined;
                    requestArgs?: string | null | undefined;
                    presentedOptions?: string[] | null | undefined;
                }[];
                run: {
                    id: string;
                    name: string | null;
                    status: "done" | "pending" | "running" | "paused" | "failed" | null;
                    attachedFunctions: string[] | null;
                    test: boolean;
                    userId: string | null;
                    feedbackScore: number | null;
                    jobHandle: string | null;
                    failureReason: string | null;
                    feedbackComment: string | null;
                };
            }, {
                jobs: {
                    id: string;
                    status: string;
                    createdAt: Date;
                    service: string;
                    resultType: string | null;
                    targetFn: string;
                }[];
                messages: {
                    id: string;
                    type: "result" | "template" | "human" | "supervisor" | "agent" | "agent-invalid";
                    createdAt: Date;
                    data: {
                        message: string;
                        details?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    } | {
                        id: string;
                        result: {} & {
                            [k: string]: unknown;
                        };
                    } | {
                        result?: any;
                        summary?: string | undefined;
                        done?: boolean | undefined;
                        learnings?: {
                            summary: string;
                            entities: {
                                name: string;
                                type: "tool";
                            }[];
                            relevance: {
                                temporality: "transient" | "persistent";
                            };
                        }[] | undefined;
                        issue?: string | undefined;
                        invocations?: {
                            toolName: string;
                            reasoning: string;
                            input: {} & {
                                [k: string]: unknown;
                            };
                            id?: string | undefined;
                        }[] | undefined;
                    };
                    displayableContext: Record<string, string> | null;
                    pending?: boolean | undefined;
                }[];
                blobs: {
                    id: string;
                    name: string;
                    type: "json" | "json-array";
                    encoding: "base64";
                    size: number;
                    createdAt: Date;
                }[];
                activity: {
                    id: string;
                    type: string;
                    createdAt: Date;
                    service: string | null;
                    jobId: string | null;
                    targetFn: string | null;
                    machineId: string | null;
                }[];
                inputRequests: {
                    id: string;
                    type: string;
                    createdAt: Date;
                    function?: string | null | undefined;
                    service?: string | null | undefined;
                    description?: string | null | undefined;
                    resolvedAt?: Date | null | undefined;
                    requestArgs?: string | null | undefined;
                    presentedOptions?: string[] | null | undefined;
                }[];
                run: {
                    id: string;
                    name: string | null;
                    status: "done" | "pending" | "running" | "paused" | "failed" | null;
                    attachedFunctions: string[] | null;
                    test: boolean;
                    userId: string | null;
                    feedbackScore: number | null;
                    jobHandle: string | null;
                    failureReason: string | null;
                    feedbackComment: string | null;
                };
            }>;
        };
    };
    readonly getBlobData: {
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
            blobId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
            blobId: string;
        }, {
            clusterId: string;
            blobId: string;
        }>;
        readonly method: "GET";
        path: "/clusters/:clusterId/blobs/:blobId/data";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            readonly 200: z.ZodAny;
            readonly 404: z.ZodUndefined;
        };
    };
    readonly upsertToolMetadata: {
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
        }, {
            clusterId: string;
        }>;
        readonly method: "PUT";
        readonly body: z.ZodObject<{
            service: z.ZodString;
            function_name: z.ZodString;
            user_defined_context: z.ZodNullable<z.ZodString>;
            result_schema: z.ZodNullable<z.ZodUnknown>;
        }, "strip", z.ZodTypeAny, {
            service: string;
            function_name: string;
            user_defined_context: string | null;
            result_schema?: unknown;
        }, {
            service: string;
            function_name: string;
            user_defined_context: string | null;
            result_schema?: unknown;
        }>;
        path: "/clusters/:clusterId/tool-metadata";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            readonly 204: z.ZodUndefined;
            readonly 401: z.ZodUndefined;
        };
    };
    readonly getToolMetadata: {
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
            service: z.ZodString;
            function_name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            service: string;
            clusterId: string;
            function_name: string;
        }, {
            service: string;
            clusterId: string;
            function_name: string;
        }>;
        readonly method: "GET";
        path: "/clusters/:clusterId/tool-metadata/:service/:function_name";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            readonly 200: z.ZodObject<{
                cluster_id: z.ZodString;
                service: z.ZodString;
                function_name: z.ZodString;
                user_defined_context: z.ZodNullable<z.ZodString>;
                result_schema: z.ZodNullable<z.ZodUnknown>;
            }, "strip", z.ZodTypeAny, {
                service: string;
                function_name: string;
                user_defined_context: string | null;
                cluster_id: string;
                result_schema?: unknown;
            }, {
                service: string;
                function_name: string;
                user_defined_context: string | null;
                cluster_id: string;
                result_schema?: unknown;
            }>;
            readonly 401: z.ZodUndefined;
            readonly 404: z.ZodObject<{
                message: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                message: string;
            }, {
                message: string;
            }>;
        };
    };
    readonly getAllToolMetadataForService: {
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
            service: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            service: string;
            clusterId: string;
        }, {
            service: string;
            clusterId: string;
        }>;
        readonly method: "GET";
        path: "/clusters/:clusterId/tool-metadata/:service";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            readonly 200: z.ZodArray<z.ZodObject<{
                cluster_id: z.ZodString;
                service: z.ZodString;
                function_name: z.ZodString;
                user_defined_context: z.ZodNullable<z.ZodString>;
                result_schema: z.ZodNullable<z.ZodUnknown>;
            }, "strip", z.ZodTypeAny, {
                service: string;
                function_name: string;
                user_defined_context: string | null;
                cluster_id: string;
                result_schema?: unknown;
            }, {
                service: string;
                function_name: string;
                user_defined_context: string | null;
                cluster_id: string;
                result_schema?: unknown;
            }>, "many">;
            readonly 401: z.ZodUndefined;
        };
    };
    readonly deleteToolMetadata: {
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
            service: z.ZodString;
            function_name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            service: string;
            clusterId: string;
            function_name: string;
        }, {
            service: string;
            clusterId: string;
            function_name: string;
        }>;
        readonly method: "DELETE";
        readonly body: z.ZodUndefined;
        path: "/clusters/:clusterId/tool-metadata/:service/:function_name";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            readonly 204: z.ZodUndefined;
            readonly 401: z.ZodUndefined;
        };
    };
    readonly generatePromptTemplate: {
        readonly query: z.ZodObject<{
            runId: z.ZodString;
            messageId: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            runId: string;
            messageId?: string | undefined;
        }, {
            runId: string;
            messageId?: string | undefined;
        }>;
        readonly method: "GET";
        path: "/clusters/:clusterId/prompt-templates/generate";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            readonly 200: z.ZodObject<{
                name: z.ZodString;
                prompt: z.ZodString;
                attachedFunctions: z.ZodArray<z.ZodString, "many">;
                structuredOutput: z.ZodNullable<z.ZodUnknown>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                attachedFunctions: string[];
                prompt: string;
                structuredOutput?: unknown;
            }, {
                name: string;
                attachedFunctions: string[];
                prompt: string;
                structuredOutput?: unknown;
            }>;
        };
    };
    readonly createPromptTemplate: {
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
        }, {
            clusterId: string;
        }>;
        readonly method: "POST";
        readonly body: z.ZodObject<{
            name: z.ZodString;
            prompt: z.ZodString;
            attachedFunctions: z.ZodArray<z.ZodString, "many">;
            structuredOutput: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            attachedFunctions: string[];
            prompt: string;
            structuredOutput?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
        }, {
            name: string;
            attachedFunctions: string[];
            prompt: string;
            structuredOutput?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
        }>;
        path: "/clusters/:clusterId/prompt-templates";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            readonly 201: z.ZodObject<{
                id: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                id: string;
            }, {
                id: string;
            }>;
            readonly 401: z.ZodUndefined;
        };
    };
    readonly getPromptTemplate: {
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
            templateId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
            templateId: string;
        }, {
            clusterId: string;
            templateId: string;
        }>;
        readonly query: z.ZodObject<{
            withPreviousVersions: z.ZodDefault<z.ZodEnum<["true", "false"]>>;
        }, "strip", z.ZodTypeAny, {
            withPreviousVersions: "true" | "false";
        }, {
            withPreviousVersions?: "true" | "false" | undefined;
        }>;
        readonly method: "GET";
        path: "/clusters/:clusterId/prompt-templates/:templateId";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            readonly 200: z.ZodObject<{
                id: z.ZodString;
                clusterId: z.ZodString;
                name: z.ZodString;
                prompt: z.ZodString;
                attachedFunctions: z.ZodArray<z.ZodString, "many">;
                structuredOutput: z.ZodNullable<z.ZodUnknown>;
                createdAt: z.ZodDate;
                updatedAt: z.ZodDate;
                versions: z.ZodArray<z.ZodObject<{
                    version: z.ZodNumber;
                    name: z.ZodString;
                    prompt: z.ZodString;
                    attachedFunctions: z.ZodArray<z.ZodString, "many">;
                    structuredOutput: z.ZodNullable<z.ZodUnknown>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    version: number;
                    attachedFunctions: string[];
                    prompt: string;
                    structuredOutput?: unknown;
                }, {
                    name: string;
                    version: number;
                    attachedFunctions: string[];
                    prompt: string;
                    structuredOutput?: unknown;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                id: string;
                name: string;
                createdAt: Date;
                clusterId: string;
                attachedFunctions: string[];
                prompt: string;
                updatedAt: Date;
                versions: {
                    name: string;
                    version: number;
                    attachedFunctions: string[];
                    prompt: string;
                    structuredOutput?: unknown;
                }[];
                structuredOutput?: unknown;
            }, {
                id: string;
                name: string;
                createdAt: Date;
                clusterId: string;
                attachedFunctions: string[];
                prompt: string;
                updatedAt: Date;
                versions: {
                    name: string;
                    version: number;
                    attachedFunctions: string[];
                    prompt: string;
                    structuredOutput?: unknown;
                }[];
                structuredOutput?: unknown;
            }>;
            readonly 401: z.ZodUndefined;
            readonly 404: z.ZodObject<{
                message: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                message: string;
            }, {
                message: string;
            }>;
        };
    };
    readonly updatePromptTemplate: {
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
            templateId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
            templateId: string;
        }, {
            clusterId: string;
            templateId: string;
        }>;
        readonly method: "PUT";
        readonly body: z.ZodObject<{
            name: z.ZodOptional<z.ZodString>;
            prompt: z.ZodOptional<z.ZodString>;
            attachedFunctions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            structuredOutput: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
        }, "strip", z.ZodTypeAny, {
            name?: string | undefined;
            attachedFunctions?: string[] | undefined;
            prompt?: string | undefined;
            structuredOutput?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
        }, {
            name?: string | undefined;
            attachedFunctions?: string[] | undefined;
            prompt?: string | undefined;
            structuredOutput?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
        }>;
        path: "/clusters/:clusterId/prompt-templates/:templateId";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            readonly 200: z.ZodObject<{
                id: z.ZodString;
                clusterId: z.ZodString;
                name: z.ZodString;
                prompt: z.ZodString;
                attachedFunctions: z.ZodArray<z.ZodString, "many">;
                structuredOutput: z.ZodNullable<z.ZodUnknown>;
                createdAt: z.ZodDate;
                updatedAt: z.ZodDate;
            }, "strip", z.ZodTypeAny, {
                id: string;
                name: string;
                createdAt: Date;
                clusterId: string;
                attachedFunctions: string[];
                prompt: string;
                updatedAt: Date;
                structuredOutput?: unknown;
            }, {
                id: string;
                name: string;
                createdAt: Date;
                clusterId: string;
                attachedFunctions: string[];
                prompt: string;
                updatedAt: Date;
                structuredOutput?: unknown;
            }>;
            readonly 401: z.ZodUndefined;
            readonly 404: z.ZodObject<{
                message: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                message: string;
            }, {
                message: string;
            }>;
        };
    };
    readonly deletePromptTemplate: {
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
            templateId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
            templateId: string;
        }, {
            clusterId: string;
            templateId: string;
        }>;
        readonly method: "DELETE";
        readonly body: z.ZodUndefined;
        path: "/clusters/:clusterId/prompt-templates/:templateId";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            readonly 204: z.ZodUndefined;
            readonly 401: z.ZodUndefined;
            readonly 404: z.ZodObject<{
                message: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                message: string;
            }, {
                message: string;
            }>;
        };
    };
    readonly listPromptTemplates: {
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
        }, {
            clusterId: string;
        }>;
        readonly method: "GET";
        path: "/clusters/:clusterId/prompt-templates";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            readonly 200: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                clusterId: z.ZodString;
                name: z.ZodString;
                prompt: z.ZodString;
                attachedFunctions: z.ZodArray<z.ZodString, "many">;
                structuredOutput: z.ZodNullable<z.ZodUnknown>;
                createdAt: z.ZodDate;
                updatedAt: z.ZodDate;
            }, "strip", z.ZodTypeAny, {
                id: string;
                name: string;
                createdAt: Date;
                clusterId: string;
                attachedFunctions: string[];
                prompt: string;
                updatedAt: Date;
                structuredOutput?: unknown;
            }, {
                id: string;
                name: string;
                createdAt: Date;
                clusterId: string;
                attachedFunctions: string[];
                prompt: string;
                updatedAt: Date;
                structuredOutput?: unknown;
            }>, "many">;
            readonly 401: z.ZodUndefined;
        };
    };
    readonly searchPromptTemplates: {
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
        }, {
            clusterId: string;
        }>;
        readonly query: z.ZodObject<{
            search: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            search: string;
        }, {
            search: string;
        }>;
        readonly method: "GET";
        path: "/clusters/:clusterId/prompt-templates/search";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            readonly 200: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                clusterId: z.ZodString;
                name: z.ZodString;
                prompt: z.ZodString;
                attachedFunctions: z.ZodArray<z.ZodString, "many">;
                structuredOutput: z.ZodNullable<z.ZodUnknown>;
                createdAt: z.ZodDate;
                updatedAt: z.ZodDate;
                similarity: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                id: string;
                name: string;
                createdAt: Date;
                clusterId: string;
                attachedFunctions: string[];
                prompt: string;
                updatedAt: Date;
                similarity: number;
                structuredOutput?: unknown;
            }, {
                id: string;
                name: string;
                createdAt: Date;
                clusterId: string;
                attachedFunctions: string[];
                prompt: string;
                updatedAt: Date;
                similarity: number;
                structuredOutput?: unknown;
            }>, "many">;
            readonly 401: z.ZodUndefined;
        };
    };
    readonly updateClusterContext: {
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
        }, {
            clusterId: string;
        }>;
        readonly method: "PUT";
        readonly body: z.ZodObject<{
            additionalContext: z.ZodObject<{
                current: z.ZodObject<{
                    version: z.ZodString;
                    content: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    version: string;
                    content: string;
                }, {
                    version: string;
                    content: string;
                }>;
                history: z.ZodArray<z.ZodObject<{
                    version: z.ZodString;
                    content: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    version: string;
                    content: string;
                }, {
                    version: string;
                    content: string;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                current: {
                    version: string;
                    content: string;
                };
                history: {
                    version: string;
                    content: string;
                }[];
            }, {
                current: {
                    version: string;
                    content: string;
                };
                history: {
                    version: string;
                    content: string;
                }[];
            }>;
        }, "strip", z.ZodTypeAny, {
            additionalContext: {
                current: {
                    version: string;
                    content: string;
                };
                history: {
                    version: string;
                    content: string;
                }[];
            };
        }, {
            additionalContext: {
                current: {
                    version: string;
                    content: string;
                };
                history: {
                    version: string;
                    content: string;
                }[];
            };
        }>;
        path: "/clusters/:clusterId/additional-context";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            readonly 204: z.ZodUndefined;
            readonly 401: z.ZodUndefined;
        };
    };
    readonly getTemplateMetrics: {
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
            templateId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
            templateId: string;
        }, {
            clusterId: string;
            templateId: string;
        }>;
        readonly method: "GET";
        path: "/clusters/:clusterId/prompt-templates/:templateId/metrics";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            readonly 200: z.ZodArray<z.ZodObject<{
                createdAt: z.ZodDate;
                feedbackScore: z.ZodNullable<z.ZodNumber>;
                jobFailureCount: z.ZodNumber;
                timeToCompletion: z.ZodNumber;
                jobCount: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                createdAt: Date;
                feedbackScore: number | null;
                jobFailureCount: number;
                timeToCompletion: number;
                jobCount: number;
            }, {
                createdAt: Date;
                feedbackScore: number | null;
                jobFailureCount: number;
                timeToCompletion: number;
                jobCount: number;
            }>, "many">;
        };
    };
    readonly createClusterKnowledgeArtifact: {
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
        }, {
            clusterId: string;
        }>;
        readonly method: "POST";
        readonly body: z.ZodObject<{
            artifacts: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                data: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                id: string;
                data: string;
            }, {
                id: string;
                data: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            artifacts: {
                id: string;
                data: string;
            }[];
        }, {
            artifacts: {
                id: string;
                data: string;
            }[];
        }>;
        path: "/clusters/:clusterId/knowledge";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            readonly 204: z.ZodUndefined;
            readonly 401: z.ZodUndefined;
        };
    };
    readonly createRetry: {
        readonly method: "POST";
        readonly body: z.ZodObject<{
            messageId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            messageId: string;
        }, {
            messageId: string;
        }>;
        path: "/clusters/:clusterId/runs/:runId/retry";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            readonly 204: z.ZodUndefined;
            readonly 401: z.ZodUndefined;
        };
    };
    readonly createCall: {
        readonly query: z.ZodObject<{
            waitTime: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            waitTime: number;
        }, {
            waitTime?: number | undefined;
        }>;
        readonly method: "POST";
        readonly body: z.ZodObject<{
            service: z.ZodString;
            function: z.ZodString;
            input: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
        }, "strip", z.ZodTypeAny, {
            function: string;
            input: {} & {
                [k: string]: unknown;
            };
            service: string;
        }, {
            function: string;
            input: {} & {
                [k: string]: unknown;
            };
            service: string;
        }>;
        path: "/clusters/:clusterId/calls";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            readonly 401: z.ZodUndefined;
            readonly 200: z.ZodObject<{
                id: z.ZodString;
                result: z.ZodNullable<z.ZodAny>;
                resultType: z.ZodNullable<z.ZodEnum<["resolution", "rejection"]>>;
                status: z.ZodEnum<["pending", "running", "success", "failure", "stalled"]>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                status: "pending" | "running" | "success" | "failure" | "stalled";
                resultType: "resolution" | "rejection" | null;
                result?: any;
            }, {
                id: string;
                status: "pending" | "running" | "success" | "failure" | "stalled";
                resultType: "resolution" | "rejection" | null;
                result?: any;
            }>;
        };
    };
    readonly createCallResult: {
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
            callId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
            callId: string;
        }, {
            clusterId: string;
            callId: string;
        }>;
        readonly method: "POST";
        readonly body: z.ZodObject<{
            result: z.ZodAny;
            resultType: z.ZodEnum<["resolution", "rejection"]>;
            meta: z.ZodObject<{
                functionExecutionTime: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                functionExecutionTime?: number | undefined;
            }, {
                functionExecutionTime?: number | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            resultType: "resolution" | "rejection";
            meta: {
                functionExecutionTime?: number | undefined;
            };
            result?: any;
        }, {
            resultType: "resolution" | "rejection";
            meta: {
                functionExecutionTime?: number | undefined;
            };
            result?: any;
        }>;
        path: "/clusters/:clusterId/calls/:callId/result";
        headers: z.ZodObject<{
            "x-machine-id": z.ZodOptional<z.ZodString>;
            "x-machine-sdk-version": z.ZodOptional<z.ZodString>;
            "x-machine-sdk-language": z.ZodOptional<z.ZodString>;
            "x-forwarded-for": z.ZodOptional<z.ZodOptional<z.ZodString>>;
            "x-sentinel-no-mask": z.ZodOptional<z.ZodOptional<z.ZodString>>;
            "x-sentinel-unmask-keys": z.ZodOptional<z.ZodString>;
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
            "x-machine-id"?: string | undefined;
            "x-machine-sdk-version"?: string | undefined;
            "x-machine-sdk-language"?: string | undefined;
            "x-forwarded-for"?: string | undefined;
            "x-sentinel-no-mask"?: string | undefined;
            "x-sentinel-unmask-keys"?: string | undefined;
        }, {
            authorization: string;
            "x-machine-id"?: string | undefined;
            "x-machine-sdk-version"?: string | undefined;
            "x-machine-sdk-language"?: string | undefined;
            "x-forwarded-for"?: string | undefined;
            "x-sentinel-no-mask"?: string | undefined;
            "x-sentinel-unmask-keys"?: string | undefined;
        }>;
        responses: {
            readonly 204: z.ZodUndefined;
            readonly 401: z.ZodUndefined;
        };
    };
    readonly listCalls: {
        readonly pathParams: z.ZodObject<{
            clusterId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            clusterId: string;
        }, {
            clusterId: string;
        }>;
        readonly query: z.ZodObject<{
            service: z.ZodString;
            status: z.ZodDefault<z.ZodEnum<["pending", "running", "paused", "done", "failed"]>>;
            limit: z.ZodDefault<z.ZodNumber>;
            acknowledge: z.ZodDefault<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            status: "done" | "pending" | "running" | "paused" | "failed";
            service: string;
            limit: number;
            acknowledge: boolean;
        }, {
            service: string;
            status?: "done" | "pending" | "running" | "paused" | "failed" | undefined;
            limit?: number | undefined;
            acknowledge?: boolean | undefined;
        }>;
        readonly method: "GET";
        path: "/clusters/:clusterId/calls";
        headers: z.ZodObject<{
            "x-machine-id": z.ZodOptional<z.ZodString>;
            "x-machine-sdk-version": z.ZodOptional<z.ZodString>;
            "x-machine-sdk-language": z.ZodOptional<z.ZodString>;
            "x-forwarded-for": z.ZodOptional<z.ZodOptional<z.ZodString>>;
            "x-sentinel-no-mask": z.ZodOptional<z.ZodOptional<z.ZodString>>;
            "x-sentinel-unmask-keys": z.ZodOptional<z.ZodString>;
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
            "x-machine-id"?: string | undefined;
            "x-machine-sdk-version"?: string | undefined;
            "x-machine-sdk-language"?: string | undefined;
            "x-forwarded-for"?: string | undefined;
            "x-sentinel-no-mask"?: string | undefined;
            "x-sentinel-unmask-keys"?: string | undefined;
        }, {
            authorization: string;
            "x-machine-id"?: string | undefined;
            "x-machine-sdk-version"?: string | undefined;
            "x-machine-sdk-language"?: string | undefined;
            "x-forwarded-for"?: string | undefined;
            "x-sentinel-no-mask"?: string | undefined;
            "x-sentinel-unmask-keys"?: string | undefined;
        }>;
        responses: {
            readonly 401: z.ZodUndefined;
            readonly 200: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                function: z.ZodString;
                input: z.ZodAny;
            }, "strip", z.ZodTypeAny, {
                function: string;
                id: string;
                input?: any;
            }, {
                function: string;
                id: string;
                input?: any;
            }>, "many">;
        };
    };
};
